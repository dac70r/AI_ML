
sine_model.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a330  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad4  0800a5e0  0800a5e0  0000b5e0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b0b4  0800b0b4  0000c0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b0bc  0800b0bc  0000c0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b0c0  0800b0c0  0000c0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000864  24000000  0800b0c4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000384  24000880  0800b928  0000d880  2**5
                  ALLOC
  8 ._user_heap_stack 00001000  20000000  20000000  0000e000  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d864  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015aff  00000000  00000000  0000d892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002cfc  00000000  00000000  00023391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f98  00000000  00000000  00026090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000bfb  00000000  00000000  00027028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039b12  00000000  00000000  00027c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016c8d  00000000  00000000  00061735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016ec08  00000000  00000000  000783c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000086  00000000  00000000  001e6fca  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000051f8  00000000  00000000  001e7050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000075  00000000  00000000  001ec248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000880 	.word	0x24000880
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a5b8 	.word	0x0800a5b8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000884 	.word	0x24000884
 80002dc:	0800a5b8 	.word	0x0800a5b8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000696:	4b3b      	ldr	r3, [pc, #236]	@ (8000784 <MX_GPIO_Init+0x104>)
 8000698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800069c:	4a39      	ldr	r2, [pc, #228]	@ (8000784 <MX_GPIO_Init+0x104>)
 800069e:	f043 0304 	orr.w	r3, r3, #4
 80006a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006a6:	4b37      	ldr	r3, [pc, #220]	@ (8000784 <MX_GPIO_Init+0x104>)
 80006a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ac:	f003 0304 	and.w	r3, r3, #4
 80006b0:	613b      	str	r3, [r7, #16]
 80006b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b4:	4b33      	ldr	r3, [pc, #204]	@ (8000784 <MX_GPIO_Init+0x104>)
 80006b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ba:	4a32      	ldr	r2, [pc, #200]	@ (8000784 <MX_GPIO_Init+0x104>)
 80006bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006c4:	4b2f      	ldr	r3, [pc, #188]	@ (8000784 <MX_GPIO_Init+0x104>)
 80006c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000784 <MX_GPIO_Init+0x104>)
 80006d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d8:	4a2a      	ldr	r2, [pc, #168]	@ (8000784 <MX_GPIO_Init+0x104>)
 80006da:	f043 0302 	orr.w	r3, r3, #2
 80006de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006e2:	4b28      	ldr	r3, [pc, #160]	@ (8000784 <MX_GPIO_Init+0x104>)
 80006e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e8:	f003 0302 	and.w	r3, r3, #2
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006f0:	4b24      	ldr	r3, [pc, #144]	@ (8000784 <MX_GPIO_Init+0x104>)
 80006f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f6:	4a23      	ldr	r2, [pc, #140]	@ (8000784 <MX_GPIO_Init+0x104>)
 80006f8:	f043 0308 	orr.w	r3, r3, #8
 80006fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000700:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <MX_GPIO_Init+0x104>)
 8000702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000706:	f003 0308 	and.w	r3, r3, #8
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <MX_GPIO_Init+0x104>)
 8000710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000714:	4a1b      	ldr	r2, [pc, #108]	@ (8000784 <MX_GPIO_Init+0x104>)
 8000716:	f043 0310 	orr.w	r3, r3, #16
 800071a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800071e:	4b19      	ldr	r3, [pc, #100]	@ (8000784 <MX_GPIO_Init+0x104>)
 8000720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000724:	f003 0310 	and.w	r3, r3, #16
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000732:	4815      	ldr	r0, [pc, #84]	@ (8000788 <MX_GPIO_Init+0x108>)
 8000734:	f000 ff76 	bl	8001624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	2102      	movs	r1, #2
 800073c:	4813      	ldr	r0, [pc, #76]	@ (800078c <MX_GPIO_Init+0x10c>)
 800073e:	f000 ff71 	bl	8001624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000742:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	2301      	movs	r3, #1
 800074a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800074c:	2302      	movs	r3, #2
 800074e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2300      	movs	r3, #0
 8000752:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	4619      	mov	r1, r3
 800075a:	480b      	ldr	r0, [pc, #44]	@ (8000788 <MX_GPIO_Init+0x108>)
 800075c:	f000 fdb2 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000760:	2302      	movs	r3, #2
 8000762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4619      	mov	r1, r3
 8000776:	4805      	ldr	r0, [pc, #20]	@ (800078c <MX_GPIO_Init+0x10c>)
 8000778:	f000 fda4 	bl	80012c4 <HAL_GPIO_Init>

}
 800077c:	bf00      	nop
 800077e:	3728      	adds	r7, #40	@ 0x28
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	58024400 	.word	0x58024400
 8000788:	58020400 	.word	0x58020400
 800078c:	58021000 	.word	0x58021000

08000790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	@ 0x28
 8000794:	af02      	add	r7, sp, #8
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000796:	4b58      	ldr	r3, [pc, #352]	@ (80008f8 <main+0x168>)
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d11b      	bne.n	80007da <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007a2:	f3bf 8f4f 	dsb	sy
}
 80007a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007a8:	f3bf 8f6f 	isb	sy
}
 80007ac:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80007ae:	4b52      	ldr	r3, [pc, #328]	@ (80008f8 <main+0x168>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007b6:	f3bf 8f4f 	dsb	sy
}
 80007ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007bc:	f3bf 8f6f 	isb	sy
}
 80007c0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007c2:	4b4d      	ldr	r3, [pc, #308]	@ (80008f8 <main+0x168>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	4a4c      	ldr	r2, [pc, #304]	@ (80008f8 <main+0x168>)
 80007c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007cc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007ce:	f3bf 8f4f 	dsb	sy
}
 80007d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007d4:	f3bf 8f6f 	isb	sy
}
 80007d8:	e000      	b.n	80007dc <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007da:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007dc:	4b46      	ldr	r3, [pc, #280]	@ (80008f8 <main+0x168>)
 80007de:	695b      	ldr	r3, [r3, #20]
 80007e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d138      	bne.n	800085a <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80007e8:	4b43      	ldr	r3, [pc, #268]	@ (80008f8 <main+0x168>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80007f0:	f3bf 8f4f 	dsb	sy
}
 80007f4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80007f6:	4b40      	ldr	r3, [pc, #256]	@ (80008f8 <main+0x168>)
 80007f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80007fc:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	0b5b      	lsrs	r3, r3, #13
 8000802:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000806:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	08db      	lsrs	r3, r3, #3
 800080c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000810:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	015a      	lsls	r2, r3, #5
 8000816:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800081a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000820:	4935      	ldr	r1, [pc, #212]	@ (80008f8 <main+0x168>)
 8000822:	4313      	orrs	r3, r2
 8000824:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	1e5a      	subs	r2, r3, #1
 800082c:	607a      	str	r2, [r7, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d1ef      	bne.n	8000812 <main+0x82>
    } while(sets-- != 0U);
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	1e5a      	subs	r2, r3, #1
 8000836:	60ba      	str	r2, [r7, #8]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d1e5      	bne.n	8000808 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800083c:	f3bf 8f4f 	dsb	sy
}
 8000840:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000842:	4b2d      	ldr	r3, [pc, #180]	@ (80008f8 <main+0x168>)
 8000844:	695b      	ldr	r3, [r3, #20]
 8000846:	4a2c      	ldr	r2, [pc, #176]	@ (80008f8 <main+0x168>)
 8000848:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800084c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800084e:	f3bf 8f4f 	dsb	sy
}
 8000852:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000854:	f3bf 8f6f 	isb	sy
}
 8000858:	e000      	b.n	800085c <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800085a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085c:	f000 fb8c 	bl	8000f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000860:	f000 f854 	bl	800090c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000864:	f7ff ff0c 	bl	8000680 <MX_GPIO_Init>
  MX_TIM16_Init();
 8000868:	f000 fa0c 	bl	8000c84 <MX_TIM16_Init>
  MX_USART3_UART_Init();
 800086c:	f000 fa52 	bl	8000d14 <MX_USART3_UART_Init>
  MX_X_CUBE_AI_Init();
 8000870:	f005 f8f2 	bl	8005a58 <MX_X_CUBE_AI_Init>

  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	2102      	movs	r1, #2
 8000878:	4820      	ldr	r0, [pc, #128]	@ (80008fc <main+0x16c>)
 800087a:	f000 fed3 	bl	8001624 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */

	// Seed the random number generator
	srand(time(NULL));
 800087e:	2000      	movs	r0, #0
 8000880:	f007 ff48 	bl	8008714 <time>
 8000884:	4602      	mov	r2, r0
 8000886:	460b      	mov	r3, r1
 8000888:	4613      	mov	r3, r2
 800088a:	4618      	mov	r0, r3
 800088c:	f007 f81a 	bl	80078c4 <srand>

	// Generate a random value between 0 and 1
	double random_fraction = (double)rand() / RAND_MAX;
 8000890:	f007 f846 	bl	8007920 <rand>
 8000894:	ee07 0a90 	vmov	s15, r0
 8000898:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800089c:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 80008e8 <main+0x158>
 80008a0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008a4:	ed87 7b06 	vstr	d7, [r7, #24]

	// Scale it to the range [0, 2*pi]
	double random_value = random_fraction * 2.0 * M_PI;
 80008a8:	ed97 7b06 	vldr	d7, [r7, #24]
 80008ac:	ee37 7b07 	vadd.f64	d7, d7, d7
 80008b0:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 80008f0 <main+0x160>
 80008b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008b8:	ed87 7b04 	vstr	d7, [r7, #16]

	// Convert integer to string using snprintf
	snprintf(str, sizeof(str), "%f", random_value);
 80008bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80008c0:	e9cd 2300 	strd	r2, r3, [sp]
 80008c4:	4a0e      	ldr	r2, [pc, #56]	@ (8000900 <main+0x170>)
 80008c6:	2114      	movs	r1, #20
 80008c8:	480e      	ldr	r0, [pc, #56]	@ (8000904 <main+0x174>)
 80008ca:	f007 fdff 	bl	80084cc <sniprintf>

	// Print to visualize the results
	printToConsole(str);
 80008ce:	480d      	ldr	r0, [pc, #52]	@ (8000904 <main+0x174>)
 80008d0:	f000 fae8 	bl	8000ea4 <printToConsole>

	// Set the Red GPIO
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008da:	480b      	ldr	r0, [pc, #44]	@ (8000908 <main+0x178>)
 80008dc:	f000 fea2 	bl	8001624 <HAL_GPIO_WritePin>

	// Entry point for AI Stack
	MX_X_CUBE_AI_Process();
 80008e0:	f005 f8ce 	bl	8005a80 <MX_X_CUBE_AI_Process>
  {
 80008e4:	bf00      	nop
 80008e6:	e7ca      	b.n	800087e <main+0xee>
 80008e8:	ffc00000 	.word	0xffc00000
 80008ec:	41dfffff 	.word	0x41dfffff
 80008f0:	54442d18 	.word	0x54442d18
 80008f4:	400921fb 	.word	0x400921fb
 80008f8:	e000ed00 	.word	0xe000ed00
 80008fc:	58021000 	.word	0x58021000
 8000900:	0800a5e0 	.word	0x0800a5e0
 8000904:	2400089c 	.word	0x2400089c
 8000908:	58020400 	.word	0x58020400

0800090c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b09e      	sub	sp, #120	@ 0x78
 8000910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000912:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000916:	224c      	movs	r2, #76	@ 0x4c
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f007 fee2 	bl	80086e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	2220      	movs	r2, #32
 8000926:	2100      	movs	r1, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f007 fedb 	bl	80086e4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800092e:	2002      	movs	r0, #2
 8000930:	f000 fe92 	bl	8001658 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000934:	2300      	movs	r3, #0
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	4b48      	ldr	r3, [pc, #288]	@ (8000a5c <SystemClock_Config+0x150>)
 800093a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800093c:	4a47      	ldr	r2, [pc, #284]	@ (8000a5c <SystemClock_Config+0x150>)
 800093e:	f023 0301 	bic.w	r3, r3, #1
 8000942:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000944:	4b45      	ldr	r3, [pc, #276]	@ (8000a5c <SystemClock_Config+0x150>)
 8000946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	4b44      	ldr	r3, [pc, #272]	@ (8000a60 <SystemClock_Config+0x154>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	4a43      	ldr	r2, [pc, #268]	@ (8000a60 <SystemClock_Config+0x154>)
 8000954:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000958:	6193      	str	r3, [r2, #24]
 800095a:	4b41      	ldr	r3, [pc, #260]	@ (8000a60 <SystemClock_Config+0x154>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000966:	bf00      	nop
 8000968:	4b3d      	ldr	r3, [pc, #244]	@ (8000a60 <SystemClock_Config+0x154>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000970:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000974:	d1f8      	bne.n	8000968 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	4b3b      	ldr	r3, [pc, #236]	@ (8000a64 <SystemClock_Config+0x158>)
 8000978:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800097c:	4a39      	ldr	r2, [pc, #228]	@ (8000a64 <SystemClock_Config+0x158>)
 800097e:	f043 0302 	orr.w	r3, r3, #2
 8000982:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000986:	4b37      	ldr	r3, [pc, #220]	@ (8000a64 <SystemClock_Config+0x158>)
 8000988:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800098c:	f003 0302 	and.w	r3, r3, #2
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000994:	2300      	movs	r3, #0
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	4b31      	ldr	r3, [pc, #196]	@ (8000a60 <SystemClock_Config+0x154>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a30      	ldr	r2, [pc, #192]	@ (8000a60 <SystemClock_Config+0x154>)
 800099e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009a2:	6193      	str	r3, [r2, #24]
 80009a4:	4b2e      	ldr	r3, [pc, #184]	@ (8000a60 <SystemClock_Config+0x154>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	4b2b      	ldr	r3, [pc, #172]	@ (8000a5c <SystemClock_Config+0x150>)
 80009b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009b2:	4a2a      	ldr	r2, [pc, #168]	@ (8000a5c <SystemClock_Config+0x150>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009ba:	4b28      	ldr	r3, [pc, #160]	@ (8000a5c <SystemClock_Config+0x150>)
 80009bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009c6:	bf00      	nop
 80009c8:	4b25      	ldr	r3, [pc, #148]	@ (8000a60 <SystemClock_Config+0x154>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009d4:	d1f8      	bne.n	80009c8 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d6:	2301      	movs	r3, #1
 80009d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e0:	2302      	movs	r3, #2
 80009e2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e4:	2302      	movs	r3, #2
 80009e6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009e8:	2301      	movs	r3, #1
 80009ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 80009ec:	233c      	movs	r3, #60	@ 0x3c
 80009ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 80009f4:	2314      	movs	r3, #20
 80009f6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009f8:	2302      	movs	r3, #2
 80009fa:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009fc:	230c      	movs	r3, #12
 80009fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 fe5d 	bl	80016cc <HAL_RCC_OscConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000a18:	f000 f826 	bl	8000a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1c:	233f      	movs	r3, #63	@ 0x3f
 8000a1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a20:	2303      	movs	r3, #3
 8000a22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a2c:	2340      	movs	r3, #64	@ 0x40
 8000a2e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a30:	2340      	movs	r3, #64	@ 0x40
 8000a32:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a38:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a3a:	2340      	movs	r3, #64	@ 0x40
 8000a3c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a3e:	f107 030c 	add.w	r3, r7, #12
 8000a42:	2104      	movs	r1, #4
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 fa9b 	bl	8001f80 <HAL_RCC_ClockConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000a50:	f000 f80a 	bl	8000a68 <Error_Handler>
  }
}
 8000a54:	bf00      	nop
 8000a56:	3778      	adds	r7, #120	@ 0x78
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	58000400 	.word	0x58000400
 8000a60:	58024800 	.word	0x58024800
 8000a64:	58024400 	.word	0x58024400

08000a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6c:	b672      	cpsid	i
}
 8000a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <Error_Handler+0x8>

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa4 <HAL_MspInit+0x30>)
 8000a7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a80:	4a08      	ldr	r2, [pc, #32]	@ (8000aa4 <HAL_MspInit+0x30>)
 8000a82:	f043 0302 	orr.w	r3, r3, #2
 8000a86:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a8a:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <HAL_MspInit+0x30>)
 8000a8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a90:	f003 0302 	and.w	r3, r3, #2
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	58024400 	.word	0x58024400

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <NMI_Handler+0x4>

08000ab0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <MemManage_Handler+0x4>

08000ac0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <BusFault_Handler+0x4>

08000ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <UsageFault_Handler+0x4>

08000ad0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afe:	f000 faad 	bl	800105c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b10:	4a14      	ldr	r2, [pc, #80]	@ (8000b64 <_sbrk+0x5c>)
 8000b12:	4b15      	ldr	r3, [pc, #84]	@ (8000b68 <_sbrk+0x60>)
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b1c:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d102      	bne.n	8000b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b24:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <_sbrk+0x64>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	@ (8000b70 <_sbrk+0x68>)
 8000b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2a:	4b10      	ldr	r3, [pc, #64]	@ (8000b6c <_sbrk+0x64>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d207      	bcs.n	8000b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b38:	f007 fe74 	bl	8008824 <__errno>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	220c      	movs	r2, #12
 8000b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	e009      	b.n	8000b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b48:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4e:	4b07      	ldr	r3, [pc, #28]	@ (8000b6c <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	4a05      	ldr	r2, [pc, #20]	@ (8000b6c <_sbrk+0x64>)
 8000b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	24080000 	.word	0x24080000
 8000b68:	00000800 	.word	0x00000800
 8000b6c:	240008b0 	.word	0x240008b0
 8000b70:	20000000 	.word	0x20000000

08000b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b78:	4b37      	ldr	r3, [pc, #220]	@ (8000c58 <SystemInit+0xe4>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b7e:	4a36      	ldr	r2, [pc, #216]	@ (8000c58 <SystemInit+0xe4>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b88:	4b34      	ldr	r3, [pc, #208]	@ (8000c5c <SystemInit+0xe8>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f003 030f 	and.w	r3, r3, #15
 8000b90:	2b06      	cmp	r3, #6
 8000b92:	d807      	bhi.n	8000ba4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b94:	4b31      	ldr	r3, [pc, #196]	@ (8000c5c <SystemInit+0xe8>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f023 030f 	bic.w	r3, r3, #15
 8000b9c:	4a2f      	ldr	r2, [pc, #188]	@ (8000c5c <SystemInit+0xe8>)
 8000b9e:	f043 0307 	orr.w	r3, r3, #7
 8000ba2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ba4:	4b2e      	ldr	r3, [pc, #184]	@ (8000c60 <SystemInit+0xec>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a2d      	ldr	r2, [pc, #180]	@ (8000c60 <SystemInit+0xec>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8000c60 <SystemInit+0xec>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8000c60 <SystemInit+0xec>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	4929      	ldr	r1, [pc, #164]	@ (8000c60 <SystemInit+0xec>)
 8000bbc:	4b29      	ldr	r3, [pc, #164]	@ (8000c64 <SystemInit+0xf0>)
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bc2:	4b26      	ldr	r3, [pc, #152]	@ (8000c5c <SystemInit+0xe8>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f003 0308 	and.w	r3, r3, #8
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d007      	beq.n	8000bde <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bce:	4b23      	ldr	r3, [pc, #140]	@ (8000c5c <SystemInit+0xe8>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f023 030f 	bic.w	r3, r3, #15
 8000bd6:	4a21      	ldr	r2, [pc, #132]	@ (8000c5c <SystemInit+0xe8>)
 8000bd8:	f043 0307 	orr.w	r3, r3, #7
 8000bdc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000bde:	4b20      	ldr	r3, [pc, #128]	@ (8000c60 <SystemInit+0xec>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000be4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c60 <SystemInit+0xec>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000bea:	4b1d      	ldr	r3, [pc, #116]	@ (8000c60 <SystemInit+0xec>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c60 <SystemInit+0xec>)
 8000bf2:	4a1d      	ldr	r2, [pc, #116]	@ (8000c68 <SystemInit+0xf4>)
 8000bf4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c60 <SystemInit+0xec>)
 8000bf8:	4a1c      	ldr	r2, [pc, #112]	@ (8000c6c <SystemInit+0xf8>)
 8000bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bfc:	4b18      	ldr	r3, [pc, #96]	@ (8000c60 <SystemInit+0xec>)
 8000bfe:	4a1c      	ldr	r2, [pc, #112]	@ (8000c70 <SystemInit+0xfc>)
 8000c00:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c02:	4b17      	ldr	r3, [pc, #92]	@ (8000c60 <SystemInit+0xec>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c08:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <SystemInit+0xec>)
 8000c0a:	4a19      	ldr	r2, [pc, #100]	@ (8000c70 <SystemInit+0xfc>)
 8000c0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c0e:	4b14      	ldr	r3, [pc, #80]	@ (8000c60 <SystemInit+0xec>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c14:	4b12      	ldr	r3, [pc, #72]	@ (8000c60 <SystemInit+0xec>)
 8000c16:	4a16      	ldr	r2, [pc, #88]	@ (8000c70 <SystemInit+0xfc>)
 8000c18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c1a:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <SystemInit+0xec>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c20:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <SystemInit+0xec>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0e      	ldr	r2, [pc, #56]	@ (8000c60 <SystemInit+0xec>)
 8000c26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <SystemInit+0xec>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c32:	4b10      	ldr	r3, [pc, #64]	@ (8000c74 <SystemInit+0x100>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <SystemInit+0x104>)
 8000c38:	4013      	ands	r3, r2
 8000c3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c3e:	d202      	bcs.n	8000c46 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c40:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <SystemInit+0x108>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <SystemInit+0x10c>)
 8000c48:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000c4c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00
 8000c5c:	52002000 	.word	0x52002000
 8000c60:	58024400 	.word	0x58024400
 8000c64:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c68:	02020200 	.word	0x02020200
 8000c6c:	01ff0000 	.word	0x01ff0000
 8000c70:	01010280 	.word	0x01010280
 8000c74:	5c001000 	.word	0x5c001000
 8000c78:	ffff0000 	.word	0xffff0000
 8000c7c:	51008108 	.word	0x51008108
 8000c80:	52004000 	.word	0x52004000

08000c84 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc8 <MX_TIM16_Init+0x44>)
 8000c8a:	4a10      	ldr	r2, [pc, #64]	@ (8000ccc <MX_TIM16_Init+0x48>)
 8000c8c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 240 - 1;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <MX_TIM16_Init+0x44>)
 8000c90:	22ef      	movs	r2, #239	@ 0xef
 8000c92:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc8 <MX_TIM16_Init+0x44>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc8 <MX_TIM16_Init+0x44>)
 8000c9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ca0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca2:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <MX_TIM16_Init+0x44>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000ca8:	4b07      	ldr	r3, [pc, #28]	@ (8000cc8 <MX_TIM16_Init+0x44>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cae:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <MX_TIM16_Init+0x44>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000cb4:	4804      	ldr	r0, [pc, #16]	@ (8000cc8 <MX_TIM16_Init+0x44>)
 8000cb6:	f003 fb1b 	bl	80042f0 <HAL_TIM_Base_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000cc0:	f7ff fed2 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	240008b4 	.word	0x240008b4
 8000ccc:	40014400 	.word	0x40014400

08000cd0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8000d0c <HAL_TIM_Base_MspInit+0x3c>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d10e      	bne.n	8000d00 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d10 <HAL_TIM_Base_MspInit+0x40>)
 8000ce4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ce8:	4a09      	ldr	r2, [pc, #36]	@ (8000d10 <HAL_TIM_Base_MspInit+0x40>)
 8000cea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000cf2:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <HAL_TIM_Base_MspInit+0x40>)
 8000cf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000cf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000d00:	bf00      	nop
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	40014400 	.word	0x40014400
 8000d10:	58024400 	.word	0x58024400

08000d14 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d18:	4b22      	ldr	r3, [pc, #136]	@ (8000da4 <MX_USART3_UART_Init+0x90>)
 8000d1a:	4a23      	ldr	r2, [pc, #140]	@ (8000da8 <MX_USART3_UART_Init+0x94>)
 8000d1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d1e:	4b21      	ldr	r3, [pc, #132]	@ (8000da4 <MX_USART3_UART_Init+0x90>)
 8000d20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d26:	4b1f      	ldr	r3, [pc, #124]	@ (8000da4 <MX_USART3_UART_Init+0x90>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000da4 <MX_USART3_UART_Init+0x90>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d32:	4b1c      	ldr	r3, [pc, #112]	@ (8000da4 <MX_USART3_UART_Init+0x90>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d38:	4b1a      	ldr	r3, [pc, #104]	@ (8000da4 <MX_USART3_UART_Init+0x90>)
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3e:	4b19      	ldr	r3, [pc, #100]	@ (8000da4 <MX_USART3_UART_Init+0x90>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d44:	4b17      	ldr	r3, [pc, #92]	@ (8000da4 <MX_USART3_UART_Init+0x90>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d4a:	4b16      	ldr	r3, [pc, #88]	@ (8000da4 <MX_USART3_UART_Init+0x90>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d50:	4b14      	ldr	r3, [pc, #80]	@ (8000da4 <MX_USART3_UART_Init+0x90>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d56:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <MX_USART3_UART_Init+0x90>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d5c:	4811      	ldr	r0, [pc, #68]	@ (8000da4 <MX_USART3_UART_Init+0x90>)
 8000d5e:	f003 fbc5 	bl	80044ec <HAL_UART_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d68:	f7ff fe7e 	bl	8000a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	480d      	ldr	r0, [pc, #52]	@ (8000da4 <MX_USART3_UART_Init+0x90>)
 8000d70:	f004 fc5b 	bl	800562a <HAL_UARTEx_SetTxFifoThreshold>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d7a:	f7ff fe75 	bl	8000a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4808      	ldr	r0, [pc, #32]	@ (8000da4 <MX_USART3_UART_Init+0x90>)
 8000d82:	f004 fc90 	bl	80056a6 <HAL_UARTEx_SetRxFifoThreshold>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d8c:	f7ff fe6c 	bl	8000a68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d90:	4804      	ldr	r0, [pc, #16]	@ (8000da4 <MX_USART3_UART_Init+0x90>)
 8000d92:	f004 fc11 	bl	80055b8 <HAL_UARTEx_DisableFifoMode>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d9c:	f7ff fe64 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	24000900 	.word	0x24000900
 8000da8:	40004800 	.word	0x40004800

08000dac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b0ba      	sub	sp, #232	@ 0xe8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	22c0      	movs	r2, #192	@ 0xc0
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f007 fc89 	bl	80086e4 <memset>
  if(uartHandle->Instance==USART3)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a27      	ldr	r2, [pc, #156]	@ (8000e74 <HAL_UART_MspInit+0xc8>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d146      	bne.n	8000e6a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ddc:	f04f 0202 	mov.w	r2, #2
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dee:	f107 0310 	add.w	r3, r7, #16
 8000df2:	4618      	mov	r0, r3
 8000df4:	f001 fc50 	bl	8002698 <HAL_RCCEx_PeriphCLKConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000dfe:	f7ff fe33 	bl	8000a68 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e02:	4b1d      	ldr	r3, [pc, #116]	@ (8000e78 <HAL_UART_MspInit+0xcc>)
 8000e04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e08:	4a1b      	ldr	r2, [pc, #108]	@ (8000e78 <HAL_UART_MspInit+0xcc>)
 8000e0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e0e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e12:	4b19      	ldr	r3, [pc, #100]	@ (8000e78 <HAL_UART_MspInit+0xcc>)
 8000e14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e20:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <HAL_UART_MspInit+0xcc>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e26:	4a14      	ldr	r2, [pc, #80]	@ (8000e78 <HAL_UART_MspInit+0xcc>)
 8000e28:	f043 0308 	orr.w	r3, r3, #8
 8000e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e30:	4b11      	ldr	r3, [pc, #68]	@ (8000e78 <HAL_UART_MspInit+0xcc>)
 8000e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e36:	f003 0308 	and.w	r3, r3, #8
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e58:	2307      	movs	r3, #7
 8000e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e5e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e62:	4619      	mov	r1, r3
 8000e64:	4805      	ldr	r0, [pc, #20]	@ (8000e7c <HAL_UART_MspInit+0xd0>)
 8000e66:	f000 fa2d 	bl	80012c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	37e8      	adds	r7, #232	@ 0xe8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40004800 	.word	0x40004800
 8000e78:	58024400 	.word	0x58024400
 8000e7c:	58020c00 	.word	0x58020c00

08000e80 <printToUART>:
  /* USER CODE END USART3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void printToUART(const uint8_t* pData, uint16_t msgSize) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	807b      	strh	r3, [r7, #2]
    HAL_UART_Transmit(&huart3, pData, msgSize, 100);
 8000e8c:	887a      	ldrh	r2, [r7, #2]
 8000e8e:	2364      	movs	r3, #100	@ 0x64
 8000e90:	6879      	ldr	r1, [r7, #4]
 8000e92:	4803      	ldr	r0, [pc, #12]	@ (8000ea0 <printToUART+0x20>)
 8000e94:	f003 fb7a 	bl	800458c <HAL_UART_Transmit>
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	24000900 	.word	0x24000900

08000ea4 <printToConsole>:
/**
 * @brief handler for print to console
 *
 * @param charMsg message to be print
 */
void printToConsole(char charMsg[]) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b09c      	sub	sp, #112	@ 0x70
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
    char tempMsg[50] = {'\0'};
 8000eac:	2300      	movs	r3, #0
 8000eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000eb0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000eb4:	222e      	movs	r2, #46	@ 0x2e
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f007 fc13 	bl	80086e4 <memset>
    strcat(tempMsg, charMsg);
 8000ebe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f007 fc15 	bl	80086f4 <strcat>
    strcat(tempMsg, "\r\n");
 8000eca:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fa56 	bl	8000380 <strlen>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000edc:	4413      	add	r3, r2
 8000ede:	4a10      	ldr	r2, [pc, #64]	@ (8000f20 <printToConsole+0x7c>)
 8000ee0:	8811      	ldrh	r1, [r2, #0]
 8000ee2:	7892      	ldrb	r2, [r2, #2]
 8000ee4:	8019      	strh	r1, [r3, #0]
 8000ee6:	709a      	strb	r2, [r3, #2]
    uint8_t outMsg[50] = {'\0'};
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	222e      	movs	r2, #46	@ 0x2e
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f007 fbf5 	bl	80086e4 <memset>
    snprintf((uint8_t*)outMsg, sizeof(outMsg), tempMsg);
 8000efa:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8000efe:	f107 0308 	add.w	r3, r7, #8
 8000f02:	2132      	movs	r1, #50	@ 0x32
 8000f04:	4618      	mov	r0, r3
 8000f06:	f007 fae1 	bl	80084cc <sniprintf>
    printToUART((uint8_t*)outMsg, sizeof(outMsg));
 8000f0a:	f107 0308 	add.w	r3, r7, #8
 8000f0e:	2132      	movs	r1, #50	@ 0x32
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ffb5 	bl	8000e80 <printToUART>
}
 8000f16:	bf00      	nop
 8000f18:	3770      	adds	r7, #112	@ 0x70
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	0800a5e4 	.word	0x0800a5e4

08000f24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f28:	f7ff fe24 	bl	8000b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f2c:	480c      	ldr	r0, [pc, #48]	@ (8000f60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f2e:	490d      	ldr	r1, [pc, #52]	@ (8000f64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f30:	4a0d      	ldr	r2, [pc, #52]	@ (8000f68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f34:	e002      	b.n	8000f3c <LoopCopyDataInit>

08000f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3a:	3304      	adds	r3, #4

08000f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f40:	d3f9      	bcc.n	8000f36 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f42:	4a0a      	ldr	r2, [pc, #40]	@ (8000f6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f44:	4c0a      	ldr	r4, [pc, #40]	@ (8000f70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f48:	e001      	b.n	8000f4e <LoopFillZerobss>

08000f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f4c:	3204      	adds	r2, #4

08000f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f50:	d3fb      	bcc.n	8000f4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f52:	f007 fc6d 	bl	8008830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f56:	f7ff fc1b 	bl	8000790 <main>
  bx  lr
 8000f5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f5c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f60:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f64:	24000864 	.word	0x24000864
  ldr r2, =_sidata
 8000f68:	0800b0c4 	.word	0x0800b0c4
  ldr r2, =_sbss
 8000f6c:	24000880 	.word	0x24000880
  ldr r4, =_ebss
 8000f70:	24000c04 	.word	0x24000c04

08000f74 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC3_IRQHandler>
	...

08000f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7e:	2003      	movs	r0, #3
 8000f80:	f000 f96e 	bl	8001260 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f84:	f001 f9b2 	bl	80022ec <HAL_RCC_GetSysClockFreq>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <HAL_Init+0x68>)
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	0a1b      	lsrs	r3, r3, #8
 8000f90:	f003 030f 	and.w	r3, r3, #15
 8000f94:	4913      	ldr	r1, [pc, #76]	@ (8000fe4 <HAL_Init+0x6c>)
 8000f96:	5ccb      	ldrb	r3, [r1, r3]
 8000f98:	f003 031f 	and.w	r3, r3, #31
 8000f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <HAL_Init+0x68>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe4 <HAL_Init+0x6c>)
 8000fac:	5cd3      	ldrb	r3, [r2, r3]
 8000fae:	f003 031f 	and.w	r3, r3, #31
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb8:	4a0b      	ldr	r2, [pc, #44]	@ (8000fe8 <HAL_Init+0x70>)
 8000fba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fbc:	4a0b      	ldr	r2, [pc, #44]	@ (8000fec <HAL_Init+0x74>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fc2:	200f      	movs	r0, #15
 8000fc4:	f000 f814 	bl	8000ff0 <HAL_InitTick>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e002      	b.n	8000fd8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd2:	f7ff fd4f 	bl	8000a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	58024400 	.word	0x58024400
 8000fe4:	0800a770 	.word	0x0800a770
 8000fe8:	24000004 	.word	0x24000004
 8000fec:	24000000 	.word	0x24000000

08000ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ff8:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <HAL_InitTick+0x60>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d101      	bne.n	8001004 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e021      	b.n	8001048 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001004:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <HAL_InitTick+0x64>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b11      	ldr	r3, [pc, #68]	@ (8001050 <HAL_InitTick+0x60>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	4619      	mov	r1, r3
 800100e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001012:	fbb3 f3f1 	udiv	r3, r3, r1
 8001016:	fbb2 f3f3 	udiv	r3, r2, r3
 800101a:	4618      	mov	r0, r3
 800101c:	f000 f945 	bl	80012aa <HAL_SYSTICK_Config>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e00e      	b.n	8001048 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b0f      	cmp	r3, #15
 800102e:	d80a      	bhi.n	8001046 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001030:	2200      	movs	r2, #0
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	f04f 30ff 	mov.w	r0, #4294967295
 8001038:	f000 f91d 	bl	8001276 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800103c:	4a06      	ldr	r2, [pc, #24]	@ (8001058 <HAL_InitTick+0x68>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001042:	2300      	movs	r3, #0
 8001044:	e000      	b.n	8001048 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	2400000c 	.word	0x2400000c
 8001054:	24000000 	.word	0x24000000
 8001058:	24000008 	.word	0x24000008

0800105c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001060:	4b06      	ldr	r3, [pc, #24]	@ (800107c <HAL_IncTick+0x20>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <HAL_IncTick+0x24>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4413      	add	r3, r2
 800106c:	4a04      	ldr	r2, [pc, #16]	@ (8001080 <HAL_IncTick+0x24>)
 800106e:	6013      	str	r3, [r2, #0]
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	2400000c 	.word	0x2400000c
 8001080:	24000994 	.word	0x24000994

08001084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return uwTick;
 8001088:	4b03      	ldr	r3, [pc, #12]	@ (8001098 <HAL_GetTick+0x14>)
 800108a:	681b      	ldr	r3, [r3, #0]
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	24000994 	.word	0x24000994

0800109c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a4:	f7ff ffee 	bl	8001084 <HAL_GetTick>
 80010a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b4:	d005      	beq.n	80010c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010b6:	4b0a      	ldr	r3, [pc, #40]	@ (80010e0 <HAL_Delay+0x44>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	461a      	mov	r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4413      	add	r3, r2
 80010c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010c2:	bf00      	nop
 80010c4:	f7ff ffde 	bl	8001084 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d8f7      	bhi.n	80010c4 <HAL_Delay+0x28>
  {
  }
}
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	2400000c 	.word	0x2400000c

080010e4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010e8:	4b03      	ldr	r3, [pc, #12]	@ (80010f8 <HAL_GetREVID+0x14>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	0c1b      	lsrs	r3, r3, #16
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	5c001000 	.word	0x5c001000

080010fc <__NVIC_SetPriorityGrouping>:
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800110c:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <__NVIC_SetPriorityGrouping+0x40>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001118:	4013      	ands	r3, r2
 800111a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <__NVIC_SetPriorityGrouping+0x44>)
 8001126:	4313      	orrs	r3, r2
 8001128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800112a:	4a04      	ldr	r2, [pc, #16]	@ (800113c <__NVIC_SetPriorityGrouping+0x40>)
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	60d3      	str	r3, [r2, #12]
}
 8001130:	bf00      	nop
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00
 8001140:	05fa0000 	.word	0x05fa0000

08001144 <__NVIC_GetPriorityGrouping>:
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001148:	4b04      	ldr	r3, [pc, #16]	@ (800115c <__NVIC_GetPriorityGrouping+0x18>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	0a1b      	lsrs	r3, r3, #8
 800114e:	f003 0307 	and.w	r3, r3, #7
}
 8001152:	4618      	mov	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_SetPriority>:
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	@ (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	@ (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	88fb      	ldrh	r3, [r7, #6]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	@ 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	@ 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800122c:	d301      	bcc.n	8001232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122e:	2301      	movs	r3, #1
 8001230:	e00f      	b.n	8001252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001232:	4a0a      	ldr	r2, [pc, #40]	@ (800125c <SysTick_Config+0x40>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123a:	210f      	movs	r1, #15
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f7ff ff8e 	bl	8001160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001244:	4b05      	ldr	r3, [pc, #20]	@ (800125c <SysTick_Config+0x40>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124a:	4b04      	ldr	r3, [pc, #16]	@ (800125c <SysTick_Config+0x40>)
 800124c:	2207      	movs	r2, #7
 800124e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	e000e010 	.word	0xe000e010

08001260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff47 	bl	80010fc <__NVIC_SetPriorityGrouping>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001284:	f7ff ff5e 	bl	8001144 <__NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff90 	bl	80011b4 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5f 	bl	8001160 <__NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ffb2 	bl	800121c <SysTick_Config>
 80012b8:	4603      	mov	r3, r0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b089      	sub	sp, #36	@ 0x24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80012d2:	4b89      	ldr	r3, [pc, #548]	@ (80014f8 <HAL_GPIO_Init+0x234>)
 80012d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012d6:	e194      	b.n	8001602 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	2101      	movs	r1, #1
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	fa01 f303 	lsl.w	r3, r1, r3
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 8186 	beq.w	80015fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d005      	beq.n	8001308 <HAL_GPIO_Init+0x44>
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d130      	bne.n	800136a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	2203      	movs	r2, #3
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	68da      	ldr	r2, [r3, #12]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800133e:	2201      	movs	r2, #1
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	091b      	lsrs	r3, r3, #4
 8001354:	f003 0201 	and.w	r2, r3, #1
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	2b03      	cmp	r3, #3
 8001374:	d017      	beq.n	80013a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	2203      	movs	r2, #3
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	689a      	ldr	r2, [r3, #8]
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 0303 	and.w	r3, r3, #3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d123      	bne.n	80013fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	08da      	lsrs	r2, r3, #3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3208      	adds	r2, #8
 80013ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	220f      	movs	r2, #15
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4013      	ands	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	691a      	ldr	r2, [r3, #16]
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	f003 0307 	and.w	r3, r3, #7
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	08da      	lsrs	r2, r3, #3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3208      	adds	r2, #8
 80013f4:	69b9      	ldr	r1, [r7, #24]
 80013f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	2203      	movs	r2, #3
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 0203 	and.w	r2, r3, #3
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001436:	2b00      	cmp	r3, #0
 8001438:	f000 80e0 	beq.w	80015fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143c:	4b2f      	ldr	r3, [pc, #188]	@ (80014fc <HAL_GPIO_Init+0x238>)
 800143e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001442:	4a2e      	ldr	r2, [pc, #184]	@ (80014fc <HAL_GPIO_Init+0x238>)
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800144c:	4b2b      	ldr	r3, [pc, #172]	@ (80014fc <HAL_GPIO_Init+0x238>)
 800144e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800145a:	4a29      	ldr	r2, [pc, #164]	@ (8001500 <HAL_GPIO_Init+0x23c>)
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	089b      	lsrs	r3, r3, #2
 8001460:	3302      	adds	r3, #2
 8001462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	220f      	movs	r2, #15
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a20      	ldr	r2, [pc, #128]	@ (8001504 <HAL_GPIO_Init+0x240>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d052      	beq.n	800152c <HAL_GPIO_Init+0x268>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a1f      	ldr	r2, [pc, #124]	@ (8001508 <HAL_GPIO_Init+0x244>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d031      	beq.n	80014f2 <HAL_GPIO_Init+0x22e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a1e      	ldr	r2, [pc, #120]	@ (800150c <HAL_GPIO_Init+0x248>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d02b      	beq.n	80014ee <HAL_GPIO_Init+0x22a>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a1d      	ldr	r2, [pc, #116]	@ (8001510 <HAL_GPIO_Init+0x24c>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d025      	beq.n	80014ea <HAL_GPIO_Init+0x226>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001514 <HAL_GPIO_Init+0x250>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d01f      	beq.n	80014e6 <HAL_GPIO_Init+0x222>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001518 <HAL_GPIO_Init+0x254>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d019      	beq.n	80014e2 <HAL_GPIO_Init+0x21e>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a1a      	ldr	r2, [pc, #104]	@ (800151c <HAL_GPIO_Init+0x258>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d013      	beq.n	80014de <HAL_GPIO_Init+0x21a>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a19      	ldr	r2, [pc, #100]	@ (8001520 <HAL_GPIO_Init+0x25c>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d00d      	beq.n	80014da <HAL_GPIO_Init+0x216>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a18      	ldr	r2, [pc, #96]	@ (8001524 <HAL_GPIO_Init+0x260>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d007      	beq.n	80014d6 <HAL_GPIO_Init+0x212>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a17      	ldr	r2, [pc, #92]	@ (8001528 <HAL_GPIO_Init+0x264>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d101      	bne.n	80014d2 <HAL_GPIO_Init+0x20e>
 80014ce:	2309      	movs	r3, #9
 80014d0:	e02d      	b.n	800152e <HAL_GPIO_Init+0x26a>
 80014d2:	230a      	movs	r3, #10
 80014d4:	e02b      	b.n	800152e <HAL_GPIO_Init+0x26a>
 80014d6:	2308      	movs	r3, #8
 80014d8:	e029      	b.n	800152e <HAL_GPIO_Init+0x26a>
 80014da:	2307      	movs	r3, #7
 80014dc:	e027      	b.n	800152e <HAL_GPIO_Init+0x26a>
 80014de:	2306      	movs	r3, #6
 80014e0:	e025      	b.n	800152e <HAL_GPIO_Init+0x26a>
 80014e2:	2305      	movs	r3, #5
 80014e4:	e023      	b.n	800152e <HAL_GPIO_Init+0x26a>
 80014e6:	2304      	movs	r3, #4
 80014e8:	e021      	b.n	800152e <HAL_GPIO_Init+0x26a>
 80014ea:	2303      	movs	r3, #3
 80014ec:	e01f      	b.n	800152e <HAL_GPIO_Init+0x26a>
 80014ee:	2302      	movs	r3, #2
 80014f0:	e01d      	b.n	800152e <HAL_GPIO_Init+0x26a>
 80014f2:	2301      	movs	r3, #1
 80014f4:	e01b      	b.n	800152e <HAL_GPIO_Init+0x26a>
 80014f6:	bf00      	nop
 80014f8:	58000080 	.word	0x58000080
 80014fc:	58024400 	.word	0x58024400
 8001500:	58000400 	.word	0x58000400
 8001504:	58020000 	.word	0x58020000
 8001508:	58020400 	.word	0x58020400
 800150c:	58020800 	.word	0x58020800
 8001510:	58020c00 	.word	0x58020c00
 8001514:	58021000 	.word	0x58021000
 8001518:	58021400 	.word	0x58021400
 800151c:	58021800 	.word	0x58021800
 8001520:	58021c00 	.word	0x58021c00
 8001524:	58022000 	.word	0x58022000
 8001528:	58022400 	.word	0x58022400
 800152c:	2300      	movs	r3, #0
 800152e:	69fa      	ldr	r2, [r7, #28]
 8001530:	f002 0203 	and.w	r2, r2, #3
 8001534:	0092      	lsls	r2, r2, #2
 8001536:	4093      	lsls	r3, r2
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800153e:	4938      	ldr	r1, [pc, #224]	@ (8001620 <HAL_GPIO_Init+0x35c>)
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	089b      	lsrs	r3, r3, #2
 8001544:	3302      	adds	r3, #2
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800154c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4313      	orrs	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001572:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800157a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80015a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	3301      	adds	r3, #1
 8001600:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	fa22 f303 	lsr.w	r3, r2, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	f47f ae63 	bne.w	80012d8 <HAL_GPIO_Init+0x14>
  }
}
 8001612:	bf00      	nop
 8001614:	bf00      	nop
 8001616:	3724      	adds	r7, #36	@ 0x24
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	58000400 	.word	0x58000400

08001624 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	807b      	strh	r3, [r7, #2]
 8001630:	4613      	mov	r3, r2
 8001632:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001634:	787b      	ldrb	r3, [r7, #1]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800163a:	887a      	ldrh	r2, [r7, #2]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001640:	e003      	b.n	800164a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001642:	887b      	ldrh	r3, [r7, #2]
 8001644:	041a      	lsls	r2, r3, #16
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	619a      	str	r2, [r3, #24]
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001660:	4b19      	ldr	r3, [pc, #100]	@ (80016c8 <HAL_PWREx_ConfigSupply+0x70>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b04      	cmp	r3, #4
 800166a:	d00a      	beq.n	8001682 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800166c:	4b16      	ldr	r3, [pc, #88]	@ (80016c8 <HAL_PWREx_ConfigSupply+0x70>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	429a      	cmp	r2, r3
 8001678:	d001      	beq.n	800167e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e01f      	b.n	80016be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	e01d      	b.n	80016be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001682:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <HAL_PWREx_ConfigSupply+0x70>)
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	f023 0207 	bic.w	r2, r3, #7
 800168a:	490f      	ldr	r1, [pc, #60]	@ (80016c8 <HAL_PWREx_ConfigSupply+0x70>)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4313      	orrs	r3, r2
 8001690:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001692:	f7ff fcf7 	bl	8001084 <HAL_GetTick>
 8001696:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001698:	e009      	b.n	80016ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800169a:	f7ff fcf3 	bl	8001084 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016a8:	d901      	bls.n	80016ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e007      	b.n	80016be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80016ae:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <HAL_PWREx_ConfigSupply+0x70>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80016ba:	d1ee      	bne.n	800169a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	58024800 	.word	0x58024800

080016cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08c      	sub	sp, #48	@ 0x30
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d102      	bne.n	80016e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	f000 bc48 	b.w	8001f70 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 8088 	beq.w	80017fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ee:	4b99      	ldr	r3, [pc, #612]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80016f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016f8:	4b96      	ldr	r3, [pc, #600]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 80016fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80016fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001700:	2b10      	cmp	r3, #16
 8001702:	d007      	beq.n	8001714 <HAL_RCC_OscConfig+0x48>
 8001704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001706:	2b18      	cmp	r3, #24
 8001708:	d111      	bne.n	800172e <HAL_RCC_OscConfig+0x62>
 800170a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d10c      	bne.n	800172e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001714:	4b8f      	ldr	r3, [pc, #572]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d06d      	beq.n	80017fc <HAL_RCC_OscConfig+0x130>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d169      	bne.n	80017fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	f000 bc21 	b.w	8001f70 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001736:	d106      	bne.n	8001746 <HAL_RCC_OscConfig+0x7a>
 8001738:	4b86      	ldr	r3, [pc, #536]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a85      	ldr	r2, [pc, #532]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 800173e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	e02e      	b.n	80017a4 <HAL_RCC_OscConfig+0xd8>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10c      	bne.n	8001768 <HAL_RCC_OscConfig+0x9c>
 800174e:	4b81      	ldr	r3, [pc, #516]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a80      	ldr	r2, [pc, #512]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 8001754:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	4b7e      	ldr	r3, [pc, #504]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a7d      	ldr	r2, [pc, #500]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 8001760:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	e01d      	b.n	80017a4 <HAL_RCC_OscConfig+0xd8>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001770:	d10c      	bne.n	800178c <HAL_RCC_OscConfig+0xc0>
 8001772:	4b78      	ldr	r3, [pc, #480]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a77      	ldr	r2, [pc, #476]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 8001778:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	4b75      	ldr	r3, [pc, #468]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a74      	ldr	r2, [pc, #464]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 8001784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e00b      	b.n	80017a4 <HAL_RCC_OscConfig+0xd8>
 800178c:	4b71      	ldr	r3, [pc, #452]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a70      	ldr	r2, [pc, #448]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 8001792:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b6e      	ldr	r3, [pc, #440]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a6d      	ldr	r2, [pc, #436]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 800179e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d013      	beq.n	80017d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ac:	f7ff fc6a 	bl	8001084 <HAL_GetTick>
 80017b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b4:	f7ff fc66 	bl	8001084 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b64      	cmp	r3, #100	@ 0x64
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e3d4      	b.n	8001f70 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017c6:	4b63      	ldr	r3, [pc, #396]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0xe8>
 80017d2:	e014      	b.n	80017fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d4:	f7ff fc56 	bl	8001084 <HAL_GetTick>
 80017d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017dc:	f7ff fc52 	bl	8001084 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b64      	cmp	r3, #100	@ 0x64
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e3c0      	b.n	8001f70 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017ee:	4b59      	ldr	r3, [pc, #356]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x110>
 80017fa:	e000      	b.n	80017fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 80ca 	beq.w	80019a0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800180c:	4b51      	ldr	r3, [pc, #324]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001814:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001816:	4b4f      	ldr	r3, [pc, #316]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 8001818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800181a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d007      	beq.n	8001832 <HAL_RCC_OscConfig+0x166>
 8001822:	6a3b      	ldr	r3, [r7, #32]
 8001824:	2b18      	cmp	r3, #24
 8001826:	d156      	bne.n	80018d6 <HAL_RCC_OscConfig+0x20a>
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d151      	bne.n	80018d6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001832:	4b48      	ldr	r3, [pc, #288]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	2b00      	cmp	r3, #0
 800183c:	d005      	beq.n	800184a <HAL_RCC_OscConfig+0x17e>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e392      	b.n	8001f70 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800184a:	4b42      	ldr	r3, [pc, #264]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f023 0219 	bic.w	r2, r3, #25
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	493f      	ldr	r1, [pc, #252]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 8001858:	4313      	orrs	r3, r2
 800185a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185c:	f7ff fc12 	bl	8001084 <HAL_GetTick>
 8001860:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001864:	f7ff fc0e 	bl	8001084 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e37c      	b.n	8001f70 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001876:	4b37      	ldr	r3, [pc, #220]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0304 	and.w	r3, r3, #4
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001882:	f7ff fc2f 	bl	80010e4 <HAL_GetREVID>
 8001886:	4603      	mov	r3, r0
 8001888:	f241 0203 	movw	r2, #4099	@ 0x1003
 800188c:	4293      	cmp	r3, r2
 800188e:	d817      	bhi.n	80018c0 <HAL_RCC_OscConfig+0x1f4>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	2b40      	cmp	r3, #64	@ 0x40
 8001896:	d108      	bne.n	80018aa <HAL_RCC_OscConfig+0x1de>
 8001898:	4b2e      	ldr	r3, [pc, #184]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80018a0:	4a2c      	ldr	r2, [pc, #176]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 80018a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018a6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018a8:	e07a      	b.n	80019a0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	031b      	lsls	r3, r3, #12
 80018b8:	4926      	ldr	r1, [pc, #152]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018be:	e06f      	b.n	80019a0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c0:	4b24      	ldr	r3, [pc, #144]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	061b      	lsls	r3, r3, #24
 80018ce:	4921      	ldr	r1, [pc, #132]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018d4:	e064      	b.n	80019a0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d047      	beq.n	800196e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80018de:	4b1d      	ldr	r3, [pc, #116]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f023 0219 	bic.w	r2, r3, #25
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	491a      	ldr	r1, [pc, #104]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f0:	f7ff fbc8 	bl	8001084 <HAL_GetTick>
 80018f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f8:	f7ff fbc4 	bl	8001084 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e332      	b.n	8001f70 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800190a:	4b12      	ldr	r3, [pc, #72]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0f0      	beq.n	80018f8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001916:	f7ff fbe5 	bl	80010e4 <HAL_GetREVID>
 800191a:	4603      	mov	r3, r0
 800191c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001920:	4293      	cmp	r3, r2
 8001922:	d819      	bhi.n	8001958 <HAL_RCC_OscConfig+0x28c>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	2b40      	cmp	r3, #64	@ 0x40
 800192a:	d108      	bne.n	800193e <HAL_RCC_OscConfig+0x272>
 800192c:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001934:	4a07      	ldr	r2, [pc, #28]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 8001936:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800193a:	6053      	str	r3, [r2, #4]
 800193c:	e030      	b.n	80019a0 <HAL_RCC_OscConfig+0x2d4>
 800193e:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	031b      	lsls	r3, r3, #12
 800194c:	4901      	ldr	r1, [pc, #4]	@ (8001954 <HAL_RCC_OscConfig+0x288>)
 800194e:	4313      	orrs	r3, r2
 8001950:	604b      	str	r3, [r1, #4]
 8001952:	e025      	b.n	80019a0 <HAL_RCC_OscConfig+0x2d4>
 8001954:	58024400 	.word	0x58024400
 8001958:	4b9a      	ldr	r3, [pc, #616]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	061b      	lsls	r3, r3, #24
 8001966:	4997      	ldr	r1, [pc, #604]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001968:	4313      	orrs	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
 800196c:	e018      	b.n	80019a0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800196e:	4b95      	ldr	r3, [pc, #596]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a94      	ldr	r2, [pc, #592]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001974:	f023 0301 	bic.w	r3, r3, #1
 8001978:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197a:	f7ff fb83 	bl	8001084 <HAL_GetTick>
 800197e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001982:	f7ff fb7f 	bl	8001084 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e2ed      	b.n	8001f70 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001994:	4b8b      	ldr	r3, [pc, #556]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1f0      	bne.n	8001982 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0310 	and.w	r3, r3, #16
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 80a9 	beq.w	8001b00 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ae:	4b85      	ldr	r3, [pc, #532]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80019b6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019b8:	4b82      	ldr	r3, [pc, #520]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 80019ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019bc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d007      	beq.n	80019d4 <HAL_RCC_OscConfig+0x308>
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	2b18      	cmp	r3, #24
 80019c8:	d13a      	bne.n	8001a40 <HAL_RCC_OscConfig+0x374>
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d135      	bne.n	8001a40 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019d4:	4b7b      	ldr	r3, [pc, #492]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d005      	beq.n	80019ec <HAL_RCC_OscConfig+0x320>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	2b80      	cmp	r3, #128	@ 0x80
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e2c1      	b.n	8001f70 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019ec:	f7ff fb7a 	bl	80010e4 <HAL_GetREVID>
 80019f0:	4603      	mov	r3, r0
 80019f2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d817      	bhi.n	8001a2a <HAL_RCC_OscConfig+0x35e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	2b20      	cmp	r3, #32
 8001a00:	d108      	bne.n	8001a14 <HAL_RCC_OscConfig+0x348>
 8001a02:	4b70      	ldr	r3, [pc, #448]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001a0a:	4a6e      	ldr	r2, [pc, #440]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001a0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001a10:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a12:	e075      	b.n	8001b00 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a14:	4b6b      	ldr	r3, [pc, #428]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	069b      	lsls	r3, r3, #26
 8001a22:	4968      	ldr	r1, [pc, #416]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a28:	e06a      	b.n	8001b00 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a2a:	4b66      	ldr	r3, [pc, #408]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	061b      	lsls	r3, r3, #24
 8001a38:	4962      	ldr	r1, [pc, #392]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a3e:	e05f      	b.n	8001b00 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d042      	beq.n	8001ace <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a48:	4b5e      	ldr	r3, [pc, #376]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a5d      	ldr	r2, [pc, #372]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a54:	f7ff fb16 	bl	8001084 <HAL_GetTick>
 8001a58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001a5c:	f7ff fb12 	bl	8001084 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e280      	b.n	8001f70 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a6e:	4b55      	ldr	r3, [pc, #340]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0f0      	beq.n	8001a5c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a7a:	f7ff fb33 	bl	80010e4 <HAL_GetREVID>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d817      	bhi.n	8001ab8 <HAL_RCC_OscConfig+0x3ec>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	2b20      	cmp	r3, #32
 8001a8e:	d108      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x3d6>
 8001a90:	4b4c      	ldr	r3, [pc, #304]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001a98:	4a4a      	ldr	r2, [pc, #296]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001a9a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001a9e:	6053      	str	r3, [r2, #4]
 8001aa0:	e02e      	b.n	8001b00 <HAL_RCC_OscConfig+0x434>
 8001aa2:	4b48      	ldr	r3, [pc, #288]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	069b      	lsls	r3, r3, #26
 8001ab0:	4944      	ldr	r1, [pc, #272]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	604b      	str	r3, [r1, #4]
 8001ab6:	e023      	b.n	8001b00 <HAL_RCC_OscConfig+0x434>
 8001ab8:	4b42      	ldr	r3, [pc, #264]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	061b      	lsls	r3, r3, #24
 8001ac6:	493f      	ldr	r1, [pc, #252]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	60cb      	str	r3, [r1, #12]
 8001acc:	e018      	b.n	8001b00 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001ace:	4b3d      	ldr	r3, [pc, #244]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a3c      	ldr	r2, [pc, #240]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001ad4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ada:	f7ff fad3 	bl	8001084 <HAL_GetTick>
 8001ade:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001ae2:	f7ff facf 	bl	8001084 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e23d      	b.n	8001f70 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001af4:	4b33      	ldr	r3, [pc, #204]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f0      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d036      	beq.n	8001b7a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d019      	beq.n	8001b48 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b14:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001b16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b18:	4a2a      	ldr	r2, [pc, #168]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b20:	f7ff fab0 	bl	8001084 <HAL_GetTick>
 8001b24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b28:	f7ff faac 	bl	8001084 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e21a      	b.n	8001f70 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b3a:	4b22      	ldr	r3, [pc, #136]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001b3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCC_OscConfig+0x45c>
 8001b46:	e018      	b.n	8001b7a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b48:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001b4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001b4e:	f023 0301 	bic.w	r3, r3, #1
 8001b52:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b54:	f7ff fa96 	bl	8001084 <HAL_GetTick>
 8001b58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b5c:	f7ff fa92 	bl	8001084 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e200      	b.n	8001f70 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b6e:	4b15      	ldr	r3, [pc, #84]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001b70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f0      	bne.n	8001b5c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0320 	and.w	r3, r3, #32
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d039      	beq.n	8001bfa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d01c      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a0c      	ldr	r2, [pc, #48]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001b94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b98:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b9a:	f7ff fa73 	bl	8001084 <HAL_GetTick>
 8001b9e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ba2:	f7ff fa6f 	bl	8001084 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e1dd      	b.n	8001f70 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bb4:	4b03      	ldr	r3, [pc, #12]	@ (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0f0      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x4d6>
 8001bc0:	e01b      	b.n	8001bfa <HAL_RCC_OscConfig+0x52e>
 8001bc2:	bf00      	nop
 8001bc4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bc8:	4b9b      	ldr	r3, [pc, #620]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a9a      	ldr	r2, [pc, #616]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001bce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001bd2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001bd4:	f7ff fa56 	bl	8001084 <HAL_GetTick>
 8001bd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bdc:	f7ff fa52 	bl	8001084 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e1c0      	b.n	8001f70 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bee:	4b92      	ldr	r3, [pc, #584]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f0      	bne.n	8001bdc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 8081 	beq.w	8001d0a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c08:	4b8c      	ldr	r3, [pc, #560]	@ (8001e3c <HAL_RCC_OscConfig+0x770>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a8b      	ldr	r2, [pc, #556]	@ (8001e3c <HAL_RCC_OscConfig+0x770>)
 8001c0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c14:	f7ff fa36 	bl	8001084 <HAL_GetTick>
 8001c18:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c1c:	f7ff fa32 	bl	8001084 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b64      	cmp	r3, #100	@ 0x64
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e1a0      	b.n	8001f70 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c2e:	4b83      	ldr	r3, [pc, #524]	@ (8001e3c <HAL_RCC_OscConfig+0x770>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d106      	bne.n	8001c50 <HAL_RCC_OscConfig+0x584>
 8001c42:	4b7d      	ldr	r3, [pc, #500]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c46:	4a7c      	ldr	r2, [pc, #496]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c4e:	e02d      	b.n	8001cac <HAL_RCC_OscConfig+0x5e0>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d10c      	bne.n	8001c72 <HAL_RCC_OscConfig+0x5a6>
 8001c58:	4b77      	ldr	r3, [pc, #476]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001c5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c5c:	4a76      	ldr	r2, [pc, #472]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001c5e:	f023 0301 	bic.w	r3, r3, #1
 8001c62:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c64:	4b74      	ldr	r3, [pc, #464]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c68:	4a73      	ldr	r2, [pc, #460]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001c6a:	f023 0304 	bic.w	r3, r3, #4
 8001c6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c70:	e01c      	b.n	8001cac <HAL_RCC_OscConfig+0x5e0>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b05      	cmp	r3, #5
 8001c78:	d10c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x5c8>
 8001c7a:	4b6f      	ldr	r3, [pc, #444]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c7e:	4a6e      	ldr	r2, [pc, #440]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c86:	4b6c      	ldr	r3, [pc, #432]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c8a:	4a6b      	ldr	r2, [pc, #428]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c92:	e00b      	b.n	8001cac <HAL_RCC_OscConfig+0x5e0>
 8001c94:	4b68      	ldr	r3, [pc, #416]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c98:	4a67      	ldr	r2, [pc, #412]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001c9a:	f023 0301 	bic.w	r3, r3, #1
 8001c9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ca0:	4b65      	ldr	r3, [pc, #404]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca4:	4a64      	ldr	r2, [pc, #400]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001ca6:	f023 0304 	bic.w	r3, r3, #4
 8001caa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d015      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb4:	f7ff f9e6 	bl	8001084 <HAL_GetTick>
 8001cb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cba:	e00a      	b.n	8001cd2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cbc:	f7ff f9e2 	bl	8001084 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e14e      	b.n	8001f70 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cd2:	4b59      	ldr	r3, [pc, #356]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0ee      	beq.n	8001cbc <HAL_RCC_OscConfig+0x5f0>
 8001cde:	e014      	b.n	8001d0a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce0:	f7ff f9d0 	bl	8001084 <HAL_GetTick>
 8001ce4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ce6:	e00a      	b.n	8001cfe <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce8:	f7ff f9cc 	bl	8001084 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e138      	b.n	8001f70 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cfe:	4b4e      	ldr	r3, [pc, #312]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1ee      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 812d 	beq.w	8001f6e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001d14:	4b48      	ldr	r3, [pc, #288]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d1c:	2b18      	cmp	r3, #24
 8001d1e:	f000 80bd 	beq.w	8001e9c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	f040 809e 	bne.w	8001e68 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2c:	4b42      	ldr	r3, [pc, #264]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a41      	ldr	r2, [pc, #260]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001d32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d38:	f7ff f9a4 	bl	8001084 <HAL_GetTick>
 8001d3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d40:	f7ff f9a0 	bl	8001084 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e10e      	b.n	8001f70 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d52:	4b39      	ldr	r3, [pc, #228]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d5e:	4b36      	ldr	r3, [pc, #216]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001d60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d62:	4b37      	ldr	r3, [pc, #220]	@ (8001e40 <HAL_RCC_OscConfig+0x774>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001d6e:	0112      	lsls	r2, r2, #4
 8001d70:	430a      	orrs	r2, r1
 8001d72:	4931      	ldr	r1, [pc, #196]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	628b      	str	r3, [r1, #40]	@ 0x28
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d86:	3b01      	subs	r3, #1
 8001d88:	025b      	lsls	r3, r3, #9
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d92:	3b01      	subs	r3, #1
 8001d94:	041b      	lsls	r3, r3, #16
 8001d96:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001da0:	3b01      	subs	r3, #1
 8001da2:	061b      	lsls	r3, r3, #24
 8001da4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001da8:	4923      	ldr	r1, [pc, #140]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001dae:	4b22      	ldr	r3, [pc, #136]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db2:	4a21      	ldr	r2, [pc, #132]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001db4:	f023 0301 	bic.w	r3, r3, #1
 8001db8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001dba:	4b1f      	ldr	r3, [pc, #124]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001dbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dbe:	4b21      	ldr	r3, [pc, #132]	@ (8001e44 <HAL_RCC_OscConfig+0x778>)
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001dc6:	00d2      	lsls	r2, r2, #3
 8001dc8:	491b      	ldr	r1, [pc, #108]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001dce:	4b1a      	ldr	r3, [pc, #104]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd2:	f023 020c 	bic.w	r2, r3, #12
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	4917      	ldr	r1, [pc, #92]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001de0:	4b15      	ldr	r3, [pc, #84]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de4:	f023 0202 	bic.w	r2, r3, #2
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dec:	4912      	ldr	r1, [pc, #72]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001df2:	4b11      	ldr	r3, [pc, #68]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df6:	4a10      	ldr	r2, [pc, #64]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e02:	4a0d      	ldr	r2, [pc, #52]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001e10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001e16:	4b08      	ldr	r3, [pc, #32]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e1a:	4a07      	ldr	r2, [pc, #28]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e22:	4b05      	ldr	r3, [pc, #20]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a04      	ldr	r2, [pc, #16]	@ (8001e38 <HAL_RCC_OscConfig+0x76c>)
 8001e28:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2e:	f7ff f929 	bl	8001084 <HAL_GetTick>
 8001e32:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e34:	e011      	b.n	8001e5a <HAL_RCC_OscConfig+0x78e>
 8001e36:	bf00      	nop
 8001e38:	58024400 	.word	0x58024400
 8001e3c:	58024800 	.word	0x58024800
 8001e40:	fffffc0c 	.word	0xfffffc0c
 8001e44:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e48:	f7ff f91c 	bl	8001084 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e08a      	b.n	8001f70 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e5a:	4b47      	ldr	r3, [pc, #284]	@ (8001f78 <HAL_RCC_OscConfig+0x8ac>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0f0      	beq.n	8001e48 <HAL_RCC_OscConfig+0x77c>
 8001e66:	e082      	b.n	8001f6e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e68:	4b43      	ldr	r3, [pc, #268]	@ (8001f78 <HAL_RCC_OscConfig+0x8ac>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a42      	ldr	r2, [pc, #264]	@ (8001f78 <HAL_RCC_OscConfig+0x8ac>)
 8001e6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e74:	f7ff f906 	bl	8001084 <HAL_GetTick>
 8001e78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7c:	f7ff f902 	bl	8001084 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e070      	b.n	8001f70 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e8e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f78 <HAL_RCC_OscConfig+0x8ac>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x7b0>
 8001e9a:	e068      	b.n	8001f6e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001e9c:	4b36      	ldr	r3, [pc, #216]	@ (8001f78 <HAL_RCC_OscConfig+0x8ac>)
 8001e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001ea2:	4b35      	ldr	r3, [pc, #212]	@ (8001f78 <HAL_RCC_OscConfig+0x8ac>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d031      	beq.n	8001f14 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	f003 0203 	and.w	r2, r3, #3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d12a      	bne.n	8001f14 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	091b      	lsrs	r3, r3, #4
 8001ec2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d122      	bne.n	8001f14 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d11a      	bne.n	8001f14 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	0a5b      	lsrs	r3, r3, #9
 8001ee2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d111      	bne.n	8001f14 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	0c1b      	lsrs	r3, r3, #16
 8001ef4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001efc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d108      	bne.n	8001f14 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	0e1b      	lsrs	r3, r3, #24
 8001f06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f0e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e02b      	b.n	8001f70 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001f18:	4b17      	ldr	r3, [pc, #92]	@ (8001f78 <HAL_RCC_OscConfig+0x8ac>)
 8001f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f1c:	08db      	lsrs	r3, r3, #3
 8001f1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f22:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d01f      	beq.n	8001f6e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001f2e:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <HAL_RCC_OscConfig+0x8ac>)
 8001f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f32:	4a11      	ldr	r2, [pc, #68]	@ (8001f78 <HAL_RCC_OscConfig+0x8ac>)
 8001f34:	f023 0301 	bic.w	r3, r3, #1
 8001f38:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f3a:	f7ff f8a3 	bl	8001084 <HAL_GetTick>
 8001f3e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001f40:	bf00      	nop
 8001f42:	f7ff f89f 	bl	8001084 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d0f9      	beq.n	8001f42 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f78 <HAL_RCC_OscConfig+0x8ac>)
 8001f50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f52:	4b0a      	ldr	r3, [pc, #40]	@ (8001f7c <HAL_RCC_OscConfig+0x8b0>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f5a:	00d2      	lsls	r2, r2, #3
 8001f5c:	4906      	ldr	r1, [pc, #24]	@ (8001f78 <HAL_RCC_OscConfig+0x8ac>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001f62:	4b05      	ldr	r3, [pc, #20]	@ (8001f78 <HAL_RCC_OscConfig+0x8ac>)
 8001f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f66:	4a04      	ldr	r2, [pc, #16]	@ (8001f78 <HAL_RCC_OscConfig+0x8ac>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3730      	adds	r7, #48	@ 0x30
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	58024400 	.word	0x58024400
 8001f7c:	ffff0007 	.word	0xffff0007

08001f80 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e19c      	b.n	80022ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b8a      	ldr	r3, [pc, #552]	@ (80021c0 <HAL_RCC_ClockConfig+0x240>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d910      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b87      	ldr	r3, [pc, #540]	@ (80021c0 <HAL_RCC_ClockConfig+0x240>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 020f 	bic.w	r2, r3, #15
 8001faa:	4985      	ldr	r1, [pc, #532]	@ (80021c0 <HAL_RCC_ClockConfig+0x240>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b83      	ldr	r3, [pc, #524]	@ (80021c0 <HAL_RCC_ClockConfig+0x240>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e184      	b.n	80022ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d010      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	4b7b      	ldr	r3, [pc, #492]	@ (80021c4 <HAL_RCC_ClockConfig+0x244>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d908      	bls.n	8001ff2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001fe0:	4b78      	ldr	r3, [pc, #480]	@ (80021c4 <HAL_RCC_ClockConfig+0x244>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	4975      	ldr	r1, [pc, #468]	@ (80021c4 <HAL_RCC_ClockConfig+0x244>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d010      	beq.n	8002020 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695a      	ldr	r2, [r3, #20]
 8002002:	4b70      	ldr	r3, [pc, #448]	@ (80021c4 <HAL_RCC_ClockConfig+0x244>)
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800200a:	429a      	cmp	r2, r3
 800200c:	d908      	bls.n	8002020 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800200e:	4b6d      	ldr	r3, [pc, #436]	@ (80021c4 <HAL_RCC_ClockConfig+0x244>)
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	496a      	ldr	r1, [pc, #424]	@ (80021c4 <HAL_RCC_ClockConfig+0x244>)
 800201c:	4313      	orrs	r3, r2
 800201e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0310 	and.w	r3, r3, #16
 8002028:	2b00      	cmp	r3, #0
 800202a:	d010      	beq.n	800204e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	699a      	ldr	r2, [r3, #24]
 8002030:	4b64      	ldr	r3, [pc, #400]	@ (80021c4 <HAL_RCC_ClockConfig+0x244>)
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002038:	429a      	cmp	r2, r3
 800203a:	d908      	bls.n	800204e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800203c:	4b61      	ldr	r3, [pc, #388]	@ (80021c4 <HAL_RCC_ClockConfig+0x244>)
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	495e      	ldr	r1, [pc, #376]	@ (80021c4 <HAL_RCC_ClockConfig+0x244>)
 800204a:	4313      	orrs	r3, r2
 800204c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0320 	and.w	r3, r3, #32
 8002056:	2b00      	cmp	r3, #0
 8002058:	d010      	beq.n	800207c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69da      	ldr	r2, [r3, #28]
 800205e:	4b59      	ldr	r3, [pc, #356]	@ (80021c4 <HAL_RCC_ClockConfig+0x244>)
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002066:	429a      	cmp	r2, r3
 8002068:	d908      	bls.n	800207c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800206a:	4b56      	ldr	r3, [pc, #344]	@ (80021c4 <HAL_RCC_ClockConfig+0x244>)
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	4953      	ldr	r1, [pc, #332]	@ (80021c4 <HAL_RCC_ClockConfig+0x244>)
 8002078:	4313      	orrs	r3, r2
 800207a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d010      	beq.n	80020aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	4b4d      	ldr	r3, [pc, #308]	@ (80021c4 <HAL_RCC_ClockConfig+0x244>)
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	f003 030f 	and.w	r3, r3, #15
 8002094:	429a      	cmp	r2, r3
 8002096:	d908      	bls.n	80020aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002098:	4b4a      	ldr	r3, [pc, #296]	@ (80021c4 <HAL_RCC_ClockConfig+0x244>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	f023 020f 	bic.w	r2, r3, #15
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	4947      	ldr	r1, [pc, #284]	@ (80021c4 <HAL_RCC_ClockConfig+0x244>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d055      	beq.n	8002162 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80020b6:	4b43      	ldr	r3, [pc, #268]	@ (80021c4 <HAL_RCC_ClockConfig+0x244>)
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	4940      	ldr	r1, [pc, #256]	@ (80021c4 <HAL_RCC_ClockConfig+0x244>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d107      	bne.n	80020e0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020d0:	4b3c      	ldr	r3, [pc, #240]	@ (80021c4 <HAL_RCC_ClockConfig+0x244>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d121      	bne.n	8002120 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e0f6      	b.n	80022ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d107      	bne.n	80020f8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020e8:	4b36      	ldr	r3, [pc, #216]	@ (80021c4 <HAL_RCC_ClockConfig+0x244>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d115      	bne.n	8002120 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e0ea      	b.n	80022ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d107      	bne.n	8002110 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002100:	4b30      	ldr	r3, [pc, #192]	@ (80021c4 <HAL_RCC_ClockConfig+0x244>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002108:	2b00      	cmp	r3, #0
 800210a:	d109      	bne.n	8002120 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0de      	b.n	80022ce <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002110:	4b2c      	ldr	r3, [pc, #176]	@ (80021c4 <HAL_RCC_ClockConfig+0x244>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0d6      	b.n	80022ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002120:	4b28      	ldr	r3, [pc, #160]	@ (80021c4 <HAL_RCC_ClockConfig+0x244>)
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	f023 0207 	bic.w	r2, r3, #7
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	4925      	ldr	r1, [pc, #148]	@ (80021c4 <HAL_RCC_ClockConfig+0x244>)
 800212e:	4313      	orrs	r3, r2
 8002130:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002132:	f7fe ffa7 	bl	8001084 <HAL_GetTick>
 8002136:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002138:	e00a      	b.n	8002150 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800213a:	f7fe ffa3 	bl	8001084 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002148:	4293      	cmp	r3, r2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e0be      	b.n	80022ce <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002150:	4b1c      	ldr	r3, [pc, #112]	@ (80021c4 <HAL_RCC_ClockConfig+0x244>)
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	429a      	cmp	r2, r3
 8002160:	d1eb      	bne.n	800213a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d010      	beq.n	8002190 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	4b14      	ldr	r3, [pc, #80]	@ (80021c4 <HAL_RCC_ClockConfig+0x244>)
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	429a      	cmp	r2, r3
 800217c:	d208      	bcs.n	8002190 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800217e:	4b11      	ldr	r3, [pc, #68]	@ (80021c4 <HAL_RCC_ClockConfig+0x244>)
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	f023 020f 	bic.w	r2, r3, #15
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	490e      	ldr	r1, [pc, #56]	@ (80021c4 <HAL_RCC_ClockConfig+0x244>)
 800218c:	4313      	orrs	r3, r2
 800218e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002190:	4b0b      	ldr	r3, [pc, #44]	@ (80021c0 <HAL_RCC_ClockConfig+0x240>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 030f 	and.w	r3, r3, #15
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d214      	bcs.n	80021c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219e:	4b08      	ldr	r3, [pc, #32]	@ (80021c0 <HAL_RCC_ClockConfig+0x240>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 020f 	bic.w	r2, r3, #15
 80021a6:	4906      	ldr	r1, [pc, #24]	@ (80021c0 <HAL_RCC_ClockConfig+0x240>)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ae:	4b04      	ldr	r3, [pc, #16]	@ (80021c0 <HAL_RCC_ClockConfig+0x240>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d005      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e086      	b.n	80022ce <HAL_RCC_ClockConfig+0x34e>
 80021c0:	52002000 	.word	0x52002000
 80021c4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d010      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	4b3f      	ldr	r3, [pc, #252]	@ (80022d8 <HAL_RCC_ClockConfig+0x358>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d208      	bcs.n	80021f6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80021e4:	4b3c      	ldr	r3, [pc, #240]	@ (80022d8 <HAL_RCC_ClockConfig+0x358>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	4939      	ldr	r1, [pc, #228]	@ (80022d8 <HAL_RCC_ClockConfig+0x358>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d010      	beq.n	8002224 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695a      	ldr	r2, [r3, #20]
 8002206:	4b34      	ldr	r3, [pc, #208]	@ (80022d8 <HAL_RCC_ClockConfig+0x358>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800220e:	429a      	cmp	r2, r3
 8002210:	d208      	bcs.n	8002224 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002212:	4b31      	ldr	r3, [pc, #196]	@ (80022d8 <HAL_RCC_ClockConfig+0x358>)
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	492e      	ldr	r1, [pc, #184]	@ (80022d8 <HAL_RCC_ClockConfig+0x358>)
 8002220:	4313      	orrs	r3, r2
 8002222:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0310 	and.w	r3, r3, #16
 800222c:	2b00      	cmp	r3, #0
 800222e:	d010      	beq.n	8002252 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699a      	ldr	r2, [r3, #24]
 8002234:	4b28      	ldr	r3, [pc, #160]	@ (80022d8 <HAL_RCC_ClockConfig+0x358>)
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800223c:	429a      	cmp	r2, r3
 800223e:	d208      	bcs.n	8002252 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002240:	4b25      	ldr	r3, [pc, #148]	@ (80022d8 <HAL_RCC_ClockConfig+0x358>)
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	4922      	ldr	r1, [pc, #136]	@ (80022d8 <HAL_RCC_ClockConfig+0x358>)
 800224e:	4313      	orrs	r3, r2
 8002250:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0320 	and.w	r3, r3, #32
 800225a:	2b00      	cmp	r3, #0
 800225c:	d010      	beq.n	8002280 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69da      	ldr	r2, [r3, #28]
 8002262:	4b1d      	ldr	r3, [pc, #116]	@ (80022d8 <HAL_RCC_ClockConfig+0x358>)
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800226a:	429a      	cmp	r2, r3
 800226c:	d208      	bcs.n	8002280 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800226e:	4b1a      	ldr	r3, [pc, #104]	@ (80022d8 <HAL_RCC_ClockConfig+0x358>)
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	4917      	ldr	r1, [pc, #92]	@ (80022d8 <HAL_RCC_ClockConfig+0x358>)
 800227c:	4313      	orrs	r3, r2
 800227e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002280:	f000 f834 	bl	80022ec <HAL_RCC_GetSysClockFreq>
 8002284:	4602      	mov	r2, r0
 8002286:	4b14      	ldr	r3, [pc, #80]	@ (80022d8 <HAL_RCC_ClockConfig+0x358>)
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	0a1b      	lsrs	r3, r3, #8
 800228c:	f003 030f 	and.w	r3, r3, #15
 8002290:	4912      	ldr	r1, [pc, #72]	@ (80022dc <HAL_RCC_ClockConfig+0x35c>)
 8002292:	5ccb      	ldrb	r3, [r1, r3]
 8002294:	f003 031f 	and.w	r3, r3, #31
 8002298:	fa22 f303 	lsr.w	r3, r2, r3
 800229c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800229e:	4b0e      	ldr	r3, [pc, #56]	@ (80022d8 <HAL_RCC_ClockConfig+0x358>)
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	4a0d      	ldr	r2, [pc, #52]	@ (80022dc <HAL_RCC_ClockConfig+0x35c>)
 80022a8:	5cd3      	ldrb	r3, [r2, r3]
 80022aa:	f003 031f 	and.w	r3, r3, #31
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	fa22 f303 	lsr.w	r3, r2, r3
 80022b4:	4a0a      	ldr	r2, [pc, #40]	@ (80022e0 <HAL_RCC_ClockConfig+0x360>)
 80022b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022b8:	4a0a      	ldr	r2, [pc, #40]	@ (80022e4 <HAL_RCC_ClockConfig+0x364>)
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80022be:	4b0a      	ldr	r3, [pc, #40]	@ (80022e8 <HAL_RCC_ClockConfig+0x368>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe fe94 	bl	8000ff0 <HAL_InitTick>
 80022c8:	4603      	mov	r3, r0
 80022ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	58024400 	.word	0x58024400
 80022dc:	0800a770 	.word	0x0800a770
 80022e0:	24000004 	.word	0x24000004
 80022e4:	24000000 	.word	0x24000000
 80022e8:	24000008 	.word	0x24000008

080022ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b089      	sub	sp, #36	@ 0x24
 80022f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022f2:	4bb3      	ldr	r3, [pc, #716]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022fa:	2b18      	cmp	r3, #24
 80022fc:	f200 8155 	bhi.w	80025aa <HAL_RCC_GetSysClockFreq+0x2be>
 8002300:	a201      	add	r2, pc, #4	@ (adr r2, 8002308 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002306:	bf00      	nop
 8002308:	0800236d 	.word	0x0800236d
 800230c:	080025ab 	.word	0x080025ab
 8002310:	080025ab 	.word	0x080025ab
 8002314:	080025ab 	.word	0x080025ab
 8002318:	080025ab 	.word	0x080025ab
 800231c:	080025ab 	.word	0x080025ab
 8002320:	080025ab 	.word	0x080025ab
 8002324:	080025ab 	.word	0x080025ab
 8002328:	08002393 	.word	0x08002393
 800232c:	080025ab 	.word	0x080025ab
 8002330:	080025ab 	.word	0x080025ab
 8002334:	080025ab 	.word	0x080025ab
 8002338:	080025ab 	.word	0x080025ab
 800233c:	080025ab 	.word	0x080025ab
 8002340:	080025ab 	.word	0x080025ab
 8002344:	080025ab 	.word	0x080025ab
 8002348:	08002399 	.word	0x08002399
 800234c:	080025ab 	.word	0x080025ab
 8002350:	080025ab 	.word	0x080025ab
 8002354:	080025ab 	.word	0x080025ab
 8002358:	080025ab 	.word	0x080025ab
 800235c:	080025ab 	.word	0x080025ab
 8002360:	080025ab 	.word	0x080025ab
 8002364:	080025ab 	.word	0x080025ab
 8002368:	0800239f 	.word	0x0800239f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800236c:	4b94      	ldr	r3, [pc, #592]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0320 	and.w	r3, r3, #32
 8002374:	2b00      	cmp	r3, #0
 8002376:	d009      	beq.n	800238c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002378:	4b91      	ldr	r3, [pc, #580]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	08db      	lsrs	r3, r3, #3
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	4a90      	ldr	r2, [pc, #576]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002384:	fa22 f303 	lsr.w	r3, r2, r3
 8002388:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800238a:	e111      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800238c:	4b8d      	ldr	r3, [pc, #564]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800238e:	61bb      	str	r3, [r7, #24]
      break;
 8002390:	e10e      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002392:	4b8d      	ldr	r3, [pc, #564]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002394:	61bb      	str	r3, [r7, #24]
      break;
 8002396:	e10b      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002398:	4b8c      	ldr	r3, [pc, #560]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800239a:	61bb      	str	r3, [r7, #24]
      break;
 800239c:	e108      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800239e:	4b88      	ldr	r3, [pc, #544]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80023a8:	4b85      	ldr	r3, [pc, #532]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023b2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80023b4:	4b82      	ldr	r3, [pc, #520]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80023be:	4b80      	ldr	r3, [pc, #512]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c2:	08db      	lsrs	r3, r3, #3
 80023c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	fb02 f303 	mul.w	r3, r2, r3
 80023ce:	ee07 3a90 	vmov	s15, r3
 80023d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023d6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 80e1 	beq.w	80025a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	f000 8083 	beq.w	80024f0 <HAL_RCC_GetSysClockFreq+0x204>
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	f200 80a1 	bhi.w	8002534 <HAL_RCC_GetSysClockFreq+0x248>
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_RCC_GetSysClockFreq+0x114>
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d056      	beq.n	80024ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80023fe:	e099      	b.n	8002534 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002400:	4b6f      	ldr	r3, [pc, #444]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0320 	and.w	r3, r3, #32
 8002408:	2b00      	cmp	r3, #0
 800240a:	d02d      	beq.n	8002468 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800240c:	4b6c      	ldr	r3, [pc, #432]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	08db      	lsrs	r3, r3, #3
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	4a6b      	ldr	r2, [pc, #428]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002418:	fa22 f303 	lsr.w	r3, r2, r3
 800241c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	ee07 3a90 	vmov	s15, r3
 8002424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	ee07 3a90 	vmov	s15, r3
 800242e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002436:	4b62      	ldr	r3, [pc, #392]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800243e:	ee07 3a90 	vmov	s15, r3
 8002442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002446:	ed97 6a02 	vldr	s12, [r7, #8]
 800244a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80025d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800244e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800245a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800245e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002462:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002466:	e087      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	ee07 3a90 	vmov	s15, r3
 800246e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002472:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80025d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800247a:	4b51      	ldr	r3, [pc, #324]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002482:	ee07 3a90 	vmov	s15, r3
 8002486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800248a:	ed97 6a02 	vldr	s12, [r7, #8]
 800248e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80025d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800249a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800249e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024aa:	e065      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	ee07 3a90 	vmov	s15, r3
 80024b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024b6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80025d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80024ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024be:	4b40      	ldr	r3, [pc, #256]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024c6:	ee07 3a90 	vmov	s15, r3
 80024ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80024d2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80025d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024ee:	e043      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	ee07 3a90 	vmov	s15, r3
 80024f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024fa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80025dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80024fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002502:	4b2f      	ldr	r3, [pc, #188]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800250a:	ee07 3a90 	vmov	s15, r3
 800250e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002512:	ed97 6a02 	vldr	s12, [r7, #8]
 8002516:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80025d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800251a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800251e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002522:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800252a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800252e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002532:	e021      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	ee07 3a90 	vmov	s15, r3
 800253a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800253e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80025d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002546:	4b1e      	ldr	r3, [pc, #120]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800254e:	ee07 3a90 	vmov	s15, r3
 8002552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002556:	ed97 6a02 	vldr	s12, [r7, #8]
 800255a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80025d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800255e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002566:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800256a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800256e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002572:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002576:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002578:	4b11      	ldr	r3, [pc, #68]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800257a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257c:	0a5b      	lsrs	r3, r3, #9
 800257e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002582:	3301      	adds	r3, #1
 8002584:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	ee07 3a90 	vmov	s15, r3
 800258c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002590:	edd7 6a07 	vldr	s13, [r7, #28]
 8002594:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800259c:	ee17 3a90 	vmov	r3, s15
 80025a0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80025a2:	e005      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61bb      	str	r3, [r7, #24]
      break;
 80025a8:	e002      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80025aa:	4b07      	ldr	r3, [pc, #28]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80025ac:	61bb      	str	r3, [r7, #24]
      break;
 80025ae:	bf00      	nop
  }

  return sysclockfreq;
 80025b0:	69bb      	ldr	r3, [r7, #24]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3724      	adds	r7, #36	@ 0x24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	58024400 	.word	0x58024400
 80025c4:	03d09000 	.word	0x03d09000
 80025c8:	003d0900 	.word	0x003d0900
 80025cc:	007a1200 	.word	0x007a1200
 80025d0:	46000000 	.word	0x46000000
 80025d4:	4c742400 	.word	0x4c742400
 80025d8:	4a742400 	.word	0x4a742400
 80025dc:	4af42400 	.word	0x4af42400

080025e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80025e6:	f7ff fe81 	bl	80022ec <HAL_RCC_GetSysClockFreq>
 80025ea:	4602      	mov	r2, r0
 80025ec:	4b10      	ldr	r3, [pc, #64]	@ (8002630 <HAL_RCC_GetHCLKFreq+0x50>)
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	0a1b      	lsrs	r3, r3, #8
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	490f      	ldr	r1, [pc, #60]	@ (8002634 <HAL_RCC_GetHCLKFreq+0x54>)
 80025f8:	5ccb      	ldrb	r3, [r1, r3]
 80025fa:	f003 031f 	and.w	r3, r3, #31
 80025fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002602:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002604:	4b0a      	ldr	r3, [pc, #40]	@ (8002630 <HAL_RCC_GetHCLKFreq+0x50>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	4a09      	ldr	r2, [pc, #36]	@ (8002634 <HAL_RCC_GetHCLKFreq+0x54>)
 800260e:	5cd3      	ldrb	r3, [r2, r3]
 8002610:	f003 031f 	and.w	r3, r3, #31
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	fa22 f303 	lsr.w	r3, r2, r3
 800261a:	4a07      	ldr	r2, [pc, #28]	@ (8002638 <HAL_RCC_GetHCLKFreq+0x58>)
 800261c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800261e:	4a07      	ldr	r2, [pc, #28]	@ (800263c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002624:	4b04      	ldr	r3, [pc, #16]	@ (8002638 <HAL_RCC_GetHCLKFreq+0x58>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	58024400 	.word	0x58024400
 8002634:	0800a770 	.word	0x0800a770
 8002638:	24000004 	.word	0x24000004
 800263c:	24000000 	.word	0x24000000

08002640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002644:	f7ff ffcc 	bl	80025e0 <HAL_RCC_GetHCLKFreq>
 8002648:	4602      	mov	r2, r0
 800264a:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <HAL_RCC_GetPCLK1Freq+0x24>)
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	091b      	lsrs	r3, r3, #4
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	4904      	ldr	r1, [pc, #16]	@ (8002668 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002656:	5ccb      	ldrb	r3, [r1, r3]
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002660:	4618      	mov	r0, r3
 8002662:	bd80      	pop	{r7, pc}
 8002664:	58024400 	.word	0x58024400
 8002668:	0800a770 	.word	0x0800a770

0800266c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002670:	f7ff ffb6 	bl	80025e0 <HAL_RCC_GetHCLKFreq>
 8002674:	4602      	mov	r2, r0
 8002676:	4b06      	ldr	r3, [pc, #24]	@ (8002690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	0a1b      	lsrs	r3, r3, #8
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	4904      	ldr	r1, [pc, #16]	@ (8002694 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002682:	5ccb      	ldrb	r3, [r1, r3]
 8002684:	f003 031f 	and.w	r3, r3, #31
 8002688:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800268c:	4618      	mov	r0, r3
 800268e:	bd80      	pop	{r7, pc}
 8002690:	58024400 	.word	0x58024400
 8002694:	0800a770 	.word	0x0800a770

08002698 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800269c:	b0ca      	sub	sp, #296	@ 0x128
 800269e:	af00      	add	r7, sp, #0
 80026a0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026a4:	2300      	movs	r3, #0
 80026a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026aa:	2300      	movs	r3, #0
 80026ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80026bc:	2500      	movs	r5, #0
 80026be:	ea54 0305 	orrs.w	r3, r4, r5
 80026c2:	d049      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80026c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80026ce:	d02f      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80026d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80026d4:	d828      	bhi.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80026d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026da:	d01a      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80026dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026e0:	d822      	bhi.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80026e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026ea:	d007      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026ec:	e01c      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026ee:	4bb8      	ldr	r3, [pc, #736]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f2:	4ab7      	ldr	r2, [pc, #732]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80026fa:	e01a      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80026fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002700:	3308      	adds	r3, #8
 8002702:	2102      	movs	r1, #2
 8002704:	4618      	mov	r0, r3
 8002706:	f001 fc8f 	bl	8004028 <RCCEx_PLL2_Config>
 800270a:	4603      	mov	r3, r0
 800270c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002710:	e00f      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002716:	3328      	adds	r3, #40	@ 0x28
 8002718:	2102      	movs	r1, #2
 800271a:	4618      	mov	r0, r3
 800271c:	f001 fd36 	bl	800418c <RCCEx_PLL3_Config>
 8002720:	4603      	mov	r3, r0
 8002722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002726:	e004      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800272e:	e000      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002730:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002732:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10a      	bne.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800273a:	4ba5      	ldr	r3, [pc, #660]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800273c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800273e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002746:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002748:	4aa1      	ldr	r2, [pc, #644]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800274a:	430b      	orrs	r3, r1
 800274c:	6513      	str	r3, [r2, #80]	@ 0x50
 800274e:	e003      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002750:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002754:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800275c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002760:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002764:	f04f 0900 	mov.w	r9, #0
 8002768:	ea58 0309 	orrs.w	r3, r8, r9
 800276c:	d047      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800276e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002774:	2b04      	cmp	r3, #4
 8002776:	d82a      	bhi.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002778:	a201      	add	r2, pc, #4	@ (adr r2, 8002780 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800277a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277e:	bf00      	nop
 8002780:	08002795 	.word	0x08002795
 8002784:	080027a3 	.word	0x080027a3
 8002788:	080027b9 	.word	0x080027b9
 800278c:	080027d7 	.word	0x080027d7
 8002790:	080027d7 	.word	0x080027d7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002794:	4b8e      	ldr	r3, [pc, #568]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002798:	4a8d      	ldr	r2, [pc, #564]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800279a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800279e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027a0:	e01a      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027a6:	3308      	adds	r3, #8
 80027a8:	2100      	movs	r1, #0
 80027aa:	4618      	mov	r0, r3
 80027ac:	f001 fc3c 	bl	8004028 <RCCEx_PLL2_Config>
 80027b0:	4603      	mov	r3, r0
 80027b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027b6:	e00f      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027bc:	3328      	adds	r3, #40	@ 0x28
 80027be:	2100      	movs	r1, #0
 80027c0:	4618      	mov	r0, r3
 80027c2:	f001 fce3 	bl	800418c <RCCEx_PLL3_Config>
 80027c6:	4603      	mov	r3, r0
 80027c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027cc:	e004      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80027d4:	e000      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80027d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10a      	bne.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027e0:	4b7b      	ldr	r3, [pc, #492]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027e4:	f023 0107 	bic.w	r1, r3, #7
 80027e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ee:	4a78      	ldr	r2, [pc, #480]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027f0:	430b      	orrs	r3, r1
 80027f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80027f4:	e003      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80027fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002806:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800280a:	f04f 0b00 	mov.w	fp, #0
 800280e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002812:	d04c      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800281a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800281e:	d030      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002820:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002824:	d829      	bhi.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002826:	2bc0      	cmp	r3, #192	@ 0xc0
 8002828:	d02d      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800282a:	2bc0      	cmp	r3, #192	@ 0xc0
 800282c:	d825      	bhi.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800282e:	2b80      	cmp	r3, #128	@ 0x80
 8002830:	d018      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002832:	2b80      	cmp	r3, #128	@ 0x80
 8002834:	d821      	bhi.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800283a:	2b40      	cmp	r3, #64	@ 0x40
 800283c:	d007      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800283e:	e01c      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002840:	4b63      	ldr	r3, [pc, #396]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002844:	4a62      	ldr	r2, [pc, #392]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002846:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800284a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800284c:	e01c      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800284e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002852:	3308      	adds	r3, #8
 8002854:	2100      	movs	r1, #0
 8002856:	4618      	mov	r0, r3
 8002858:	f001 fbe6 	bl	8004028 <RCCEx_PLL2_Config>
 800285c:	4603      	mov	r3, r0
 800285e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002862:	e011      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002868:	3328      	adds	r3, #40	@ 0x28
 800286a:	2100      	movs	r1, #0
 800286c:	4618      	mov	r0, r3
 800286e:	f001 fc8d 	bl	800418c <RCCEx_PLL3_Config>
 8002872:	4603      	mov	r3, r0
 8002874:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002878:	e006      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002880:	e002      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002882:	bf00      	nop
 8002884:	e000      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002886:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002888:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10a      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002890:	4b4f      	ldr	r3, [pc, #316]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002894:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800289c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289e:	4a4c      	ldr	r2, [pc, #304]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028a0:	430b      	orrs	r3, r1
 80028a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80028a4:	e003      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80028ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80028ba:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80028be:	2300      	movs	r3, #0
 80028c0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80028c4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80028c8:	460b      	mov	r3, r1
 80028ca:	4313      	orrs	r3, r2
 80028cc:	d053      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80028ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80028d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80028da:	d035      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80028dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80028e0:	d82e      	bhi.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80028e2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80028e6:	d031      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80028e8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80028ec:	d828      	bhi.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80028ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028f2:	d01a      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80028f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028f8:	d822      	bhi.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80028fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002902:	d007      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002904:	e01c      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002906:	4b32      	ldr	r3, [pc, #200]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290a:	4a31      	ldr	r2, [pc, #196]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800290c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002910:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002912:	e01c      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002918:	3308      	adds	r3, #8
 800291a:	2100      	movs	r1, #0
 800291c:	4618      	mov	r0, r3
 800291e:	f001 fb83 	bl	8004028 <RCCEx_PLL2_Config>
 8002922:	4603      	mov	r3, r0
 8002924:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002928:	e011      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800292a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800292e:	3328      	adds	r3, #40	@ 0x28
 8002930:	2100      	movs	r1, #0
 8002932:	4618      	mov	r0, r3
 8002934:	f001 fc2a 	bl	800418c <RCCEx_PLL3_Config>
 8002938:	4603      	mov	r3, r0
 800293a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800293e:	e006      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002946:	e002      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002948:	bf00      	nop
 800294a:	e000      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800294c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800294e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10b      	bne.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002956:	4b1e      	ldr	r3, [pc, #120]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800295e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002962:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002966:	4a1a      	ldr	r2, [pc, #104]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002968:	430b      	orrs	r3, r1
 800296a:	6593      	str	r3, [r2, #88]	@ 0x58
 800296c:	e003      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800296e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002972:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800297a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002982:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002986:	2300      	movs	r3, #0
 8002988:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800298c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002990:	460b      	mov	r3, r1
 8002992:	4313      	orrs	r3, r2
 8002994:	d056      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800299a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800299e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029a2:	d038      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80029a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029a8:	d831      	bhi.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80029aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80029ae:	d034      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80029b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80029b4:	d82b      	bhi.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80029b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80029ba:	d01d      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80029bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80029c0:	d825      	bhi.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d006      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80029c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029ca:	d00a      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80029cc:	e01f      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80029ce:	bf00      	nop
 80029d0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029d4:	4ba2      	ldr	r3, [pc, #648]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d8:	4aa1      	ldr	r2, [pc, #644]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029e0:	e01c      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029e6:	3308      	adds	r3, #8
 80029e8:	2100      	movs	r1, #0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f001 fb1c 	bl	8004028 <RCCEx_PLL2_Config>
 80029f0:	4603      	mov	r3, r0
 80029f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80029f6:	e011      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029fc:	3328      	adds	r3, #40	@ 0x28
 80029fe:	2100      	movs	r1, #0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f001 fbc3 	bl	800418c <RCCEx_PLL3_Config>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a0c:	e006      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a14:	e002      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002a16:	bf00      	nop
 8002a18:	e000      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002a1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10b      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002a24:	4b8e      	ldr	r3, [pc, #568]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a28:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002a34:	4a8a      	ldr	r2, [pc, #552]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a36:	430b      	orrs	r3, r1
 8002a38:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a3a:	e003      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002a50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002a54:	2300      	movs	r3, #0
 8002a56:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002a5a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4313      	orrs	r3, r2
 8002a62:	d03a      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a6a:	2b30      	cmp	r3, #48	@ 0x30
 8002a6c:	d01f      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002a6e:	2b30      	cmp	r3, #48	@ 0x30
 8002a70:	d819      	bhi.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002a72:	2b20      	cmp	r3, #32
 8002a74:	d00c      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002a76:	2b20      	cmp	r3, #32
 8002a78:	d815      	bhi.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d019      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002a7e:	2b10      	cmp	r3, #16
 8002a80:	d111      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a82:	4b77      	ldr	r3, [pc, #476]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a86:	4a76      	ldr	r2, [pc, #472]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002a8e:	e011      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a94:	3308      	adds	r3, #8
 8002a96:	2102      	movs	r1, #2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f001 fac5 	bl	8004028 <RCCEx_PLL2_Config>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002aa4:	e006      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002aac:	e002      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002aae:	bf00      	nop
 8002ab0:	e000      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002ab2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ab4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10a      	bne.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002abc:	4b68      	ldr	r3, [pc, #416]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aca:	4a65      	ldr	r2, [pc, #404]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002acc:	430b      	orrs	r3, r1
 8002ace:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ad0:	e003      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ad6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002ae6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002aea:	2300      	movs	r3, #0
 8002aec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002af0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4313      	orrs	r3, r2
 8002af8:	d051      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002afe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b04:	d035      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002b06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b0a:	d82e      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002b0c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002b10:	d031      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002b12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002b16:	d828      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002b18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b1c:	d01a      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002b1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b22:	d822      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002b28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b2c:	d007      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002b2e:	e01c      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b30:	4b4b      	ldr	r3, [pc, #300]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b34:	4a4a      	ldr	r2, [pc, #296]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002b3c:	e01c      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b42:	3308      	adds	r3, #8
 8002b44:	2100      	movs	r1, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f001 fa6e 	bl	8004028 <RCCEx_PLL2_Config>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002b52:	e011      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b58:	3328      	adds	r3, #40	@ 0x28
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f001 fb15 	bl	800418c <RCCEx_PLL3_Config>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002b68:	e006      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b70:	e002      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002b72:	bf00      	nop
 8002b74:	e000      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002b76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10a      	bne.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002b80:	4b37      	ldr	r3, [pc, #220]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b84:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b8e:	4a34      	ldr	r2, [pc, #208]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b90:	430b      	orrs	r3, r1
 8002b92:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b94:	e003      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002baa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002bb4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	d056      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bc8:	d033      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002bca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bce:	d82c      	bhi.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002bd0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002bd4:	d02f      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002bd6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002bda:	d826      	bhi.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002bdc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002be0:	d02b      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002be2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002be6:	d820      	bhi.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002be8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002bec:	d012      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002bee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002bf2:	d81a      	bhi.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d022      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bfc:	d115      	bne.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c02:	3308      	adds	r3, #8
 8002c04:	2101      	movs	r1, #1
 8002c06:	4618      	mov	r0, r3
 8002c08:	f001 fa0e 	bl	8004028 <RCCEx_PLL2_Config>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002c12:	e015      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c18:	3328      	adds	r3, #40	@ 0x28
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f001 fab5 	bl	800418c <RCCEx_PLL3_Config>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002c28:	e00a      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c30:	e006      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002c32:	bf00      	nop
 8002c34:	e004      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002c36:	bf00      	nop
 8002c38:	e002      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002c3a:	bf00      	nop
 8002c3c:	e000      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002c3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10d      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002c48:	4b05      	ldr	r3, [pc, #20]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c4c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c56:	4a02      	ldr	r2, [pc, #8]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c5c:	e006      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002c5e:	bf00      	nop
 8002c60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c74:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002c78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002c82:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	d055      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002c94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c98:	d033      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002c9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c9e:	d82c      	bhi.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ca4:	d02f      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002caa:	d826      	bhi.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002cac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002cb0:	d02b      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002cb2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002cb6:	d820      	bhi.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002cb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cbc:	d012      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002cbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cc2:	d81a      	bhi.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d022      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002cc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ccc:	d115      	bne.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cd2:	3308      	adds	r3, #8
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f001 f9a6 	bl	8004028 <RCCEx_PLL2_Config>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002ce2:	e015      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ce8:	3328      	adds	r3, #40	@ 0x28
 8002cea:	2101      	movs	r1, #1
 8002cec:	4618      	mov	r0, r3
 8002cee:	f001 fa4d 	bl	800418c <RCCEx_PLL3_Config>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002cf8:	e00a      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d00:	e006      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002d02:	bf00      	nop
 8002d04:	e004      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002d06:	bf00      	nop
 8002d08:	e002      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002d0a:	bf00      	nop
 8002d0c:	e000      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002d0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10b      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002d18:	4ba3      	ldr	r3, [pc, #652]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002d28:	4a9f      	ldr	r2, [pc, #636]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d2a:	430b      	orrs	r3, r1
 8002d2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d2e:	e003      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d40:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002d44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002d4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002d52:	460b      	mov	r3, r1
 8002d54:	4313      	orrs	r3, r2
 8002d56:	d037      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d62:	d00e      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002d64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d68:	d816      	bhi.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d018      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002d6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d72:	d111      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d74:	4b8c      	ldr	r3, [pc, #560]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d78:	4a8b      	ldr	r2, [pc, #556]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002d80:	e00f      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d86:	3308      	adds	r3, #8
 8002d88:	2101      	movs	r1, #1
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f001 f94c 	bl	8004028 <RCCEx_PLL2_Config>
 8002d90:	4603      	mov	r3, r0
 8002d92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002d96:	e004      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d9e:	e000      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002da0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002da2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10a      	bne.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002daa:	4b7f      	ldr	r3, [pc, #508]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dae:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db8:	4a7b      	ldr	r2, [pc, #492]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dba:	430b      	orrs	r3, r1
 8002dbc:	6513      	str	r3, [r2, #80]	@ 0x50
 8002dbe:	e003      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002dd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002dd8:	2300      	movs	r3, #0
 8002dda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002dde:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4313      	orrs	r3, r2
 8002de6:	d039      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d81c      	bhi.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002df2:	a201      	add	r2, pc, #4	@ (adr r2, 8002df8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df8:	08002e35 	.word	0x08002e35
 8002dfc:	08002e09 	.word	0x08002e09
 8002e00:	08002e17 	.word	0x08002e17
 8002e04:	08002e35 	.word	0x08002e35
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e08:	4b67      	ldr	r3, [pc, #412]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0c:	4a66      	ldr	r2, [pc, #408]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002e14:	e00f      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e1a:	3308      	adds	r3, #8
 8002e1c:	2102      	movs	r1, #2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f001 f902 	bl	8004028 <RCCEx_PLL2_Config>
 8002e24:	4603      	mov	r3, r0
 8002e26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002e2a:	e004      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e32:	e000      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002e34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10a      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002e3e:	4b5a      	ldr	r3, [pc, #360]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e42:	f023 0103 	bic.w	r1, r3, #3
 8002e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e4c:	4a56      	ldr	r2, [pc, #344]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e4e:	430b      	orrs	r3, r1
 8002e50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e52:	e003      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e64:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002e68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e72:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002e76:	460b      	mov	r3, r1
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f000 809f 	beq.w	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e7e:	4b4b      	ldr	r3, [pc, #300]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a4a      	ldr	r2, [pc, #296]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002e84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e8a:	f7fe f8fb 	bl	8001084 <HAL_GetTick>
 8002e8e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e92:	e00b      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e94:	f7fe f8f6 	bl	8001084 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b64      	cmp	r3, #100	@ 0x64
 8002ea2:	d903      	bls.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002eaa:	e005      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002eac:	4b3f      	ldr	r3, [pc, #252]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0ed      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002eb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d179      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002ec0:	4b39      	ldr	r3, [pc, #228]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ec2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ec8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002ecc:	4053      	eors	r3, r2
 8002ece:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d015      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ed6:	4b34      	ldr	r3, [pc, #208]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ede:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ee2:	4b31      	ldr	r3, [pc, #196]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee6:	4a30      	ldr	r2, [pc, #192]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eec:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002eee:	4b2e      	ldr	r3, [pc, #184]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef2:	4a2d      	ldr	r2, [pc, #180]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ef4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ef8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002efa:	4a2b      	ldr	r2, [pc, #172]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002efc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f00:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002f0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f0e:	d118      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f10:	f7fe f8b8 	bl	8001084 <HAL_GetTick>
 8002f14:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f18:	e00d      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1a:	f7fe f8b3 	bl	8001084 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002f24:	1ad2      	subs	r2, r2, r3
 8002f26:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d903      	bls.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8002f34:	e005      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f36:	4b1c      	ldr	r3, [pc, #112]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0eb      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002f42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d129      	bne.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002f52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f5a:	d10e      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002f5c:	4b12      	ldr	r3, [pc, #72]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002f6c:	091a      	lsrs	r2, r3, #4
 8002f6e:	4b10      	ldr	r3, [pc, #64]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	4a0d      	ldr	r2, [pc, #52]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f74:	430b      	orrs	r3, r1
 8002f76:	6113      	str	r3, [r2, #16]
 8002f78:	e005      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f80:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002f84:	6113      	str	r3, [r2, #16]
 8002f86:	4b08      	ldr	r3, [pc, #32]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f88:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002f92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f96:	4a04      	ldr	r2, [pc, #16]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f9c:	e00e      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8002fa6:	e009      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002fa8:	58024400 	.word	0x58024400
 8002fac:	58024800 	.word	0x58024800
 8002fb0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc4:	f002 0301 	and.w	r3, r2, #1
 8002fc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002fd2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f000 8089 	beq.w	80030f0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fe2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fe4:	2b28      	cmp	r3, #40	@ 0x28
 8002fe6:	d86b      	bhi.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fee:	bf00      	nop
 8002ff0:	080030c9 	.word	0x080030c9
 8002ff4:	080030c1 	.word	0x080030c1
 8002ff8:	080030c1 	.word	0x080030c1
 8002ffc:	080030c1 	.word	0x080030c1
 8003000:	080030c1 	.word	0x080030c1
 8003004:	080030c1 	.word	0x080030c1
 8003008:	080030c1 	.word	0x080030c1
 800300c:	080030c1 	.word	0x080030c1
 8003010:	08003095 	.word	0x08003095
 8003014:	080030c1 	.word	0x080030c1
 8003018:	080030c1 	.word	0x080030c1
 800301c:	080030c1 	.word	0x080030c1
 8003020:	080030c1 	.word	0x080030c1
 8003024:	080030c1 	.word	0x080030c1
 8003028:	080030c1 	.word	0x080030c1
 800302c:	080030c1 	.word	0x080030c1
 8003030:	080030ab 	.word	0x080030ab
 8003034:	080030c1 	.word	0x080030c1
 8003038:	080030c1 	.word	0x080030c1
 800303c:	080030c1 	.word	0x080030c1
 8003040:	080030c1 	.word	0x080030c1
 8003044:	080030c1 	.word	0x080030c1
 8003048:	080030c1 	.word	0x080030c1
 800304c:	080030c1 	.word	0x080030c1
 8003050:	080030c9 	.word	0x080030c9
 8003054:	080030c1 	.word	0x080030c1
 8003058:	080030c1 	.word	0x080030c1
 800305c:	080030c1 	.word	0x080030c1
 8003060:	080030c1 	.word	0x080030c1
 8003064:	080030c1 	.word	0x080030c1
 8003068:	080030c1 	.word	0x080030c1
 800306c:	080030c1 	.word	0x080030c1
 8003070:	080030c9 	.word	0x080030c9
 8003074:	080030c1 	.word	0x080030c1
 8003078:	080030c1 	.word	0x080030c1
 800307c:	080030c1 	.word	0x080030c1
 8003080:	080030c1 	.word	0x080030c1
 8003084:	080030c1 	.word	0x080030c1
 8003088:	080030c1 	.word	0x080030c1
 800308c:	080030c1 	.word	0x080030c1
 8003090:	080030c9 	.word	0x080030c9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003098:	3308      	adds	r3, #8
 800309a:	2101      	movs	r1, #1
 800309c:	4618      	mov	r0, r3
 800309e:	f000 ffc3 	bl	8004028 <RCCEx_PLL2_Config>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80030a8:	e00f      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ae:	3328      	adds	r3, #40	@ 0x28
 80030b0:	2101      	movs	r1, #1
 80030b2:	4618      	mov	r0, r3
 80030b4:	f001 f86a 	bl	800418c <RCCEx_PLL3_Config>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80030be:	e004      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030c6:	e000      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80030c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10a      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80030d2:	4bbf      	ldr	r3, [pc, #764]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80030da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030e0:	4abb      	ldr	r2, [pc, #748]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030e2:	430b      	orrs	r3, r1
 80030e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80030e6:	e003      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80030f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f8:	f002 0302 	and.w	r3, r2, #2
 80030fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003100:	2300      	movs	r3, #0
 8003102:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003106:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800310a:	460b      	mov	r3, r1
 800310c:	4313      	orrs	r3, r2
 800310e:	d041      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003114:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003116:	2b05      	cmp	r3, #5
 8003118:	d824      	bhi.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800311a:	a201      	add	r2, pc, #4	@ (adr r2, 8003120 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800311c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003120:	0800316d 	.word	0x0800316d
 8003124:	08003139 	.word	0x08003139
 8003128:	0800314f 	.word	0x0800314f
 800312c:	0800316d 	.word	0x0800316d
 8003130:	0800316d 	.word	0x0800316d
 8003134:	0800316d 	.word	0x0800316d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800313c:	3308      	adds	r3, #8
 800313e:	2101      	movs	r1, #1
 8003140:	4618      	mov	r0, r3
 8003142:	f000 ff71 	bl	8004028 <RCCEx_PLL2_Config>
 8003146:	4603      	mov	r3, r0
 8003148:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800314c:	e00f      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800314e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003152:	3328      	adds	r3, #40	@ 0x28
 8003154:	2101      	movs	r1, #1
 8003156:	4618      	mov	r0, r3
 8003158:	f001 f818 	bl	800418c <RCCEx_PLL3_Config>
 800315c:	4603      	mov	r3, r0
 800315e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003162:	e004      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800316a:	e000      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800316c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800316e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10a      	bne.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003176:	4b96      	ldr	r3, [pc, #600]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800317a:	f023 0107 	bic.w	r1, r3, #7
 800317e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003182:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003184:	4a92      	ldr	r2, [pc, #584]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003186:	430b      	orrs	r3, r1
 8003188:	6553      	str	r3, [r2, #84]	@ 0x54
 800318a:	e003      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800318c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003190:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319c:	f002 0304 	and.w	r3, r2, #4
 80031a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80031a4:	2300      	movs	r3, #0
 80031a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80031aa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4313      	orrs	r3, r2
 80031b2:	d044      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80031b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031bc:	2b05      	cmp	r3, #5
 80031be:	d825      	bhi.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80031c0:	a201      	add	r2, pc, #4	@ (adr r2, 80031c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80031c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c6:	bf00      	nop
 80031c8:	08003215 	.word	0x08003215
 80031cc:	080031e1 	.word	0x080031e1
 80031d0:	080031f7 	.word	0x080031f7
 80031d4:	08003215 	.word	0x08003215
 80031d8:	08003215 	.word	0x08003215
 80031dc:	08003215 	.word	0x08003215
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031e4:	3308      	adds	r3, #8
 80031e6:	2101      	movs	r1, #1
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 ff1d 	bl	8004028 <RCCEx_PLL2_Config>
 80031ee:	4603      	mov	r3, r0
 80031f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80031f4:	e00f      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031fa:	3328      	adds	r3, #40	@ 0x28
 80031fc:	2101      	movs	r1, #1
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 ffc4 	bl	800418c <RCCEx_PLL3_Config>
 8003204:	4603      	mov	r3, r0
 8003206:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800320a:	e004      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003212:	e000      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003216:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10b      	bne.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800321e:	4b6c      	ldr	r3, [pc, #432]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003222:	f023 0107 	bic.w	r1, r3, #7
 8003226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800322a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800322e:	4a68      	ldr	r2, [pc, #416]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003230:	430b      	orrs	r3, r1
 8003232:	6593      	str	r3, [r2, #88]	@ 0x58
 8003234:	e003      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003236:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800323a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800323e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003246:	f002 0320 	and.w	r3, r2, #32
 800324a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800324e:	2300      	movs	r3, #0
 8003250:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003254:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003258:	460b      	mov	r3, r1
 800325a:	4313      	orrs	r3, r2
 800325c:	d055      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800325e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003266:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800326a:	d033      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800326c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003270:	d82c      	bhi.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003272:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003276:	d02f      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003278:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800327c:	d826      	bhi.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800327e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003282:	d02b      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003284:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003288:	d820      	bhi.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800328a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800328e:	d012      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003290:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003294:	d81a      	bhi.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003296:	2b00      	cmp	r3, #0
 8003298:	d022      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800329a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800329e:	d115      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032a4:	3308      	adds	r3, #8
 80032a6:	2100      	movs	r1, #0
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 febd 	bl	8004028 <RCCEx_PLL2_Config>
 80032ae:	4603      	mov	r3, r0
 80032b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80032b4:	e015      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ba:	3328      	adds	r3, #40	@ 0x28
 80032bc:	2102      	movs	r1, #2
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 ff64 	bl	800418c <RCCEx_PLL3_Config>
 80032c4:	4603      	mov	r3, r0
 80032c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80032ca:	e00a      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032d2:	e006      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80032d4:	bf00      	nop
 80032d6:	e004      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80032d8:	bf00      	nop
 80032da:	e002      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80032dc:	bf00      	nop
 80032de:	e000      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80032e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10b      	bne.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032ea:	4b39      	ldr	r3, [pc, #228]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ee:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80032f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032fa:	4a35      	ldr	r2, [pc, #212]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032fc:	430b      	orrs	r3, r1
 80032fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8003300:	e003      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003302:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003306:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800330a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800330e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003312:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003316:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800331a:	2300      	movs	r3, #0
 800331c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003320:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003324:	460b      	mov	r3, r1
 8003326:	4313      	orrs	r3, r2
 8003328:	d058      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800332a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800332e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003332:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003336:	d033      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003338:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800333c:	d82c      	bhi.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800333e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003342:	d02f      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003344:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003348:	d826      	bhi.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800334a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800334e:	d02b      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003350:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003354:	d820      	bhi.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003356:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800335a:	d012      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800335c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003360:	d81a      	bhi.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003362:	2b00      	cmp	r3, #0
 8003364:	d022      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003366:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800336a:	d115      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800336c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003370:	3308      	adds	r3, #8
 8003372:	2100      	movs	r1, #0
 8003374:	4618      	mov	r0, r3
 8003376:	f000 fe57 	bl	8004028 <RCCEx_PLL2_Config>
 800337a:	4603      	mov	r3, r0
 800337c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003380:	e015      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003386:	3328      	adds	r3, #40	@ 0x28
 8003388:	2102      	movs	r1, #2
 800338a:	4618      	mov	r0, r3
 800338c:	f000 fefe 	bl	800418c <RCCEx_PLL3_Config>
 8003390:	4603      	mov	r3, r0
 8003392:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003396:	e00a      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800339e:	e006      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80033a0:	bf00      	nop
 80033a2:	e004      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80033a4:	bf00      	nop
 80033a6:	e002      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80033a8:	bf00      	nop
 80033aa:	e000      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80033ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10e      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033b6:	4b06      	ldr	r3, [pc, #24]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ba:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80033be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80033c6:	4a02      	ldr	r2, [pc, #8]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033c8:	430b      	orrs	r3, r1
 80033ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80033cc:	e006      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80033ce:	bf00      	nop
 80033d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80033dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80033e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80033ec:	2300      	movs	r3, #0
 80033ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80033f2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80033f6:	460b      	mov	r3, r1
 80033f8:	4313      	orrs	r3, r2
 80033fa:	d055      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80033fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003400:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003404:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003408:	d033      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800340a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800340e:	d82c      	bhi.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003410:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003414:	d02f      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003416:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800341a:	d826      	bhi.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800341c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003420:	d02b      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003422:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003426:	d820      	bhi.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003428:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800342c:	d012      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800342e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003432:	d81a      	bhi.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003434:	2b00      	cmp	r3, #0
 8003436:	d022      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003438:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800343c:	d115      	bne.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800343e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003442:	3308      	adds	r3, #8
 8003444:	2100      	movs	r1, #0
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fdee 	bl	8004028 <RCCEx_PLL2_Config>
 800344c:	4603      	mov	r3, r0
 800344e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003452:	e015      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003458:	3328      	adds	r3, #40	@ 0x28
 800345a:	2102      	movs	r1, #2
 800345c:	4618      	mov	r0, r3
 800345e:	f000 fe95 	bl	800418c <RCCEx_PLL3_Config>
 8003462:	4603      	mov	r3, r0
 8003464:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003468:	e00a      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003470:	e006      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003472:	bf00      	nop
 8003474:	e004      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003476:	bf00      	nop
 8003478:	e002      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800347a:	bf00      	nop
 800347c:	e000      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800347e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003480:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10b      	bne.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003488:	4ba1      	ldr	r3, [pc, #644]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800348a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800348c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003494:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003498:	4a9d      	ldr	r2, [pc, #628]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800349a:	430b      	orrs	r3, r1
 800349c:	6593      	str	r3, [r2, #88]	@ 0x58
 800349e:	e003      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80034a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b0:	f002 0308 	and.w	r3, r2, #8
 80034b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80034b8:	2300      	movs	r3, #0
 80034ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80034be:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80034c2:	460b      	mov	r3, r1
 80034c4:	4313      	orrs	r3, r2
 80034c6:	d01e      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80034c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034d4:	d10c      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80034d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034da:	3328      	adds	r3, #40	@ 0x28
 80034dc:	2102      	movs	r1, #2
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 fe54 	bl	800418c <RCCEx_PLL3_Config>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d002      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80034f0:	4b87      	ldr	r3, [pc, #540]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003500:	4a83      	ldr	r2, [pc, #524]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003502:	430b      	orrs	r3, r1
 8003504:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800350a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350e:	f002 0310 	and.w	r3, r2, #16
 8003512:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003516:	2300      	movs	r3, #0
 8003518:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800351c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003520:	460b      	mov	r3, r1
 8003522:	4313      	orrs	r3, r2
 8003524:	d01e      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800352a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800352e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003532:	d10c      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003538:	3328      	adds	r3, #40	@ 0x28
 800353a:	2102      	movs	r1, #2
 800353c:	4618      	mov	r0, r3
 800353e:	f000 fe25 	bl	800418c <RCCEx_PLL3_Config>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d002      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800354e:	4b70      	ldr	r3, [pc, #448]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003552:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800355a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800355e:	4a6c      	ldr	r2, [pc, #432]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003560:	430b      	orrs	r3, r1
 8003562:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003570:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003574:	2300      	movs	r3, #0
 8003576:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800357a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800357e:	460b      	mov	r3, r1
 8003580:	4313      	orrs	r3, r2
 8003582:	d03e      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003588:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800358c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003590:	d022      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003592:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003596:	d81b      	bhi.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800359c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035a0:	d00b      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80035a2:	e015      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a8:	3308      	adds	r3, #8
 80035aa:	2100      	movs	r1, #0
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 fd3b 	bl	8004028 <RCCEx_PLL2_Config>
 80035b2:	4603      	mov	r3, r0
 80035b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80035b8:	e00f      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035be:	3328      	adds	r3, #40	@ 0x28
 80035c0:	2102      	movs	r1, #2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 fde2 	bl	800418c <RCCEx_PLL3_Config>
 80035c8:	4603      	mov	r3, r0
 80035ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80035ce:	e004      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035d6:	e000      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80035d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10b      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035e2:	4b4b      	ldr	r3, [pc, #300]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80035ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80035f2:	4a47      	ldr	r2, [pc, #284]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035f4:	430b      	orrs	r3, r1
 80035f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80035f8:	e003      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800360e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003610:	2300      	movs	r3, #0
 8003612:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003614:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003618:	460b      	mov	r3, r1
 800361a:	4313      	orrs	r3, r2
 800361c:	d03b      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800361e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003626:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800362a:	d01f      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800362c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003630:	d818      	bhi.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003632:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003636:	d003      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003638:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800363c:	d007      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800363e:	e011      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003640:	4b33      	ldr	r3, [pc, #204]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003644:	4a32      	ldr	r2, [pc, #200]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003646:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800364a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800364c:	e00f      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800364e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003652:	3328      	adds	r3, #40	@ 0x28
 8003654:	2101      	movs	r1, #1
 8003656:	4618      	mov	r0, r3
 8003658:	f000 fd98 	bl	800418c <RCCEx_PLL3_Config>
 800365c:	4603      	mov	r3, r0
 800365e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003662:	e004      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800366a:	e000      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800366c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800366e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10b      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003676:	4b26      	ldr	r3, [pc, #152]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800367a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800367e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003686:	4a22      	ldr	r2, [pc, #136]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003688:	430b      	orrs	r3, r1
 800368a:	6553      	str	r3, [r2, #84]	@ 0x54
 800368c:	e003      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800368e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003692:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800369a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80036a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80036a4:	2300      	movs	r3, #0
 80036a6:	677b      	str	r3, [r7, #116]	@ 0x74
 80036a8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80036ac:	460b      	mov	r3, r1
 80036ae:	4313      	orrs	r3, r2
 80036b0:	d034      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80036b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80036bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036c0:	d007      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80036c2:	e011      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c4:	4b12      	ldr	r3, [pc, #72]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c8:	4a11      	ldr	r2, [pc, #68]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80036d0:	e00e      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d6:	3308      	adds	r3, #8
 80036d8:	2102      	movs	r1, #2
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fca4 	bl	8004028 <RCCEx_PLL2_Config>
 80036e0:	4603      	mov	r3, r0
 80036e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80036e6:	e003      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10d      	bne.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80036f8:	4b05      	ldr	r3, [pc, #20]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036fc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003706:	4a02      	ldr	r2, [pc, #8]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003708:	430b      	orrs	r3, r1
 800370a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800370c:	e006      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800370e:	bf00      	nop
 8003710:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003714:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003718:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800371c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003724:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003728:	66bb      	str	r3, [r7, #104]	@ 0x68
 800372a:	2300      	movs	r3, #0
 800372c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800372e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003732:	460b      	mov	r3, r1
 8003734:	4313      	orrs	r3, r2
 8003736:	d00c      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800373c:	3328      	adds	r3, #40	@ 0x28
 800373e:	2102      	movs	r1, #2
 8003740:	4618      	mov	r0, r3
 8003742:	f000 fd23 	bl	800418c <RCCEx_PLL3_Config>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800375e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003760:	2300      	movs	r3, #0
 8003762:	667b      	str	r3, [r7, #100]	@ 0x64
 8003764:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003768:	460b      	mov	r3, r1
 800376a:	4313      	orrs	r3, r2
 800376c:	d038      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800376e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003772:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003776:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800377a:	d018      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800377c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003780:	d811      	bhi.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003782:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003786:	d014      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003788:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800378c:	d80b      	bhi.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800378e:	2b00      	cmp	r3, #0
 8003790:	d011      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003796:	d106      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003798:	4bc3      	ldr	r3, [pc, #780]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800379a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379c:	4ac2      	ldr	r2, [pc, #776]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800379e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80037a4:	e008      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037ac:	e004      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80037ae:	bf00      	nop
 80037b0:	e002      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80037b2:	bf00      	nop
 80037b4:	e000      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80037b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10b      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037c0:	4bb9      	ldr	r3, [pc, #740]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80037c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037d0:	4ab5      	ldr	r2, [pc, #724]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037d2:	430b      	orrs	r3, r1
 80037d4:	6553      	str	r3, [r2, #84]	@ 0x54
 80037d6:	e003      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80037ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80037ee:	2300      	movs	r3, #0
 80037f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037f2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80037f6:	460b      	mov	r3, r1
 80037f8:	4313      	orrs	r3, r2
 80037fa:	d009      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037fc:	4baa      	ldr	r3, [pc, #680]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003800:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003808:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800380a:	4aa7      	ldr	r2, [pc, #668]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800380c:	430b      	orrs	r3, r1
 800380e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003818:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800381c:	653b      	str	r3, [r7, #80]	@ 0x50
 800381e:	2300      	movs	r3, #0
 8003820:	657b      	str	r3, [r7, #84]	@ 0x54
 8003822:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003826:	460b      	mov	r3, r1
 8003828:	4313      	orrs	r3, r2
 800382a:	d00a      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800382c:	4b9e      	ldr	r3, [pc, #632]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003838:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800383c:	4a9a      	ldr	r2, [pc, #616]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800383e:	430b      	orrs	r3, r1
 8003840:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800384e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003850:	2300      	movs	r3, #0
 8003852:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003854:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003858:	460b      	mov	r3, r1
 800385a:	4313      	orrs	r3, r2
 800385c:	d009      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800385e:	4b92      	ldr	r3, [pc, #584]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003860:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003862:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800386a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800386c:	4a8e      	ldr	r2, [pc, #568]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800386e:	430b      	orrs	r3, r1
 8003870:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800387e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003880:	2300      	movs	r3, #0
 8003882:	647b      	str	r3, [r7, #68]	@ 0x44
 8003884:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003888:	460b      	mov	r3, r1
 800388a:	4313      	orrs	r3, r2
 800388c:	d00e      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800388e:	4b86      	ldr	r3, [pc, #536]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	4a85      	ldr	r2, [pc, #532]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003894:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003898:	6113      	str	r3, [r2, #16]
 800389a:	4b83      	ldr	r3, [pc, #524]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800389c:	6919      	ldr	r1, [r3, #16]
 800389e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80038a6:	4a80      	ldr	r2, [pc, #512]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038a8:	430b      	orrs	r3, r1
 80038aa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80038ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80038b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038ba:	2300      	movs	r3, #0
 80038bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038be:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80038c2:	460b      	mov	r3, r1
 80038c4:	4313      	orrs	r3, r2
 80038c6:	d009      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80038c8:	4b77      	ldr	r3, [pc, #476]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038cc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80038d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d6:	4a74      	ldr	r2, [pc, #464]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038d8:	430b      	orrs	r3, r1
 80038da:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80038e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80038ea:	2300      	movs	r3, #0
 80038ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80038ee:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80038f2:	460b      	mov	r3, r1
 80038f4:	4313      	orrs	r3, r2
 80038f6:	d00a      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038f8:	4b6b      	ldr	r3, [pc, #428]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038fc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003904:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003908:	4a67      	ldr	r2, [pc, #412]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800390a:	430b      	orrs	r3, r1
 800390c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800390e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003916:	2100      	movs	r1, #0
 8003918:	62b9      	str	r1, [r7, #40]	@ 0x28
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003920:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003924:	460b      	mov	r3, r1
 8003926:	4313      	orrs	r3, r2
 8003928:	d011      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800392a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392e:	3308      	adds	r3, #8
 8003930:	2100      	movs	r1, #0
 8003932:	4618      	mov	r0, r3
 8003934:	f000 fb78 	bl	8004028 <RCCEx_PLL2_Config>
 8003938:	4603      	mov	r3, r0
 800393a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800393e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800394a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800394e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003956:	2100      	movs	r1, #0
 8003958:	6239      	str	r1, [r7, #32]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003960:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003964:	460b      	mov	r3, r1
 8003966:	4313      	orrs	r3, r2
 8003968:	d011      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800396a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800396e:	3308      	adds	r3, #8
 8003970:	2101      	movs	r1, #1
 8003972:	4618      	mov	r0, r3
 8003974:	f000 fb58 	bl	8004028 <RCCEx_PLL2_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800397e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800398a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800398e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003996:	2100      	movs	r1, #0
 8003998:	61b9      	str	r1, [r7, #24]
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	61fb      	str	r3, [r7, #28]
 80039a0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80039a4:	460b      	mov	r3, r1
 80039a6:	4313      	orrs	r3, r2
 80039a8:	d011      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ae:	3308      	adds	r3, #8
 80039b0:	2102      	movs	r1, #2
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 fb38 	bl	8004028 <RCCEx_PLL2_Config>
 80039b8:	4603      	mov	r3, r0
 80039ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80039be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80039ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d6:	2100      	movs	r1, #0
 80039d8:	6139      	str	r1, [r7, #16]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80039e4:	460b      	mov	r3, r1
 80039e6:	4313      	orrs	r3, r2
 80039e8:	d011      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ee:	3328      	adds	r3, #40	@ 0x28
 80039f0:	2100      	movs	r1, #0
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fbca 	bl	800418c <RCCEx_PLL3_Config>
 80039f8:	4603      	mov	r3, r0
 80039fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80039fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a16:	2100      	movs	r1, #0
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	f003 0310 	and.w	r3, r3, #16
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003a24:	460b      	mov	r3, r1
 8003a26:	4313      	orrs	r3, r2
 8003a28:	d011      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2e:	3328      	adds	r3, #40	@ 0x28
 8003a30:	2101      	movs	r1, #1
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 fbaa 	bl	800418c <RCCEx_PLL3_Config>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a56:	2100      	movs	r1, #0
 8003a58:	6039      	str	r1, [r7, #0]
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	607b      	str	r3, [r7, #4]
 8003a60:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003a64:	460b      	mov	r3, r1
 8003a66:	4313      	orrs	r3, r2
 8003a68:	d011      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a6e:	3328      	adds	r3, #40	@ 0x28
 8003a70:	2102      	movs	r1, #2
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 fb8a 	bl	800418c <RCCEx_PLL3_Config>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003a8e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	e000      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aa8:	58024400 	.word	0x58024400

08003aac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003ab0:	f7fe fd96 	bl	80025e0 <HAL_RCC_GetHCLKFreq>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	4b06      	ldr	r3, [pc, #24]	@ (8003ad0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	091b      	lsrs	r3, r3, #4
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	4904      	ldr	r1, [pc, #16]	@ (8003ad4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003ac2:	5ccb      	ldrb	r3, [r1, r3]
 8003ac4:	f003 031f 	and.w	r3, r3, #31
 8003ac8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	58024400 	.word	0x58024400
 8003ad4:	0800a770 	.word	0x0800a770

08003ad8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b089      	sub	sp, #36	@ 0x24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ae0:	4ba1      	ldr	r3, [pc, #644]	@ (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae4:	f003 0303 	and.w	r3, r3, #3
 8003ae8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003aea:	4b9f      	ldr	r3, [pc, #636]	@ (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aee:	0b1b      	lsrs	r3, r3, #12
 8003af0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003af4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003af6:	4b9c      	ldr	r3, [pc, #624]	@ (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003afa:	091b      	lsrs	r3, r3, #4
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003b02:	4b99      	ldr	r3, [pc, #612]	@ (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b06:	08db      	lsrs	r3, r3, #3
 8003b08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	fb02 f303 	mul.w	r3, r2, r3
 8003b12:	ee07 3a90 	vmov	s15, r3
 8003b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 8111 	beq.w	8003d48 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	f000 8083 	beq.w	8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	f200 80a1 	bhi.w	8003c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d056      	beq.n	8003bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003b42:	e099      	b.n	8003c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b44:	4b88      	ldr	r3, [pc, #544]	@ (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0320 	and.w	r3, r3, #32
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d02d      	beq.n	8003bac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b50:	4b85      	ldr	r3, [pc, #532]	@ (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	08db      	lsrs	r3, r3, #3
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	4a84      	ldr	r2, [pc, #528]	@ (8003d6c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b60:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	ee07 3a90 	vmov	s15, r3
 8003b68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	ee07 3a90 	vmov	s15, r3
 8003b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b7a:	4b7b      	ldr	r3, [pc, #492]	@ (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b8e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003d70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003baa:	e087      	b.n	8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	ee07 3a90 	vmov	s15, r3
 8003bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bb6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003d74 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bbe:	4b6a      	ldr	r3, [pc, #424]	@ (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc6:	ee07 3a90 	vmov	s15, r3
 8003bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bd2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003d70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bee:	e065      	b.n	8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	ee07 3a90 	vmov	s15, r3
 8003bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bfa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003d78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c02:	4b59      	ldr	r3, [pc, #356]	@ (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c0a:	ee07 3a90 	vmov	s15, r3
 8003c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c16:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003d70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c32:	e043      	b.n	8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	ee07 3a90 	vmov	s15, r3
 8003c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c3e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003d7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c46:	4b48      	ldr	r3, [pc, #288]	@ (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c4e:	ee07 3a90 	vmov	s15, r3
 8003c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c5a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003d70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c76:	e021      	b.n	8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	ee07 3a90 	vmov	s15, r3
 8003c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c82:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003d78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c8a:	4b37      	ldr	r3, [pc, #220]	@ (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c92:	ee07 3a90 	vmov	s15, r3
 8003c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c9e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003d70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003caa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003cbc:	4b2a      	ldr	r3, [pc, #168]	@ (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc0:	0a5b      	lsrs	r3, r3, #9
 8003cc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cc6:	ee07 3a90 	vmov	s15, r3
 8003cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003cd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ce2:	ee17 2a90 	vmov	r2, s15
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003cea:	4b1f      	ldr	r3, [pc, #124]	@ (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cee:	0c1b      	lsrs	r3, r3, #16
 8003cf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cf4:	ee07 3a90 	vmov	s15, r3
 8003cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cfc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d04:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d10:	ee17 2a90 	vmov	r2, s15
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003d18:	4b13      	ldr	r3, [pc, #76]	@ (8003d68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1c:	0e1b      	lsrs	r3, r3, #24
 8003d1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d22:	ee07 3a90 	vmov	s15, r3
 8003d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d32:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d3e:	ee17 2a90 	vmov	r2, s15
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003d46:	e008      	b.n	8003d5a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	609a      	str	r2, [r3, #8]
}
 8003d5a:	bf00      	nop
 8003d5c:	3724      	adds	r7, #36	@ 0x24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	58024400 	.word	0x58024400
 8003d6c:	03d09000 	.word	0x03d09000
 8003d70:	46000000 	.word	0x46000000
 8003d74:	4c742400 	.word	0x4c742400
 8003d78:	4a742400 	.word	0x4a742400
 8003d7c:	4af42400 	.word	0x4af42400

08003d80 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b089      	sub	sp, #36	@ 0x24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d88:	4ba1      	ldr	r3, [pc, #644]	@ (8004010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d8c:	f003 0303 	and.w	r3, r3, #3
 8003d90:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003d92:	4b9f      	ldr	r3, [pc, #636]	@ (8004010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d96:	0d1b      	lsrs	r3, r3, #20
 8003d98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d9c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003d9e:	4b9c      	ldr	r3, [pc, #624]	@ (8004010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da2:	0a1b      	lsrs	r3, r3, #8
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003daa:	4b99      	ldr	r3, [pc, #612]	@ (8004010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dae:	08db      	lsrs	r3, r3, #3
 8003db0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	fb02 f303 	mul.w	r3, r2, r3
 8003dba:	ee07 3a90 	vmov	s15, r3
 8003dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dc2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 8111 	beq.w	8003ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	f000 8083 	beq.w	8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	f200 80a1 	bhi.w	8003f20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d056      	beq.n	8003e98 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003dea:	e099      	b.n	8003f20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dec:	4b88      	ldr	r3, [pc, #544]	@ (8004010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0320 	and.w	r3, r3, #32
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d02d      	beq.n	8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003df8:	4b85      	ldr	r3, [pc, #532]	@ (8004010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	08db      	lsrs	r3, r3, #3
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	4a84      	ldr	r2, [pc, #528]	@ (8004014 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
 8003e08:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	ee07 3a90 	vmov	s15, r3
 8003e10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	ee07 3a90 	vmov	s15, r3
 8003e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e22:	4b7b      	ldr	r3, [pc, #492]	@ (8004010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e2a:	ee07 3a90 	vmov	s15, r3
 8003e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e36:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004018 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003e52:	e087      	b.n	8003f64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	ee07 3a90 	vmov	s15, r3
 8003e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e5e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800401c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e66:	4b6a      	ldr	r3, [pc, #424]	@ (8004010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e6e:	ee07 3a90 	vmov	s15, r3
 8003e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e7a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004018 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e96:	e065      	b.n	8003f64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	ee07 3a90 	vmov	s15, r3
 8003e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ea2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004020 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eaa:	4b59      	ldr	r3, [pc, #356]	@ (8004010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb2:	ee07 3a90 	vmov	s15, r3
 8003eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ebe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004018 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003eda:	e043      	b.n	8003f64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	ee07 3a90 	vmov	s15, r3
 8003ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ee6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004024 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eee:	4b48      	ldr	r3, [pc, #288]	@ (8004010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ef6:	ee07 3a90 	vmov	s15, r3
 8003efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f02:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004018 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f1e:	e021      	b.n	8003f64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	ee07 3a90 	vmov	s15, r3
 8003f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f2a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004020 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f32:	4b37      	ldr	r3, [pc, #220]	@ (8004010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f3a:	ee07 3a90 	vmov	s15, r3
 8003f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f46:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004018 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f62:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003f64:	4b2a      	ldr	r3, [pc, #168]	@ (8004010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f68:	0a5b      	lsrs	r3, r3, #9
 8003f6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f6e:	ee07 3a90 	vmov	s15, r3
 8003f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f8a:	ee17 2a90 	vmov	r2, s15
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003f92:	4b1f      	ldr	r3, [pc, #124]	@ (8004010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	0c1b      	lsrs	r3, r3, #16
 8003f98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f9c:	ee07 3a90 	vmov	s15, r3
 8003fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fa4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fa8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fac:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fb8:	ee17 2a90 	vmov	r2, s15
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003fc0:	4b13      	ldr	r3, [pc, #76]	@ (8004010 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc4:	0e1b      	lsrs	r3, r3, #24
 8003fc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fca:	ee07 3a90 	vmov	s15, r3
 8003fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fda:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fe6:	ee17 2a90 	vmov	r2, s15
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003fee:	e008      	b.n	8004002 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	609a      	str	r2, [r3, #8]
}
 8004002:	bf00      	nop
 8004004:	3724      	adds	r7, #36	@ 0x24
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	58024400 	.word	0x58024400
 8004014:	03d09000 	.word	0x03d09000
 8004018:	46000000 	.word	0x46000000
 800401c:	4c742400 	.word	0x4c742400
 8004020:	4a742400 	.word	0x4a742400
 8004024:	4af42400 	.word	0x4af42400

08004028 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004036:	4b53      	ldr	r3, [pc, #332]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 8004038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	2b03      	cmp	r3, #3
 8004040:	d101      	bne.n	8004046 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e099      	b.n	800417a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004046:	4b4f      	ldr	r3, [pc, #316]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a4e      	ldr	r2, [pc, #312]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 800404c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004050:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004052:	f7fd f817 	bl	8001084 <HAL_GetTick>
 8004056:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004058:	e008      	b.n	800406c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800405a:	f7fd f813 	bl	8001084 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d901      	bls.n	800406c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e086      	b.n	800417a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800406c:	4b45      	ldr	r3, [pc, #276]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1f0      	bne.n	800405a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004078:	4b42      	ldr	r3, [pc, #264]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 800407a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800407c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	031b      	lsls	r3, r3, #12
 8004086:	493f      	ldr	r1, [pc, #252]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 8004088:	4313      	orrs	r3, r2
 800408a:	628b      	str	r3, [r1, #40]	@ 0x28
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	3b01      	subs	r3, #1
 8004092:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	3b01      	subs	r3, #1
 800409c:	025b      	lsls	r3, r3, #9
 800409e:	b29b      	uxth	r3, r3
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	041b      	lsls	r3, r3, #16
 80040aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	3b01      	subs	r3, #1
 80040b6:	061b      	lsls	r3, r3, #24
 80040b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80040bc:	4931      	ldr	r1, [pc, #196]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80040c2:	4b30      	ldr	r3, [pc, #192]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 80040c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	492d      	ldr	r1, [pc, #180]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80040d4:	4b2b      	ldr	r3, [pc, #172]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 80040d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d8:	f023 0220 	bic.w	r2, r3, #32
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	4928      	ldr	r1, [pc, #160]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80040e6:	4b27      	ldr	r3, [pc, #156]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 80040e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ea:	4a26      	ldr	r2, [pc, #152]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 80040ec:	f023 0310 	bic.w	r3, r3, #16
 80040f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80040f2:	4b24      	ldr	r3, [pc, #144]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 80040f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040f6:	4b24      	ldr	r3, [pc, #144]	@ (8004188 <RCCEx_PLL2_Config+0x160>)
 80040f8:	4013      	ands	r3, r2
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	69d2      	ldr	r2, [r2, #28]
 80040fe:	00d2      	lsls	r2, r2, #3
 8004100:	4920      	ldr	r1, [pc, #128]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 8004102:	4313      	orrs	r3, r2
 8004104:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004106:	4b1f      	ldr	r3, [pc, #124]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 8004108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410a:	4a1e      	ldr	r2, [pc, #120]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 800410c:	f043 0310 	orr.w	r3, r3, #16
 8004110:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d106      	bne.n	8004126 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004118:	4b1a      	ldr	r3, [pc, #104]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 800411a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411c:	4a19      	ldr	r2, [pc, #100]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 800411e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004122:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004124:	e00f      	b.n	8004146 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d106      	bne.n	800413a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800412c:	4b15      	ldr	r3, [pc, #84]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 800412e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004130:	4a14      	ldr	r2, [pc, #80]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 8004132:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004136:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004138:	e005      	b.n	8004146 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800413a:	4b12      	ldr	r3, [pc, #72]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 800413c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413e:	4a11      	ldr	r2, [pc, #68]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 8004140:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004144:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004146:	4b0f      	ldr	r3, [pc, #60]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a0e      	ldr	r2, [pc, #56]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 800414c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004150:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004152:	f7fc ff97 	bl	8001084 <HAL_GetTick>
 8004156:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004158:	e008      	b.n	800416c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800415a:	f7fc ff93 	bl	8001084 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e006      	b.n	800417a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800416c:	4b05      	ldr	r3, [pc, #20]	@ (8004184 <RCCEx_PLL2_Config+0x15c>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0f0      	beq.n	800415a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004178:	7bfb      	ldrb	r3, [r7, #15]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	58024400 	.word	0x58024400
 8004188:	ffff0007 	.word	0xffff0007

0800418c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800419a:	4b53      	ldr	r3, [pc, #332]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 800419c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	2b03      	cmp	r3, #3
 80041a4:	d101      	bne.n	80041aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e099      	b.n	80042de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80041aa:	4b4f      	ldr	r3, [pc, #316]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a4e      	ldr	r2, [pc, #312]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 80041b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041b6:	f7fc ff65 	bl	8001084 <HAL_GetTick>
 80041ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80041bc:	e008      	b.n	80041d0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80041be:	f7fc ff61 	bl	8001084 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e086      	b.n	80042de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80041d0:	4b45      	ldr	r3, [pc, #276]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1f0      	bne.n	80041be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80041dc:	4b42      	ldr	r3, [pc, #264]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 80041de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	051b      	lsls	r3, r3, #20
 80041ea:	493f      	ldr	r1, [pc, #252]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	3b01      	subs	r3, #1
 80041f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	3b01      	subs	r3, #1
 8004200:	025b      	lsls	r3, r3, #9
 8004202:	b29b      	uxth	r3, r3
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	3b01      	subs	r3, #1
 800420c:	041b      	lsls	r3, r3, #16
 800420e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	3b01      	subs	r3, #1
 800421a:	061b      	lsls	r3, r3, #24
 800421c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004220:	4931      	ldr	r1, [pc, #196]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 8004222:	4313      	orrs	r3, r2
 8004224:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004226:	4b30      	ldr	r3, [pc, #192]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 8004228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	492d      	ldr	r1, [pc, #180]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 8004234:	4313      	orrs	r3, r2
 8004236:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004238:	4b2b      	ldr	r3, [pc, #172]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 800423a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	4928      	ldr	r1, [pc, #160]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 8004246:	4313      	orrs	r3, r2
 8004248:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800424a:	4b27      	ldr	r3, [pc, #156]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 800424c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424e:	4a26      	ldr	r2, [pc, #152]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 8004250:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004254:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004256:	4b24      	ldr	r3, [pc, #144]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 8004258:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800425a:	4b24      	ldr	r3, [pc, #144]	@ (80042ec <RCCEx_PLL3_Config+0x160>)
 800425c:	4013      	ands	r3, r2
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	69d2      	ldr	r2, [r2, #28]
 8004262:	00d2      	lsls	r2, r2, #3
 8004264:	4920      	ldr	r1, [pc, #128]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 8004266:	4313      	orrs	r3, r2
 8004268:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800426a:	4b1f      	ldr	r3, [pc, #124]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 800426c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426e:	4a1e      	ldr	r2, [pc, #120]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 8004270:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004274:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d106      	bne.n	800428a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800427c:	4b1a      	ldr	r3, [pc, #104]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 800427e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004280:	4a19      	ldr	r2, [pc, #100]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 8004282:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004286:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004288:	e00f      	b.n	80042aa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d106      	bne.n	800429e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004290:	4b15      	ldr	r3, [pc, #84]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 8004292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004294:	4a14      	ldr	r2, [pc, #80]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 8004296:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800429a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800429c:	e005      	b.n	80042aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800429e:	4b12      	ldr	r3, [pc, #72]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 80042a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a2:	4a11      	ldr	r2, [pc, #68]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 80042a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80042aa:	4b0f      	ldr	r3, [pc, #60]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a0e      	ldr	r2, [pc, #56]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 80042b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042b6:	f7fc fee5 	bl	8001084 <HAL_GetTick>
 80042ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80042bc:	e008      	b.n	80042d0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80042be:	f7fc fee1 	bl	8001084 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e006      	b.n	80042de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80042d0:	4b05      	ldr	r3, [pc, #20]	@ (80042e8 <RCCEx_PLL3_Config+0x15c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0f0      	beq.n	80042be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	58024400 	.word	0x58024400
 80042ec:	ffff0007 	.word	0xffff0007

080042f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e049      	b.n	8004396 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d106      	bne.n	800431c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7fc fcda 	bl	8000cd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3304      	adds	r3, #4
 800432c:	4619      	mov	r1, r3
 800432e:	4610      	mov	r0, r2
 8004330:	f000 f836 	bl	80043a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a46      	ldr	r2, [pc, #280]	@ (80044cc <TIM_Base_SetConfig+0x12c>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d013      	beq.n	80043e0 <TIM_Base_SetConfig+0x40>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043be:	d00f      	beq.n	80043e0 <TIM_Base_SetConfig+0x40>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a43      	ldr	r2, [pc, #268]	@ (80044d0 <TIM_Base_SetConfig+0x130>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d00b      	beq.n	80043e0 <TIM_Base_SetConfig+0x40>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a42      	ldr	r2, [pc, #264]	@ (80044d4 <TIM_Base_SetConfig+0x134>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d007      	beq.n	80043e0 <TIM_Base_SetConfig+0x40>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a41      	ldr	r2, [pc, #260]	@ (80044d8 <TIM_Base_SetConfig+0x138>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d003      	beq.n	80043e0 <TIM_Base_SetConfig+0x40>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a40      	ldr	r2, [pc, #256]	@ (80044dc <TIM_Base_SetConfig+0x13c>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d108      	bne.n	80043f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a35      	ldr	r2, [pc, #212]	@ (80044cc <TIM_Base_SetConfig+0x12c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d01f      	beq.n	800443a <TIM_Base_SetConfig+0x9a>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004400:	d01b      	beq.n	800443a <TIM_Base_SetConfig+0x9a>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a32      	ldr	r2, [pc, #200]	@ (80044d0 <TIM_Base_SetConfig+0x130>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d017      	beq.n	800443a <TIM_Base_SetConfig+0x9a>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a31      	ldr	r2, [pc, #196]	@ (80044d4 <TIM_Base_SetConfig+0x134>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d013      	beq.n	800443a <TIM_Base_SetConfig+0x9a>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a30      	ldr	r2, [pc, #192]	@ (80044d8 <TIM_Base_SetConfig+0x138>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d00f      	beq.n	800443a <TIM_Base_SetConfig+0x9a>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a2f      	ldr	r2, [pc, #188]	@ (80044dc <TIM_Base_SetConfig+0x13c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d00b      	beq.n	800443a <TIM_Base_SetConfig+0x9a>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a2e      	ldr	r2, [pc, #184]	@ (80044e0 <TIM_Base_SetConfig+0x140>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d007      	beq.n	800443a <TIM_Base_SetConfig+0x9a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a2d      	ldr	r2, [pc, #180]	@ (80044e4 <TIM_Base_SetConfig+0x144>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d003      	beq.n	800443a <TIM_Base_SetConfig+0x9a>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a2c      	ldr	r2, [pc, #176]	@ (80044e8 <TIM_Base_SetConfig+0x148>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d108      	bne.n	800444c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004440:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4313      	orrs	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a16      	ldr	r2, [pc, #88]	@ (80044cc <TIM_Base_SetConfig+0x12c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d00f      	beq.n	8004498 <TIM_Base_SetConfig+0xf8>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a18      	ldr	r2, [pc, #96]	@ (80044dc <TIM_Base_SetConfig+0x13c>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d00b      	beq.n	8004498 <TIM_Base_SetConfig+0xf8>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a17      	ldr	r2, [pc, #92]	@ (80044e0 <TIM_Base_SetConfig+0x140>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d007      	beq.n	8004498 <TIM_Base_SetConfig+0xf8>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a16      	ldr	r2, [pc, #88]	@ (80044e4 <TIM_Base_SetConfig+0x144>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d003      	beq.n	8004498 <TIM_Base_SetConfig+0xf8>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a15      	ldr	r2, [pc, #84]	@ (80044e8 <TIM_Base_SetConfig+0x148>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d103      	bne.n	80044a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d105      	bne.n	80044be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f023 0201 	bic.w	r2, r3, #1
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	611a      	str	r2, [r3, #16]
  }
}
 80044be:	bf00      	nop
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40010000 	.word	0x40010000
 80044d0:	40000400 	.word	0x40000400
 80044d4:	40000800 	.word	0x40000800
 80044d8:	40000c00 	.word	0x40000c00
 80044dc:	40010400 	.word	0x40010400
 80044e0:	40014000 	.word	0x40014000
 80044e4:	40014400 	.word	0x40014400
 80044e8:	40014800 	.word	0x40014800

080044ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e042      	b.n	8004584 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004504:	2b00      	cmp	r3, #0
 8004506:	d106      	bne.n	8004516 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7fc fc4b 	bl	8000dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2224      	movs	r2, #36	@ 0x24
 800451a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0201 	bic.w	r2, r2, #1
 800452c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fe1e 	bl	8005178 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f8b3 	bl	80046a8 <UART_SetConfig>
 8004542:	4603      	mov	r3, r0
 8004544:	2b01      	cmp	r3, #1
 8004546:	d101      	bne.n	800454c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e01b      	b.n	8004584 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800455a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800456a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0201 	orr.w	r2, r2, #1
 800457a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 fe9d 	bl	80052bc <UART_CheckIdleState>
 8004582:	4603      	mov	r3, r0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b08a      	sub	sp, #40	@ 0x28
 8004590:	af02      	add	r7, sp, #8
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	603b      	str	r3, [r7, #0]
 8004598:	4613      	mov	r3, r2
 800459a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a2:	2b20      	cmp	r3, #32
 80045a4:	d17b      	bne.n	800469e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d002      	beq.n	80045b2 <HAL_UART_Transmit+0x26>
 80045ac:	88fb      	ldrh	r3, [r7, #6]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e074      	b.n	80046a0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2221      	movs	r2, #33	@ 0x21
 80045c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045c6:	f7fc fd5d 	bl	8001084 <HAL_GetTick>
 80045ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	88fa      	ldrh	r2, [r7, #6]
 80045d0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	88fa      	ldrh	r2, [r7, #6]
 80045d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045e4:	d108      	bne.n	80045f8 <HAL_UART_Transmit+0x6c>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d104      	bne.n	80045f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	e003      	b.n	8004600 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045fc:	2300      	movs	r3, #0
 80045fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004600:	e030      	b.n	8004664 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	2200      	movs	r2, #0
 800460a:	2180      	movs	r1, #128	@ 0x80
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 feff 	bl	8005410 <UART_WaitOnFlagUntilTimeout>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d005      	beq.n	8004624 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2220      	movs	r2, #32
 800461c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e03d      	b.n	80046a0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10b      	bne.n	8004642 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	881b      	ldrh	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004638:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	3302      	adds	r3, #2
 800463e:	61bb      	str	r3, [r7, #24]
 8004640:	e007      	b.n	8004652 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	781a      	ldrb	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	3301      	adds	r3, #1
 8004650:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800466a:	b29b      	uxth	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1c8      	bne.n	8004602 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	2200      	movs	r2, #0
 8004678:	2140      	movs	r1, #64	@ 0x40
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 fec8 	bl	8005410 <UART_WaitOnFlagUntilTimeout>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d005      	beq.n	8004692 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2220      	movs	r2, #32
 800468a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e006      	b.n	80046a0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2220      	movs	r2, #32
 8004696:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800469a:	2300      	movs	r3, #0
 800469c:	e000      	b.n	80046a0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800469e:	2302      	movs	r3, #2
  }
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3720      	adds	r7, #32
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046ac:	b092      	sub	sp, #72	@ 0x48
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	689a      	ldr	r2, [r3, #8]
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	431a      	orrs	r2, r3
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	431a      	orrs	r2, r3
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	4bbe      	ldr	r3, [pc, #760]	@ (80049d0 <UART_SetConfig+0x328>)
 80046d8:	4013      	ands	r3, r2
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	6812      	ldr	r2, [r2, #0]
 80046de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80046e0:	430b      	orrs	r3, r1
 80046e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4ab3      	ldr	r2, [pc, #716]	@ (80049d4 <UART_SetConfig+0x32c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d004      	beq.n	8004714 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004710:	4313      	orrs	r3, r2
 8004712:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689a      	ldr	r2, [r3, #8]
 800471a:	4baf      	ldr	r3, [pc, #700]	@ (80049d8 <UART_SetConfig+0x330>)
 800471c:	4013      	ands	r3, r2
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	6812      	ldr	r2, [r2, #0]
 8004722:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004724:	430b      	orrs	r3, r1
 8004726:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800472e:	f023 010f 	bic.w	r1, r3, #15
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4aa6      	ldr	r2, [pc, #664]	@ (80049dc <UART_SetConfig+0x334>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d177      	bne.n	8004838 <UART_SetConfig+0x190>
 8004748:	4ba5      	ldr	r3, [pc, #660]	@ (80049e0 <UART_SetConfig+0x338>)
 800474a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800474c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004750:	2b28      	cmp	r3, #40	@ 0x28
 8004752:	d86d      	bhi.n	8004830 <UART_SetConfig+0x188>
 8004754:	a201      	add	r2, pc, #4	@ (adr r2, 800475c <UART_SetConfig+0xb4>)
 8004756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475a:	bf00      	nop
 800475c:	08004801 	.word	0x08004801
 8004760:	08004831 	.word	0x08004831
 8004764:	08004831 	.word	0x08004831
 8004768:	08004831 	.word	0x08004831
 800476c:	08004831 	.word	0x08004831
 8004770:	08004831 	.word	0x08004831
 8004774:	08004831 	.word	0x08004831
 8004778:	08004831 	.word	0x08004831
 800477c:	08004809 	.word	0x08004809
 8004780:	08004831 	.word	0x08004831
 8004784:	08004831 	.word	0x08004831
 8004788:	08004831 	.word	0x08004831
 800478c:	08004831 	.word	0x08004831
 8004790:	08004831 	.word	0x08004831
 8004794:	08004831 	.word	0x08004831
 8004798:	08004831 	.word	0x08004831
 800479c:	08004811 	.word	0x08004811
 80047a0:	08004831 	.word	0x08004831
 80047a4:	08004831 	.word	0x08004831
 80047a8:	08004831 	.word	0x08004831
 80047ac:	08004831 	.word	0x08004831
 80047b0:	08004831 	.word	0x08004831
 80047b4:	08004831 	.word	0x08004831
 80047b8:	08004831 	.word	0x08004831
 80047bc:	08004819 	.word	0x08004819
 80047c0:	08004831 	.word	0x08004831
 80047c4:	08004831 	.word	0x08004831
 80047c8:	08004831 	.word	0x08004831
 80047cc:	08004831 	.word	0x08004831
 80047d0:	08004831 	.word	0x08004831
 80047d4:	08004831 	.word	0x08004831
 80047d8:	08004831 	.word	0x08004831
 80047dc:	08004821 	.word	0x08004821
 80047e0:	08004831 	.word	0x08004831
 80047e4:	08004831 	.word	0x08004831
 80047e8:	08004831 	.word	0x08004831
 80047ec:	08004831 	.word	0x08004831
 80047f0:	08004831 	.word	0x08004831
 80047f4:	08004831 	.word	0x08004831
 80047f8:	08004831 	.word	0x08004831
 80047fc:	08004829 	.word	0x08004829
 8004800:	2301      	movs	r3, #1
 8004802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004806:	e222      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004808:	2304      	movs	r3, #4
 800480a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800480e:	e21e      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004810:	2308      	movs	r3, #8
 8004812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004816:	e21a      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004818:	2310      	movs	r3, #16
 800481a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800481e:	e216      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004820:	2320      	movs	r3, #32
 8004822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004826:	e212      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004828:	2340      	movs	r3, #64	@ 0x40
 800482a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800482e:	e20e      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004830:	2380      	movs	r3, #128	@ 0x80
 8004832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004836:	e20a      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a69      	ldr	r2, [pc, #420]	@ (80049e4 <UART_SetConfig+0x33c>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d130      	bne.n	80048a4 <UART_SetConfig+0x1fc>
 8004842:	4b67      	ldr	r3, [pc, #412]	@ (80049e0 <UART_SetConfig+0x338>)
 8004844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	2b05      	cmp	r3, #5
 800484c:	d826      	bhi.n	800489c <UART_SetConfig+0x1f4>
 800484e:	a201      	add	r2, pc, #4	@ (adr r2, 8004854 <UART_SetConfig+0x1ac>)
 8004850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004854:	0800486d 	.word	0x0800486d
 8004858:	08004875 	.word	0x08004875
 800485c:	0800487d 	.word	0x0800487d
 8004860:	08004885 	.word	0x08004885
 8004864:	0800488d 	.word	0x0800488d
 8004868:	08004895 	.word	0x08004895
 800486c:	2300      	movs	r3, #0
 800486e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004872:	e1ec      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004874:	2304      	movs	r3, #4
 8004876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800487a:	e1e8      	b.n	8004c4e <UART_SetConfig+0x5a6>
 800487c:	2308      	movs	r3, #8
 800487e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004882:	e1e4      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004884:	2310      	movs	r3, #16
 8004886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800488a:	e1e0      	b.n	8004c4e <UART_SetConfig+0x5a6>
 800488c:	2320      	movs	r3, #32
 800488e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004892:	e1dc      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004894:	2340      	movs	r3, #64	@ 0x40
 8004896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800489a:	e1d8      	b.n	8004c4e <UART_SetConfig+0x5a6>
 800489c:	2380      	movs	r3, #128	@ 0x80
 800489e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048a2:	e1d4      	b.n	8004c4e <UART_SetConfig+0x5a6>
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a4f      	ldr	r2, [pc, #316]	@ (80049e8 <UART_SetConfig+0x340>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d130      	bne.n	8004910 <UART_SetConfig+0x268>
 80048ae:	4b4c      	ldr	r3, [pc, #304]	@ (80049e0 <UART_SetConfig+0x338>)
 80048b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	2b05      	cmp	r3, #5
 80048b8:	d826      	bhi.n	8004908 <UART_SetConfig+0x260>
 80048ba:	a201      	add	r2, pc, #4	@ (adr r2, 80048c0 <UART_SetConfig+0x218>)
 80048bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c0:	080048d9 	.word	0x080048d9
 80048c4:	080048e1 	.word	0x080048e1
 80048c8:	080048e9 	.word	0x080048e9
 80048cc:	080048f1 	.word	0x080048f1
 80048d0:	080048f9 	.word	0x080048f9
 80048d4:	08004901 	.word	0x08004901
 80048d8:	2300      	movs	r3, #0
 80048da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048de:	e1b6      	b.n	8004c4e <UART_SetConfig+0x5a6>
 80048e0:	2304      	movs	r3, #4
 80048e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048e6:	e1b2      	b.n	8004c4e <UART_SetConfig+0x5a6>
 80048e8:	2308      	movs	r3, #8
 80048ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ee:	e1ae      	b.n	8004c4e <UART_SetConfig+0x5a6>
 80048f0:	2310      	movs	r3, #16
 80048f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048f6:	e1aa      	b.n	8004c4e <UART_SetConfig+0x5a6>
 80048f8:	2320      	movs	r3, #32
 80048fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048fe:	e1a6      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004900:	2340      	movs	r3, #64	@ 0x40
 8004902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004906:	e1a2      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004908:	2380      	movs	r3, #128	@ 0x80
 800490a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800490e:	e19e      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a35      	ldr	r2, [pc, #212]	@ (80049ec <UART_SetConfig+0x344>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d130      	bne.n	800497c <UART_SetConfig+0x2d4>
 800491a:	4b31      	ldr	r3, [pc, #196]	@ (80049e0 <UART_SetConfig+0x338>)
 800491c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	2b05      	cmp	r3, #5
 8004924:	d826      	bhi.n	8004974 <UART_SetConfig+0x2cc>
 8004926:	a201      	add	r2, pc, #4	@ (adr r2, 800492c <UART_SetConfig+0x284>)
 8004928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492c:	08004945 	.word	0x08004945
 8004930:	0800494d 	.word	0x0800494d
 8004934:	08004955 	.word	0x08004955
 8004938:	0800495d 	.word	0x0800495d
 800493c:	08004965 	.word	0x08004965
 8004940:	0800496d 	.word	0x0800496d
 8004944:	2300      	movs	r3, #0
 8004946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800494a:	e180      	b.n	8004c4e <UART_SetConfig+0x5a6>
 800494c:	2304      	movs	r3, #4
 800494e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004952:	e17c      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004954:	2308      	movs	r3, #8
 8004956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800495a:	e178      	b.n	8004c4e <UART_SetConfig+0x5a6>
 800495c:	2310      	movs	r3, #16
 800495e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004962:	e174      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004964:	2320      	movs	r3, #32
 8004966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800496a:	e170      	b.n	8004c4e <UART_SetConfig+0x5a6>
 800496c:	2340      	movs	r3, #64	@ 0x40
 800496e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004972:	e16c      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004974:	2380      	movs	r3, #128	@ 0x80
 8004976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800497a:	e168      	b.n	8004c4e <UART_SetConfig+0x5a6>
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a1b      	ldr	r2, [pc, #108]	@ (80049f0 <UART_SetConfig+0x348>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d142      	bne.n	8004a0c <UART_SetConfig+0x364>
 8004986:	4b16      	ldr	r3, [pc, #88]	@ (80049e0 <UART_SetConfig+0x338>)
 8004988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	2b05      	cmp	r3, #5
 8004990:	d838      	bhi.n	8004a04 <UART_SetConfig+0x35c>
 8004992:	a201      	add	r2, pc, #4	@ (adr r2, 8004998 <UART_SetConfig+0x2f0>)
 8004994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004998:	080049b1 	.word	0x080049b1
 800499c:	080049b9 	.word	0x080049b9
 80049a0:	080049c1 	.word	0x080049c1
 80049a4:	080049c9 	.word	0x080049c9
 80049a8:	080049f5 	.word	0x080049f5
 80049ac:	080049fd 	.word	0x080049fd
 80049b0:	2300      	movs	r3, #0
 80049b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049b6:	e14a      	b.n	8004c4e <UART_SetConfig+0x5a6>
 80049b8:	2304      	movs	r3, #4
 80049ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049be:	e146      	b.n	8004c4e <UART_SetConfig+0x5a6>
 80049c0:	2308      	movs	r3, #8
 80049c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049c6:	e142      	b.n	8004c4e <UART_SetConfig+0x5a6>
 80049c8:	2310      	movs	r3, #16
 80049ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ce:	e13e      	b.n	8004c4e <UART_SetConfig+0x5a6>
 80049d0:	cfff69f3 	.word	0xcfff69f3
 80049d4:	58000c00 	.word	0x58000c00
 80049d8:	11fff4ff 	.word	0x11fff4ff
 80049dc:	40011000 	.word	0x40011000
 80049e0:	58024400 	.word	0x58024400
 80049e4:	40004400 	.word	0x40004400
 80049e8:	40004800 	.word	0x40004800
 80049ec:	40004c00 	.word	0x40004c00
 80049f0:	40005000 	.word	0x40005000
 80049f4:	2320      	movs	r3, #32
 80049f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049fa:	e128      	b.n	8004c4e <UART_SetConfig+0x5a6>
 80049fc:	2340      	movs	r3, #64	@ 0x40
 80049fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a02:	e124      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004a04:	2380      	movs	r3, #128	@ 0x80
 8004a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a0a:	e120      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4acb      	ldr	r2, [pc, #812]	@ (8004d40 <UART_SetConfig+0x698>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d176      	bne.n	8004b04 <UART_SetConfig+0x45c>
 8004a16:	4bcb      	ldr	r3, [pc, #812]	@ (8004d44 <UART_SetConfig+0x69c>)
 8004a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a1e:	2b28      	cmp	r3, #40	@ 0x28
 8004a20:	d86c      	bhi.n	8004afc <UART_SetConfig+0x454>
 8004a22:	a201      	add	r2, pc, #4	@ (adr r2, 8004a28 <UART_SetConfig+0x380>)
 8004a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a28:	08004acd 	.word	0x08004acd
 8004a2c:	08004afd 	.word	0x08004afd
 8004a30:	08004afd 	.word	0x08004afd
 8004a34:	08004afd 	.word	0x08004afd
 8004a38:	08004afd 	.word	0x08004afd
 8004a3c:	08004afd 	.word	0x08004afd
 8004a40:	08004afd 	.word	0x08004afd
 8004a44:	08004afd 	.word	0x08004afd
 8004a48:	08004ad5 	.word	0x08004ad5
 8004a4c:	08004afd 	.word	0x08004afd
 8004a50:	08004afd 	.word	0x08004afd
 8004a54:	08004afd 	.word	0x08004afd
 8004a58:	08004afd 	.word	0x08004afd
 8004a5c:	08004afd 	.word	0x08004afd
 8004a60:	08004afd 	.word	0x08004afd
 8004a64:	08004afd 	.word	0x08004afd
 8004a68:	08004add 	.word	0x08004add
 8004a6c:	08004afd 	.word	0x08004afd
 8004a70:	08004afd 	.word	0x08004afd
 8004a74:	08004afd 	.word	0x08004afd
 8004a78:	08004afd 	.word	0x08004afd
 8004a7c:	08004afd 	.word	0x08004afd
 8004a80:	08004afd 	.word	0x08004afd
 8004a84:	08004afd 	.word	0x08004afd
 8004a88:	08004ae5 	.word	0x08004ae5
 8004a8c:	08004afd 	.word	0x08004afd
 8004a90:	08004afd 	.word	0x08004afd
 8004a94:	08004afd 	.word	0x08004afd
 8004a98:	08004afd 	.word	0x08004afd
 8004a9c:	08004afd 	.word	0x08004afd
 8004aa0:	08004afd 	.word	0x08004afd
 8004aa4:	08004afd 	.word	0x08004afd
 8004aa8:	08004aed 	.word	0x08004aed
 8004aac:	08004afd 	.word	0x08004afd
 8004ab0:	08004afd 	.word	0x08004afd
 8004ab4:	08004afd 	.word	0x08004afd
 8004ab8:	08004afd 	.word	0x08004afd
 8004abc:	08004afd 	.word	0x08004afd
 8004ac0:	08004afd 	.word	0x08004afd
 8004ac4:	08004afd 	.word	0x08004afd
 8004ac8:	08004af5 	.word	0x08004af5
 8004acc:	2301      	movs	r3, #1
 8004ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ad2:	e0bc      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004ad4:	2304      	movs	r3, #4
 8004ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ada:	e0b8      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004adc:	2308      	movs	r3, #8
 8004ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ae2:	e0b4      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004ae4:	2310      	movs	r3, #16
 8004ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aea:	e0b0      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004aec:	2320      	movs	r3, #32
 8004aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004af2:	e0ac      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004af4:	2340      	movs	r3, #64	@ 0x40
 8004af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004afa:	e0a8      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004afc:	2380      	movs	r3, #128	@ 0x80
 8004afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b02:	e0a4      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a8f      	ldr	r2, [pc, #572]	@ (8004d48 <UART_SetConfig+0x6a0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d130      	bne.n	8004b70 <UART_SetConfig+0x4c8>
 8004b0e:	4b8d      	ldr	r3, [pc, #564]	@ (8004d44 <UART_SetConfig+0x69c>)
 8004b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	2b05      	cmp	r3, #5
 8004b18:	d826      	bhi.n	8004b68 <UART_SetConfig+0x4c0>
 8004b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b20 <UART_SetConfig+0x478>)
 8004b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b20:	08004b39 	.word	0x08004b39
 8004b24:	08004b41 	.word	0x08004b41
 8004b28:	08004b49 	.word	0x08004b49
 8004b2c:	08004b51 	.word	0x08004b51
 8004b30:	08004b59 	.word	0x08004b59
 8004b34:	08004b61 	.word	0x08004b61
 8004b38:	2300      	movs	r3, #0
 8004b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b3e:	e086      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004b40:	2304      	movs	r3, #4
 8004b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b46:	e082      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004b48:	2308      	movs	r3, #8
 8004b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b4e:	e07e      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004b50:	2310      	movs	r3, #16
 8004b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b56:	e07a      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004b58:	2320      	movs	r3, #32
 8004b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b5e:	e076      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004b60:	2340      	movs	r3, #64	@ 0x40
 8004b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b66:	e072      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004b68:	2380      	movs	r3, #128	@ 0x80
 8004b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b6e:	e06e      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a75      	ldr	r2, [pc, #468]	@ (8004d4c <UART_SetConfig+0x6a4>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d130      	bne.n	8004bdc <UART_SetConfig+0x534>
 8004b7a:	4b72      	ldr	r3, [pc, #456]	@ (8004d44 <UART_SetConfig+0x69c>)
 8004b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	2b05      	cmp	r3, #5
 8004b84:	d826      	bhi.n	8004bd4 <UART_SetConfig+0x52c>
 8004b86:	a201      	add	r2, pc, #4	@ (adr r2, 8004b8c <UART_SetConfig+0x4e4>)
 8004b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8c:	08004ba5 	.word	0x08004ba5
 8004b90:	08004bad 	.word	0x08004bad
 8004b94:	08004bb5 	.word	0x08004bb5
 8004b98:	08004bbd 	.word	0x08004bbd
 8004b9c:	08004bc5 	.word	0x08004bc5
 8004ba0:	08004bcd 	.word	0x08004bcd
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004baa:	e050      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004bac:	2304      	movs	r3, #4
 8004bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bb2:	e04c      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004bb4:	2308      	movs	r3, #8
 8004bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bba:	e048      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004bbc:	2310      	movs	r3, #16
 8004bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bc2:	e044      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004bc4:	2320      	movs	r3, #32
 8004bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bca:	e040      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004bcc:	2340      	movs	r3, #64	@ 0x40
 8004bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bd2:	e03c      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004bd4:	2380      	movs	r3, #128	@ 0x80
 8004bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bda:	e038      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a5b      	ldr	r2, [pc, #364]	@ (8004d50 <UART_SetConfig+0x6a8>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d130      	bne.n	8004c48 <UART_SetConfig+0x5a0>
 8004be6:	4b57      	ldr	r3, [pc, #348]	@ (8004d44 <UART_SetConfig+0x69c>)
 8004be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	2b05      	cmp	r3, #5
 8004bf0:	d826      	bhi.n	8004c40 <UART_SetConfig+0x598>
 8004bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8004bf8 <UART_SetConfig+0x550>)
 8004bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf8:	08004c11 	.word	0x08004c11
 8004bfc:	08004c19 	.word	0x08004c19
 8004c00:	08004c21 	.word	0x08004c21
 8004c04:	08004c29 	.word	0x08004c29
 8004c08:	08004c31 	.word	0x08004c31
 8004c0c:	08004c39 	.word	0x08004c39
 8004c10:	2302      	movs	r3, #2
 8004c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c16:	e01a      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004c18:	2304      	movs	r3, #4
 8004c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c1e:	e016      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004c20:	2308      	movs	r3, #8
 8004c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c26:	e012      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004c28:	2310      	movs	r3, #16
 8004c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c2e:	e00e      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004c30:	2320      	movs	r3, #32
 8004c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c36:	e00a      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004c38:	2340      	movs	r3, #64	@ 0x40
 8004c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c3e:	e006      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004c40:	2380      	movs	r3, #128	@ 0x80
 8004c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c46:	e002      	b.n	8004c4e <UART_SetConfig+0x5a6>
 8004c48:	2380      	movs	r3, #128	@ 0x80
 8004c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a3f      	ldr	r2, [pc, #252]	@ (8004d50 <UART_SetConfig+0x6a8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	f040 80f8 	bne.w	8004e4a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c5a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004c5e:	2b20      	cmp	r3, #32
 8004c60:	dc46      	bgt.n	8004cf0 <UART_SetConfig+0x648>
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	f2c0 8082 	blt.w	8004d6c <UART_SetConfig+0x6c4>
 8004c68:	3b02      	subs	r3, #2
 8004c6a:	2b1e      	cmp	r3, #30
 8004c6c:	d87e      	bhi.n	8004d6c <UART_SetConfig+0x6c4>
 8004c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c74 <UART_SetConfig+0x5cc>)
 8004c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c74:	08004cf7 	.word	0x08004cf7
 8004c78:	08004d6d 	.word	0x08004d6d
 8004c7c:	08004cff 	.word	0x08004cff
 8004c80:	08004d6d 	.word	0x08004d6d
 8004c84:	08004d6d 	.word	0x08004d6d
 8004c88:	08004d6d 	.word	0x08004d6d
 8004c8c:	08004d0f 	.word	0x08004d0f
 8004c90:	08004d6d 	.word	0x08004d6d
 8004c94:	08004d6d 	.word	0x08004d6d
 8004c98:	08004d6d 	.word	0x08004d6d
 8004c9c:	08004d6d 	.word	0x08004d6d
 8004ca0:	08004d6d 	.word	0x08004d6d
 8004ca4:	08004d6d 	.word	0x08004d6d
 8004ca8:	08004d6d 	.word	0x08004d6d
 8004cac:	08004d1f 	.word	0x08004d1f
 8004cb0:	08004d6d 	.word	0x08004d6d
 8004cb4:	08004d6d 	.word	0x08004d6d
 8004cb8:	08004d6d 	.word	0x08004d6d
 8004cbc:	08004d6d 	.word	0x08004d6d
 8004cc0:	08004d6d 	.word	0x08004d6d
 8004cc4:	08004d6d 	.word	0x08004d6d
 8004cc8:	08004d6d 	.word	0x08004d6d
 8004ccc:	08004d6d 	.word	0x08004d6d
 8004cd0:	08004d6d 	.word	0x08004d6d
 8004cd4:	08004d6d 	.word	0x08004d6d
 8004cd8:	08004d6d 	.word	0x08004d6d
 8004cdc:	08004d6d 	.word	0x08004d6d
 8004ce0:	08004d6d 	.word	0x08004d6d
 8004ce4:	08004d6d 	.word	0x08004d6d
 8004ce8:	08004d6d 	.word	0x08004d6d
 8004cec:	08004d5f 	.word	0x08004d5f
 8004cf0:	2b40      	cmp	r3, #64	@ 0x40
 8004cf2:	d037      	beq.n	8004d64 <UART_SetConfig+0x6bc>
 8004cf4:	e03a      	b.n	8004d6c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004cf6:	f7fe fed9 	bl	8003aac <HAL_RCCEx_GetD3PCLK1Freq>
 8004cfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004cfc:	e03c      	b.n	8004d78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fe fee8 	bl	8003ad8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d0c:	e034      	b.n	8004d78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d0e:	f107 0318 	add.w	r3, r7, #24
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7ff f834 	bl	8003d80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d1c:	e02c      	b.n	8004d78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d1e:	4b09      	ldr	r3, [pc, #36]	@ (8004d44 <UART_SetConfig+0x69c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0320 	and.w	r3, r3, #32
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d016      	beq.n	8004d58 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004d2a:	4b06      	ldr	r3, [pc, #24]	@ (8004d44 <UART_SetConfig+0x69c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	08db      	lsrs	r3, r3, #3
 8004d30:	f003 0303 	and.w	r3, r3, #3
 8004d34:	4a07      	ldr	r2, [pc, #28]	@ (8004d54 <UART_SetConfig+0x6ac>)
 8004d36:	fa22 f303 	lsr.w	r3, r2, r3
 8004d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d3c:	e01c      	b.n	8004d78 <UART_SetConfig+0x6d0>
 8004d3e:	bf00      	nop
 8004d40:	40011400 	.word	0x40011400
 8004d44:	58024400 	.word	0x58024400
 8004d48:	40007800 	.word	0x40007800
 8004d4c:	40007c00 	.word	0x40007c00
 8004d50:	58000c00 	.word	0x58000c00
 8004d54:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004d58:	4b9d      	ldr	r3, [pc, #628]	@ (8004fd0 <UART_SetConfig+0x928>)
 8004d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d5c:	e00c      	b.n	8004d78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004d5e:	4b9d      	ldr	r3, [pc, #628]	@ (8004fd4 <UART_SetConfig+0x92c>)
 8004d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d62:	e009      	b.n	8004d78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d6a:	e005      	b.n	8004d78 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004d76:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f000 81de 	beq.w	800513c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d84:	4a94      	ldr	r2, [pc, #592]	@ (8004fd8 <UART_SetConfig+0x930>)
 8004d86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d92:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	4413      	add	r3, r2
 8004d9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d305      	bcc.n	8004db0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004daa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d903      	bls.n	8004db8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004db6:	e1c1      	b.n	800513c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dba:	2200      	movs	r2, #0
 8004dbc:	60bb      	str	r3, [r7, #8]
 8004dbe:	60fa      	str	r2, [r7, #12]
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc4:	4a84      	ldr	r2, [pc, #528]	@ (8004fd8 <UART_SetConfig+0x930>)
 8004dc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	2200      	movs	r2, #0
 8004dce:	603b      	str	r3, [r7, #0]
 8004dd0:	607a      	str	r2, [r7, #4]
 8004dd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004dda:	f7fb fad9 	bl	8000390 <__aeabi_uldivmod>
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	4610      	mov	r0, r2
 8004de4:	4619      	mov	r1, r3
 8004de6:	f04f 0200 	mov.w	r2, #0
 8004dea:	f04f 0300 	mov.w	r3, #0
 8004dee:	020b      	lsls	r3, r1, #8
 8004df0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004df4:	0202      	lsls	r2, r0, #8
 8004df6:	6979      	ldr	r1, [r7, #20]
 8004df8:	6849      	ldr	r1, [r1, #4]
 8004dfa:	0849      	lsrs	r1, r1, #1
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	460c      	mov	r4, r1
 8004e00:	4605      	mov	r5, r0
 8004e02:	eb12 0804 	adds.w	r8, r2, r4
 8004e06:	eb43 0905 	adc.w	r9, r3, r5
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	469a      	mov	sl, r3
 8004e12:	4693      	mov	fp, r2
 8004e14:	4652      	mov	r2, sl
 8004e16:	465b      	mov	r3, fp
 8004e18:	4640      	mov	r0, r8
 8004e1a:	4649      	mov	r1, r9
 8004e1c:	f7fb fab8 	bl	8000390 <__aeabi_uldivmod>
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	4613      	mov	r3, r2
 8004e26:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e2e:	d308      	bcc.n	8004e42 <UART_SetConfig+0x79a>
 8004e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e36:	d204      	bcs.n	8004e42 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e3e:	60da      	str	r2, [r3, #12]
 8004e40:	e17c      	b.n	800513c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004e48:	e178      	b.n	800513c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e52:	f040 80c5 	bne.w	8004fe0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004e56:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004e5a:	2b20      	cmp	r3, #32
 8004e5c:	dc48      	bgt.n	8004ef0 <UART_SetConfig+0x848>
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	db7b      	blt.n	8004f5a <UART_SetConfig+0x8b2>
 8004e62:	2b20      	cmp	r3, #32
 8004e64:	d879      	bhi.n	8004f5a <UART_SetConfig+0x8b2>
 8004e66:	a201      	add	r2, pc, #4	@ (adr r2, 8004e6c <UART_SetConfig+0x7c4>)
 8004e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6c:	08004ef7 	.word	0x08004ef7
 8004e70:	08004eff 	.word	0x08004eff
 8004e74:	08004f5b 	.word	0x08004f5b
 8004e78:	08004f5b 	.word	0x08004f5b
 8004e7c:	08004f07 	.word	0x08004f07
 8004e80:	08004f5b 	.word	0x08004f5b
 8004e84:	08004f5b 	.word	0x08004f5b
 8004e88:	08004f5b 	.word	0x08004f5b
 8004e8c:	08004f17 	.word	0x08004f17
 8004e90:	08004f5b 	.word	0x08004f5b
 8004e94:	08004f5b 	.word	0x08004f5b
 8004e98:	08004f5b 	.word	0x08004f5b
 8004e9c:	08004f5b 	.word	0x08004f5b
 8004ea0:	08004f5b 	.word	0x08004f5b
 8004ea4:	08004f5b 	.word	0x08004f5b
 8004ea8:	08004f5b 	.word	0x08004f5b
 8004eac:	08004f27 	.word	0x08004f27
 8004eb0:	08004f5b 	.word	0x08004f5b
 8004eb4:	08004f5b 	.word	0x08004f5b
 8004eb8:	08004f5b 	.word	0x08004f5b
 8004ebc:	08004f5b 	.word	0x08004f5b
 8004ec0:	08004f5b 	.word	0x08004f5b
 8004ec4:	08004f5b 	.word	0x08004f5b
 8004ec8:	08004f5b 	.word	0x08004f5b
 8004ecc:	08004f5b 	.word	0x08004f5b
 8004ed0:	08004f5b 	.word	0x08004f5b
 8004ed4:	08004f5b 	.word	0x08004f5b
 8004ed8:	08004f5b 	.word	0x08004f5b
 8004edc:	08004f5b 	.word	0x08004f5b
 8004ee0:	08004f5b 	.word	0x08004f5b
 8004ee4:	08004f5b 	.word	0x08004f5b
 8004ee8:	08004f5b 	.word	0x08004f5b
 8004eec:	08004f4d 	.word	0x08004f4d
 8004ef0:	2b40      	cmp	r3, #64	@ 0x40
 8004ef2:	d02e      	beq.n	8004f52 <UART_SetConfig+0x8aa>
 8004ef4:	e031      	b.n	8004f5a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ef6:	f7fd fba3 	bl	8002640 <HAL_RCC_GetPCLK1Freq>
 8004efa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004efc:	e033      	b.n	8004f66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004efe:	f7fd fbb5 	bl	800266c <HAL_RCC_GetPCLK2Freq>
 8004f02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004f04:	e02f      	b.n	8004f66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fe fde4 	bl	8003ad8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f14:	e027      	b.n	8004f66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f16:	f107 0318 	add.w	r3, r7, #24
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fe ff30 	bl	8003d80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f24:	e01f      	b.n	8004f66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f26:	4b2d      	ldr	r3, [pc, #180]	@ (8004fdc <UART_SetConfig+0x934>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0320 	and.w	r3, r3, #32
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d009      	beq.n	8004f46 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004f32:	4b2a      	ldr	r3, [pc, #168]	@ (8004fdc <UART_SetConfig+0x934>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	08db      	lsrs	r3, r3, #3
 8004f38:	f003 0303 	and.w	r3, r3, #3
 8004f3c:	4a24      	ldr	r2, [pc, #144]	@ (8004fd0 <UART_SetConfig+0x928>)
 8004f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f44:	e00f      	b.n	8004f66 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004f46:	4b22      	ldr	r3, [pc, #136]	@ (8004fd0 <UART_SetConfig+0x928>)
 8004f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f4a:	e00c      	b.n	8004f66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004f4c:	4b21      	ldr	r3, [pc, #132]	@ (8004fd4 <UART_SetConfig+0x92c>)
 8004f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f50:	e009      	b.n	8004f66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f58:	e005      	b.n	8004f66 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004f64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 80e7 	beq.w	800513c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f72:	4a19      	ldr	r2, [pc, #100]	@ (8004fd8 <UART_SetConfig+0x930>)
 8004f74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f80:	005a      	lsls	r2, r3, #1
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	085b      	lsrs	r3, r3, #1
 8004f88:	441a      	add	r2, r3
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f92:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f96:	2b0f      	cmp	r3, #15
 8004f98:	d916      	bls.n	8004fc8 <UART_SetConfig+0x920>
 8004f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fa0:	d212      	bcs.n	8004fc8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	f023 030f 	bic.w	r3, r3, #15
 8004faa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fae:	085b      	lsrs	r3, r3, #1
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	f003 0307 	and.w	r3, r3, #7
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004fc4:	60da      	str	r2, [r3, #12]
 8004fc6:	e0b9      	b.n	800513c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004fce:	e0b5      	b.n	800513c <UART_SetConfig+0xa94>
 8004fd0:	03d09000 	.word	0x03d09000
 8004fd4:	003d0900 	.word	0x003d0900
 8004fd8:	0800a780 	.word	0x0800a780
 8004fdc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fe0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004fe4:	2b20      	cmp	r3, #32
 8004fe6:	dc49      	bgt.n	800507c <UART_SetConfig+0x9d4>
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	db7c      	blt.n	80050e6 <UART_SetConfig+0xa3e>
 8004fec:	2b20      	cmp	r3, #32
 8004fee:	d87a      	bhi.n	80050e6 <UART_SetConfig+0xa3e>
 8004ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ff8 <UART_SetConfig+0x950>)
 8004ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff6:	bf00      	nop
 8004ff8:	08005083 	.word	0x08005083
 8004ffc:	0800508b 	.word	0x0800508b
 8005000:	080050e7 	.word	0x080050e7
 8005004:	080050e7 	.word	0x080050e7
 8005008:	08005093 	.word	0x08005093
 800500c:	080050e7 	.word	0x080050e7
 8005010:	080050e7 	.word	0x080050e7
 8005014:	080050e7 	.word	0x080050e7
 8005018:	080050a3 	.word	0x080050a3
 800501c:	080050e7 	.word	0x080050e7
 8005020:	080050e7 	.word	0x080050e7
 8005024:	080050e7 	.word	0x080050e7
 8005028:	080050e7 	.word	0x080050e7
 800502c:	080050e7 	.word	0x080050e7
 8005030:	080050e7 	.word	0x080050e7
 8005034:	080050e7 	.word	0x080050e7
 8005038:	080050b3 	.word	0x080050b3
 800503c:	080050e7 	.word	0x080050e7
 8005040:	080050e7 	.word	0x080050e7
 8005044:	080050e7 	.word	0x080050e7
 8005048:	080050e7 	.word	0x080050e7
 800504c:	080050e7 	.word	0x080050e7
 8005050:	080050e7 	.word	0x080050e7
 8005054:	080050e7 	.word	0x080050e7
 8005058:	080050e7 	.word	0x080050e7
 800505c:	080050e7 	.word	0x080050e7
 8005060:	080050e7 	.word	0x080050e7
 8005064:	080050e7 	.word	0x080050e7
 8005068:	080050e7 	.word	0x080050e7
 800506c:	080050e7 	.word	0x080050e7
 8005070:	080050e7 	.word	0x080050e7
 8005074:	080050e7 	.word	0x080050e7
 8005078:	080050d9 	.word	0x080050d9
 800507c:	2b40      	cmp	r3, #64	@ 0x40
 800507e:	d02e      	beq.n	80050de <UART_SetConfig+0xa36>
 8005080:	e031      	b.n	80050e6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005082:	f7fd fadd 	bl	8002640 <HAL_RCC_GetPCLK1Freq>
 8005086:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005088:	e033      	b.n	80050f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800508a:	f7fd faef 	bl	800266c <HAL_RCC_GetPCLK2Freq>
 800508e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005090:	e02f      	b.n	80050f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005092:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005096:	4618      	mov	r0, r3
 8005098:	f7fe fd1e 	bl	8003ad8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800509c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800509e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050a0:	e027      	b.n	80050f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050a2:	f107 0318 	add.w	r3, r7, #24
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fe fe6a 	bl	8003d80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050b0:	e01f      	b.n	80050f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050b2:	4b2d      	ldr	r3, [pc, #180]	@ (8005168 <UART_SetConfig+0xac0>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d009      	beq.n	80050d2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80050be:	4b2a      	ldr	r3, [pc, #168]	@ (8005168 <UART_SetConfig+0xac0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	08db      	lsrs	r3, r3, #3
 80050c4:	f003 0303 	and.w	r3, r3, #3
 80050c8:	4a28      	ldr	r2, [pc, #160]	@ (800516c <UART_SetConfig+0xac4>)
 80050ca:	fa22 f303 	lsr.w	r3, r2, r3
 80050ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80050d0:	e00f      	b.n	80050f2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80050d2:	4b26      	ldr	r3, [pc, #152]	@ (800516c <UART_SetConfig+0xac4>)
 80050d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050d6:	e00c      	b.n	80050f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80050d8:	4b25      	ldr	r3, [pc, #148]	@ (8005170 <UART_SetConfig+0xac8>)
 80050da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050dc:	e009      	b.n	80050f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050e4:	e005      	b.n	80050f2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80050f0:	bf00      	nop
    }

    if (pclk != 0U)
 80050f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d021      	beq.n	800513c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005174 <UART_SetConfig+0xacc>)
 80050fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005102:	461a      	mov	r2, r3
 8005104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005106:	fbb3 f2f2 	udiv	r2, r3, r2
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	085b      	lsrs	r3, r3, #1
 8005110:	441a      	add	r2, r3
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	fbb2 f3f3 	udiv	r3, r2, r3
 800511a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800511c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800511e:	2b0f      	cmp	r3, #15
 8005120:	d909      	bls.n	8005136 <UART_SetConfig+0xa8e>
 8005122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005128:	d205      	bcs.n	8005136 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800512a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512c:	b29a      	uxth	r2, r3
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	60da      	str	r2, [r3, #12]
 8005134:	e002      	b.n	800513c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	2201      	movs	r2, #1
 8005140:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	2201      	movs	r2, #1
 8005148:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	2200      	movs	r2, #0
 8005150:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	2200      	movs	r2, #0
 8005156:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005158:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800515c:	4618      	mov	r0, r3
 800515e:	3748      	adds	r7, #72	@ 0x48
 8005160:	46bd      	mov	sp, r7
 8005162:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005166:	bf00      	nop
 8005168:	58024400 	.word	0x58024400
 800516c:	03d09000 	.word	0x03d09000
 8005170:	003d0900 	.word	0x003d0900
 8005174:	0800a780 	.word	0x0800a780

08005178 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005184:	f003 0308 	and.w	r3, r3, #8
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00a      	beq.n	80051a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00a      	beq.n	80051c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00a      	beq.n	80051e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ea:	f003 0304 	and.w	r3, r3, #4
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00a      	beq.n	8005208 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	430a      	orrs	r2, r1
 8005206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800520c:	f003 0310 	and.w	r3, r3, #16
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00a      	beq.n	800522a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800522e:	f003 0320 	and.w	r3, r3, #32
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00a      	beq.n	800524c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005254:	2b00      	cmp	r3, #0
 8005256:	d01a      	beq.n	800528e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005272:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005276:	d10a      	bne.n	800528e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00a      	beq.n	80052b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	605a      	str	r2, [r3, #4]
  }
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b098      	sub	sp, #96	@ 0x60
 80052c0:	af02      	add	r7, sp, #8
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052cc:	f7fb feda 	bl	8001084 <HAL_GetTick>
 80052d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0308 	and.w	r3, r3, #8
 80052dc:	2b08      	cmp	r3, #8
 80052de:	d12f      	bne.n	8005340 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052e8:	2200      	movs	r2, #0
 80052ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f88e 	bl	8005410 <UART_WaitOnFlagUntilTimeout>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d022      	beq.n	8005340 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005302:	e853 3f00 	ldrex	r3, [r3]
 8005306:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800530a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800530e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	461a      	mov	r2, r3
 8005316:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005318:	647b      	str	r3, [r7, #68]	@ 0x44
 800531a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800531e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005320:	e841 2300 	strex	r3, r2, [r1]
 8005324:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1e6      	bne.n	80052fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2220      	movs	r2, #32
 8005330:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e063      	b.n	8005408 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0304 	and.w	r3, r3, #4
 800534a:	2b04      	cmp	r3, #4
 800534c:	d149      	bne.n	80053e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800534e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005356:	2200      	movs	r2, #0
 8005358:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f857 	bl	8005410 <UART_WaitOnFlagUntilTimeout>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d03c      	beq.n	80053e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005370:	e853 3f00 	ldrex	r3, [r3]
 8005374:	623b      	str	r3, [r7, #32]
   return(result);
 8005376:	6a3b      	ldr	r3, [r7, #32]
 8005378:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800537c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	461a      	mov	r2, r3
 8005384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005386:	633b      	str	r3, [r7, #48]	@ 0x30
 8005388:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800538c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800538e:	e841 2300 	strex	r3, r2, [r1]
 8005392:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1e6      	bne.n	8005368 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	3308      	adds	r3, #8
 80053a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	e853 3f00 	ldrex	r3, [r3]
 80053a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f023 0301 	bic.w	r3, r3, #1
 80053b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	3308      	adds	r3, #8
 80053b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053ba:	61fa      	str	r2, [r7, #28]
 80053bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053be:	69b9      	ldr	r1, [r7, #24]
 80053c0:	69fa      	ldr	r2, [r7, #28]
 80053c2:	e841 2300 	strex	r3, r2, [r1]
 80053c6:	617b      	str	r3, [r7, #20]
   return(result);
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1e5      	bne.n	800539a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2220      	movs	r2, #32
 80053d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e012      	b.n	8005408 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2220      	movs	r2, #32
 80053ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3758      	adds	r7, #88	@ 0x58
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	603b      	str	r3, [r7, #0]
 800541c:	4613      	mov	r3, r2
 800541e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005420:	e04f      	b.n	80054c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005428:	d04b      	beq.n	80054c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800542a:	f7fb fe2b 	bl	8001084 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	429a      	cmp	r2, r3
 8005438:	d302      	bcc.n	8005440 <UART_WaitOnFlagUntilTimeout+0x30>
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e04e      	b.n	80054e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0304 	and.w	r3, r3, #4
 800544e:	2b00      	cmp	r3, #0
 8005450:	d037      	beq.n	80054c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	2b80      	cmp	r3, #128	@ 0x80
 8005456:	d034      	beq.n	80054c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2b40      	cmp	r3, #64	@ 0x40
 800545c:	d031      	beq.n	80054c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	69db      	ldr	r3, [r3, #28]
 8005464:	f003 0308 	and.w	r3, r3, #8
 8005468:	2b08      	cmp	r3, #8
 800546a:	d110      	bne.n	800548e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2208      	movs	r2, #8
 8005472:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 f839 	bl	80054ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2208      	movs	r2, #8
 800547e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e029      	b.n	80054e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	69db      	ldr	r3, [r3, #28]
 8005494:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005498:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800549c:	d111      	bne.n	80054c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 f81f 	bl	80054ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2220      	movs	r2, #32
 80054b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e00f      	b.n	80054e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	69da      	ldr	r2, [r3, #28]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4013      	ands	r3, r2
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	bf0c      	ite	eq
 80054d2:	2301      	moveq	r3, #1
 80054d4:	2300      	movne	r3, #0
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	461a      	mov	r2, r3
 80054da:	79fb      	ldrb	r3, [r7, #7]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d0a0      	beq.n	8005422 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
	...

080054ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b095      	sub	sp, #84	@ 0x54
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054fc:	e853 3f00 	ldrex	r3, [r3]
 8005500:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005504:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005508:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005512:	643b      	str	r3, [r7, #64]	@ 0x40
 8005514:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005516:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005518:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800551a:	e841 2300 	strex	r3, r2, [r1]
 800551e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1e6      	bne.n	80054f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3308      	adds	r3, #8
 800552c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	e853 3f00 	ldrex	r3, [r3]
 8005534:	61fb      	str	r3, [r7, #28]
   return(result);
 8005536:	69fa      	ldr	r2, [r7, #28]
 8005538:	4b1e      	ldr	r3, [pc, #120]	@ (80055b4 <UART_EndRxTransfer+0xc8>)
 800553a:	4013      	ands	r3, r2
 800553c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3308      	adds	r3, #8
 8005544:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005546:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005548:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800554c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800554e:	e841 2300 	strex	r3, r2, [r1]
 8005552:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1e5      	bne.n	8005526 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800555e:	2b01      	cmp	r3, #1
 8005560:	d118      	bne.n	8005594 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	e853 3f00 	ldrex	r3, [r3]
 800556e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f023 0310 	bic.w	r3, r3, #16
 8005576:	647b      	str	r3, [r7, #68]	@ 0x44
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	461a      	mov	r2, r3
 800557e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005580:	61bb      	str	r3, [r7, #24]
 8005582:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005584:	6979      	ldr	r1, [r7, #20]
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	e841 2300 	strex	r3, r2, [r1]
 800558c:	613b      	str	r3, [r7, #16]
   return(result);
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1e6      	bne.n	8005562 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2220      	movs	r2, #32
 8005598:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80055a8:	bf00      	nop
 80055aa:	3754      	adds	r7, #84	@ 0x54
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	effffffe 	.word	0xeffffffe

080055b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d101      	bne.n	80055ce <HAL_UARTEx_DisableFifoMode+0x16>
 80055ca:	2302      	movs	r3, #2
 80055cc:	e027      	b.n	800561e <HAL_UARTEx_DisableFifoMode+0x66>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2224      	movs	r2, #36	@ 0x24
 80055da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0201 	bic.w	r2, r2, #1
 80055f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80055fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2220      	movs	r2, #32
 8005610:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b084      	sub	sp, #16
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800563a:	2b01      	cmp	r3, #1
 800563c:	d101      	bne.n	8005642 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800563e:	2302      	movs	r3, #2
 8005640:	e02d      	b.n	800569e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2224      	movs	r2, #36	@ 0x24
 800564e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0201 	bic.w	r2, r2, #1
 8005668:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f850 	bl	8005724 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2220      	movs	r2, #32
 8005690:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b084      	sub	sp, #16
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d101      	bne.n	80056be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80056ba:	2302      	movs	r3, #2
 80056bc:	e02d      	b.n	800571a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2224      	movs	r2, #36	@ 0x24
 80056ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 0201 	bic.w	r2, r2, #1
 80056e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f812 	bl	8005724 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2220      	movs	r2, #32
 800570c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
	...

08005724 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005730:	2b00      	cmp	r3, #0
 8005732:	d108      	bne.n	8005746 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005744:	e031      	b.n	80057aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005746:	2310      	movs	r3, #16
 8005748:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800574a:	2310      	movs	r3, #16
 800574c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	0e5b      	lsrs	r3, r3, #25
 8005756:	b2db      	uxtb	r3, r3
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	0f5b      	lsrs	r3, r3, #29
 8005766:	b2db      	uxtb	r3, r3
 8005768:	f003 0307 	and.w	r3, r3, #7
 800576c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800576e:	7bbb      	ldrb	r3, [r7, #14]
 8005770:	7b3a      	ldrb	r2, [r7, #12]
 8005772:	4911      	ldr	r1, [pc, #68]	@ (80057b8 <UARTEx_SetNbDataToProcess+0x94>)
 8005774:	5c8a      	ldrb	r2, [r1, r2]
 8005776:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800577a:	7b3a      	ldrb	r2, [r7, #12]
 800577c:	490f      	ldr	r1, [pc, #60]	@ (80057bc <UARTEx_SetNbDataToProcess+0x98>)
 800577e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005780:	fb93 f3f2 	sdiv	r3, r3, r2
 8005784:	b29a      	uxth	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800578c:	7bfb      	ldrb	r3, [r7, #15]
 800578e:	7b7a      	ldrb	r2, [r7, #13]
 8005790:	4909      	ldr	r1, [pc, #36]	@ (80057b8 <UARTEx_SetNbDataToProcess+0x94>)
 8005792:	5c8a      	ldrb	r2, [r1, r2]
 8005794:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005798:	7b7a      	ldrb	r2, [r7, #13]
 800579a:	4908      	ldr	r1, [pc, #32]	@ (80057bc <UARTEx_SetNbDataToProcess+0x98>)
 800579c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800579e:	fb93 f3f2 	sdiv	r3, r3, r2
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80057aa:	bf00      	nop
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	0800a798 	.word	0x0800a798
 80057bc:	0800a7a0 	.word	0x0800a7a0

080057c0 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d009      	beq.n	80057e4 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 80057d0:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80057d2:	461a      	mov	r2, r3
        err.type, err.code);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80057da:	6839      	ldr	r1, [r7, #0]
 80057dc:	4807      	ldr	r0, [pc, #28]	@ (80057fc <ai_log_err+0x3c>)
 80057de:	f002 fe05 	bl	80083ec <iprintf>
 80057e2:	e009      	b.n	80057f8 <ai_log_err+0x38>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80057e4:	793b      	ldrb	r3, [r7, #4]
 80057e6:	4619      	mov	r1, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80057ee:	461a      	mov	r2, r3
 80057f0:	4803      	ldr	r0, [pc, #12]	@ (8005800 <ai_log_err+0x40>)
 80057f2:	f002 fdfb 	bl	80083ec <iprintf>

  do {} while (1);
 80057f6:	bf00      	nop
 80057f8:	bf00      	nop
 80057fa:	e7fd      	b.n	80057f8 <ai_log_err+0x38>
 80057fc:	0800a5e8 	.word	0x0800a5e8
 8005800:	0800a61c 	.word	0x0800a61c

08005804 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_sine_model_create_and_init(&sine_model, act_addr, NULL);
 800580c:	2200      	movs	r2, #0
 800580e:	6879      	ldr	r1, [r7, #4]
 8005810:	4828      	ldr	r0, [pc, #160]	@ (80058b4 <ai_boostrap+0xb0>)
 8005812:	f000 fa8f 	bl	8005d34 <ai_sine_model_create_and_init>
 8005816:	4603      	mov	r3, r0
 8005818:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 800581a:	7b3b      	ldrb	r3, [r7, #12]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d006      	beq.n	800582e <ai_boostrap+0x2a>
    ai_log_err(err, "ai_sine_model_create_and_init");
 8005820:	4925      	ldr	r1, [pc, #148]	@ (80058b8 <ai_boostrap+0xb4>)
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f7ff ffcc 	bl	80057c0 <ai_log_err>
    return -1;
 8005828:	f04f 33ff 	mov.w	r3, #4294967295
 800582c:	e03e      	b.n	80058ac <ai_boostrap+0xa8>
  }

  ai_input = ai_sine_model_inputs_get(sine_model, NULL);
 800582e:	4b21      	ldr	r3, [pc, #132]	@ (80058b4 <ai_boostrap+0xb0>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2100      	movs	r1, #0
 8005834:	4618      	mov	r0, r3
 8005836:	f000 fafb 	bl	8005e30 <ai_sine_model_inputs_get>
 800583a:	4603      	mov	r3, r0
 800583c:	4a1f      	ldr	r2, [pc, #124]	@ (80058bc <ai_boostrap+0xb8>)
 800583e:	6013      	str	r3, [r2, #0]
  ai_output = ai_sine_model_outputs_get(sine_model, NULL);
 8005840:	4b1c      	ldr	r3, [pc, #112]	@ (80058b4 <ai_boostrap+0xb0>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2100      	movs	r1, #0
 8005846:	4618      	mov	r0, r3
 8005848:	f000 fb0c 	bl	8005e64 <ai_sine_model_outputs_get>
 800584c:	4603      	mov	r3, r0
 800584e:	4a1c      	ldr	r2, [pc, #112]	@ (80058c0 <ai_boostrap+0xbc>)
 8005850:	6013      	str	r3, [r2, #0]

#if defined(AI_SINE_MODEL_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_SINE_MODEL_IN_NUM; idx++) {
 8005852:	2300      	movs	r3, #0
 8005854:	617b      	str	r3, [r7, #20]
 8005856:	e00f      	b.n	8005878 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 8005858:	4b18      	ldr	r3, [pc, #96]	@ (80058bc <ai_boostrap+0xb8>)
 800585a:	6819      	ldr	r1, [r3, #0]
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	4613      	mov	r3, r2
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	1a9b      	subs	r3, r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	440b      	add	r3, r1
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	4916      	ldr	r1, [pc, #88]	@ (80058c4 <ai_boostrap+0xc0>)
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_SINE_MODEL_IN_NUM; idx++) {
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	3301      	adds	r3, #1
 8005876:	617b      	str	r3, [r7, #20]
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	2b00      	cmp	r3, #0
 800587c:	ddec      	ble.n	8005858 <ai_boostrap+0x54>

#if defined(AI_SINE_MODEL_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_SINE_MODEL_OUT_NUM; idx++) {
 800587e:	2300      	movs	r3, #0
 8005880:	613b      	str	r3, [r7, #16]
 8005882:	e00f      	b.n	80058a4 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 8005884:	4b0e      	ldr	r3, [pc, #56]	@ (80058c0 <ai_boostrap+0xbc>)
 8005886:	6819      	ldr	r1, [r3, #0]
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	4613      	mov	r3, r2
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	1a9b      	subs	r3, r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	440b      	add	r3, r1
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	490c      	ldr	r1, [pc, #48]	@ (80058c8 <ai_boostrap+0xc4>)
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_SINE_MODEL_OUT_NUM; idx++) {
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	3301      	adds	r3, #1
 80058a2:	613b      	str	r3, [r7, #16]
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	ddec      	ble.n	8005884 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_SINE_MODEL_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3718      	adds	r7, #24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	24000a20 	.word	0x24000a20
 80058b8:	0800a64c 	.word	0x0800a64c
 80058bc:	24000a24 	.word	0x24000a24
 80058c0:	24000a28 	.word	0x24000a28
 80058c4:	24000998 	.word	0x24000998
 80058c8:	2400099c 	.word	0x2400099c

080058cc <ai_run>:

static int ai_run(void)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_sine_model_run(sine_model, ai_input, ai_output);
 80058d2:	4b11      	ldr	r3, [pc, #68]	@ (8005918 <ai_run+0x4c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a11      	ldr	r2, [pc, #68]	@ (800591c <ai_run+0x50>)
 80058d8:	6811      	ldr	r1, [r2, #0]
 80058da:	4a11      	ldr	r2, [pc, #68]	@ (8005920 <ai_run+0x54>)
 80058dc:	6812      	ldr	r2, [r2, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fb16 	bl	8005f10 <ai_sine_model_run>
 80058e4:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d00c      	beq.n	8005906 <ai_run+0x3a>
    ai_log_err(ai_sine_model_get_error(sine_model),
 80058ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005918 <ai_run+0x4c>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 f9fd 	bl	8005cf0 <ai_sine_model_get_error>
 80058f6:	4603      	mov	r3, r0
 80058f8:	490a      	ldr	r1, [pc, #40]	@ (8005924 <ai_run+0x58>)
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7ff ff60 	bl	80057c0 <ai_log_err>
        "ai_sine_model_run");
    return -1;
 8005900:	f04f 33ff 	mov.w	r3, #4294967295
 8005904:	e003      	b.n	800590e <ai_run+0x42>
  }
  else
	  printToConsole("\r\n AI RUN \r\n");
 8005906:	4808      	ldr	r0, [pc, #32]	@ (8005928 <ai_run+0x5c>)
 8005908:	f7fb facc 	bl	8000ea4 <printToConsole>

  return 0;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	24000a20 	.word	0x24000a20
 800591c:	24000a24 	.word	0x24000a24
 8005920:	24000a28 	.word	0x24000a28
 8005924:	0800a66c 	.word	0x0800a66c
 8005928:	0800a680 	.word	0x0800a680
 800592c:	00000000 	.word	0x00000000

08005930 <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_i8* data[])
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b094      	sub	sp, #80	@ 0x50
 8005934:	af02      	add	r7, sp, #8
 8005936:	6078      	str	r0, [r7, #4]
	// Define buffer
		 char strs[40]; // Ensure this buffer is large enough

	// Generate a random value between 0 and 1
		double random_fractions = (double)rand() / RAND_MAX;
 8005938:	f001 fff2 	bl	8007920 <rand>
 800593c:	ee07 0a90 	vmov	s15, r0
 8005940:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8005944:	ed9f 5b1c 	vldr	d5, [pc, #112]	@ 80059b8 <acquire_and_process_data+0x88>
 8005948:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800594c:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38

		// Scale it to the range [0, 2*pi]
		double random_values = random_fractions * 2.0 * M_PI;
 8005950:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8005954:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005958:	ed9f 6b19 	vldr	d6, [pc, #100]	@ 80059c0 <acquire_and_process_data+0x90>
 800595c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005960:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30

		// Convert integer to string using snprintf
		snprintf(strs, sizeof(strs), "Inserted random value is: %f", random_values);
 8005964:	f107 0008 	add.w	r0, r7, #8
 8005968:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800596c:	e9cd 2300 	strd	r2, r3, [sp]
 8005970:	4a15      	ldr	r2, [pc, #84]	@ (80059c8 <acquire_and_process_data+0x98>)
 8005972:	2128      	movs	r1, #40	@ 0x28
 8005974:	f002 fdaa 	bl	80084cc <sniprintf>

		// Print to visualize the results
		printToConsole(strs);
 8005978:	f107 0308 	add.w	r3, r7, #8
 800597c:	4618      	mov	r0, r3
 800597e:	f7fb fa91 	bl	8000ea4 <printToConsole>

	// ai_i8 size = sizeof(data) / sizeof(data[0]);
	// Fill the array pointed to by data[0] with the value of position

	for (int i = 0; i < AI_SINE_MODEL_IN_NUM; i++) {
 8005982:	2300      	movs	r3, #0
 8005984:	647b      	str	r3, [r7, #68]	@ 0x44
 8005986:	e00f      	b.n	80059a8 <acquire_and_process_data+0x78>
		(*data)[i] = random_values;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800598e:	4413      	add	r3, r2
 8005990:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8005994:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8005998:	edc7 7a00 	vstr	s15, [r7]
 800599c:	783a      	ldrb	r2, [r7, #0]
 800599e:	b252      	sxtb	r2, r2
 80059a0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < AI_SINE_MODEL_IN_NUM; i++) {
 80059a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059a4:	3301      	adds	r3, #1
 80059a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80059a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	ddec      	ble.n	8005988 <acquire_and_process_data+0x58>
	}

	return 0;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3748      	adds	r7, #72	@ 0x48
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	ffc00000 	.word	0xffc00000
 80059bc:	41dfffff 	.word	0x41dfffff
 80059c0:	54442d18 	.word	0x54442d18
 80059c4:	400921fb 	.word	0x400921fb
 80059c8:	0800a690 	.word	0x0800a690

080059cc <post_process>:

int post_process(ai_i8* data[])
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  for (int idx=0; idx < AI_SINE_MODEL_OUT_NUM; idx++ )
  {
      data[idx] = ....
  }
  */
	uint8_t value_data[AI_SINE_MODEL_IN_NUM] = {};
 80059d4:	2300      	movs	r3, #0
 80059d6:	723b      	strb	r3, [r7, #8]

	for (int i = 0; i < AI_SINE_MODEL_IN_NUM; i++) {
 80059d8:	2300      	movs	r3, #0
 80059da:	60fb      	str	r3, [r7, #12]
 80059dc:	e032      	b.n	8005a44 <post_process+0x78>
		value_data[i] = (*data)[i];
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	4413      	add	r3, r2
 80059e6:	f993 3000 	ldrsb.w	r3, [r3]
 80059ea:	b2d9      	uxtb	r1, r3
 80059ec:	f107 0208 	add.w	r2, r7, #8
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4413      	add	r3, r2
 80059f4:	460a      	mov	r2, r1
 80059f6:	701a      	strb	r2, [r3, #0]
		if(value_data[i] >= 128)
 80059f8:	f107 0208 	add.w	r2, r7, #8
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4413      	add	r3, r2
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	b25b      	sxtb	r3, r3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	da0d      	bge.n	8005a24 <post_process+0x58>
		{
			value_data[i] -= 128;
 8005a08:	f107 0208 	add.w	r2, r7, #8
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4413      	add	r3, r2
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	3b80      	subs	r3, #128	@ 0x80
 8005a14:	b2d9      	uxtb	r1, r3
 8005a16:	f107 0208 	add.w	r2, r7, #8
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	460a      	mov	r2, r1
 8005a20:	701a      	strb	r2, [r3, #0]
 8005a22:	e00c      	b.n	8005a3e <post_process+0x72>
		}

		else
		{
			value_data[i] += 128;
 8005a24:	f107 0208 	add.w	r2, r7, #8
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	3b80      	subs	r3, #128	@ 0x80
 8005a30:	b2d9      	uxtb	r1, r3
 8005a32:	f107 0208 	add.w	r2, r7, #8
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	4413      	add	r3, r2
 8005a3a:	460a      	mov	r2, r1
 8005a3c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < AI_SINE_MODEL_IN_NUM; i++) {
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	3301      	adds	r3, #1
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	ddc9      	ble.n	80059de <post_process+0x12>
		}
	}
	/*
*/
  return 0;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8005a5c:	4805      	ldr	r0, [pc, #20]	@ (8005a74 <MX_X_CUBE_AI_Init+0x1c>)
 8005a5e:	f002 fd2d 	bl	80084bc <puts>
  printToConsole("\r\nTEMPLATE - initialization\r\n");
 8005a62:	4805      	ldr	r0, [pc, #20]	@ (8005a78 <MX_X_CUBE_AI_Init+0x20>)
 8005a64:	f7fb fa1e 	bl	8000ea4 <printToConsole>

  /* Create and initialize an instance of the model */
  ai_boostrap(data_activations0);
 8005a68:	4804      	ldr	r0, [pc, #16]	@ (8005a7c <MX_X_CUBE_AI_Init+0x24>)
 8005a6a:	f7ff fecb 	bl	8005804 <ai_boostrap>
    /* USER CODE END 5 */
}
 8005a6e:	bf00      	nop
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	0800a6b0 	.word	0x0800a6b0
 8005a78:	0800a6d0 	.word	0x0800a6d0
 8005a7c:	24000010 	.word	0x24000010

08005a80 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 8005a86:	f04f 33ff 	mov.w	r3, #4294967295
 8005a8a:	60fb      	str	r3, [r7, #12]
  uint8_t x_count = 0;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	72fb      	strb	r3, [r7, #11]
  //uint8_t* x_count_ptr = &x_count;

  printf("TEMPLATE - run - main loop\r\n");
 8005a90:	481b      	ldr	r0, [pc, #108]	@ (8005b00 <MX_X_CUBE_AI_Process+0x80>)
 8005a92:	f002 fd13 	bl	80084bc <puts>
  printToConsole("TEMPLATE - run - main loop\r\n");
 8005a96:	481b      	ldr	r0, [pc, #108]	@ (8005b04 <MX_X_CUBE_AI_Process+0x84>)
 8005a98:	f7fb fa04 	bl	8000ea4 <printToConsole>

  if (sine_model) {
 8005a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8005b08 <MX_X_CUBE_AI_Process+0x88>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d017      	beq.n	8005ad4 <MX_X_CUBE_AI_Process+0x54>

    do {
      /* 1 - acquire and pre-process input data */ // calls the function in the model
      res = acquire_and_process_data(data_ins);
 8005aa4:	4819      	ldr	r0, [pc, #100]	@ (8005b0c <MX_X_CUBE_AI_Process+0x8c>)
 8005aa6:	f7ff ff43 	bl	8005930 <acquire_and_process_data>
 8005aaa:	60f8      	str	r0, [r7, #12]
      /* 2 - process the data - call inference engine */ // calls the function in the model
      if (res == 0)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d102      	bne.n	8005ab8 <MX_X_CUBE_AI_Process+0x38>
        res = ai_run();
 8005ab2:	f7ff ff0b 	bl	80058cc <ai_run>
 8005ab6:	60f8      	str	r0, [r7, #12]
      /* 3- post-process the predictions */
      if (res == 0)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d103      	bne.n	8005ac6 <MX_X_CUBE_AI_Process+0x46>
        res = post_process(data_outs);
 8005abe:	4814      	ldr	r0, [pc, #80]	@ (8005b10 <MX_X_CUBE_AI_Process+0x90>)
 8005ac0:	f7ff ff84 	bl	80059cc <post_process>
 8005ac4:	60f8      	str	r0, [r7, #12]
      //printToConsole("Acquiring and Processing Data:");
      //HAL_UART_Transmit(&huart3, x_count_ptr, sizeof(x_count), 100);
      //printToConsole("\n");
      HAL_Delay(1000);
 8005ac6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005aca:	f7fb fae7 	bl	800109c <HAL_Delay>
    } while (res==0);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d0e7      	beq.n	8005aa4 <MX_X_CUBE_AI_Process+0x24>
  }

  if (res) {
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00d      	beq.n	8005af6 <MX_X_CUBE_AI_Process+0x76>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 8005ada:	2311      	movs	r3, #17
 8005adc:	713b      	strb	r3, [r7, #4]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2210      	movs	r2, #16
 8005ae2:	f362 231f 	bfi	r3, r2, #8, #24
 8005ae6:	607b      	str	r3, [r7, #4]
    ai_log_err(err, "Process has FAILED");
 8005ae8:	490a      	ldr	r1, [pc, #40]	@ (8005b14 <MX_X_CUBE_AI_Process+0x94>)
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7ff fe68 	bl	80057c0 <ai_log_err>
    printToConsole("Process has FAILED");
 8005af0:	4808      	ldr	r0, [pc, #32]	@ (8005b14 <MX_X_CUBE_AI_Process+0x94>)
 8005af2:	f7fb f9d7 	bl	8000ea4 <printToConsole>
  }
    /* USER CODE END 6 */
}
 8005af6:	bf00      	nop
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	0800a6f0 	.word	0x0800a6f0
 8005b04:	0800a70c 	.word	0x0800a70c
 8005b08:	24000a20 	.word	0x24000a20
 8005b0c:	24000998 	.word	0x24000998
 8005b10:	2400099c 	.word	0x2400099c
 8005b14:	0800a72c 	.word	0x0800a72c

08005b18 <sine_model_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool sine_model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_sine_model_activations_map, 1, params)) {
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	2101      	movs	r1, #1
 8005b26:	4825      	ldr	r0, [pc, #148]	@ (8005bbc <sine_model_configure_activations+0xa4>)
 8005b28:	f000 fad0 	bl	80060cc <ai_platform_get_activations_map>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d039      	beq.n	8005ba6 <sine_model_configure_activations+0x8e>
    /* Updating activations (byte) offsets */
    
    serving_default_dense_4_input0_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 60);
 8005b32:	4b22      	ldr	r3, [pc, #136]	@ (8005bbc <sine_model_configure_activations+0xa4>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	333c      	adds	r3, #60	@ 0x3c
 8005b38:	4a21      	ldr	r2, [pc, #132]	@ (8005bc0 <sine_model_configure_activations+0xa8>)
 8005b3a:	6093      	str	r3, [r2, #8]
    serving_default_dense_4_input0_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 60);
 8005b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8005bbc <sine_model_configure_activations+0xa4>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	333c      	adds	r3, #60	@ 0x3c
 8005b42:	4a1f      	ldr	r2, [pc, #124]	@ (8005bc0 <sine_model_configure_activations+0xa8>)
 8005b44:	60d3      	str	r3, [r2, #12]
    gemm_0_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 8005b46:	4b1d      	ldr	r3, [pc, #116]	@ (8005bbc <sine_model_configure_activations+0xa4>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3340      	adds	r3, #64	@ 0x40
 8005b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8005bc4 <sine_model_configure_activations+0xac>)
 8005b4e:	6093      	str	r3, [r2, #8]
    gemm_0_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 8005b50:	4b1a      	ldr	r3, [pc, #104]	@ (8005bbc <sine_model_configure_activations+0xa4>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3340      	adds	r3, #64	@ 0x40
 8005b56:	4a1b      	ldr	r2, [pc, #108]	@ (8005bc4 <sine_model_configure_activations+0xac>)
 8005b58:	60d3      	str	r3, [r2, #12]
    nl_0_nl_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 8005b5a:	4b18      	ldr	r3, [pc, #96]	@ (8005bbc <sine_model_configure_activations+0xa4>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	3340      	adds	r3, #64	@ 0x40
 8005b60:	4a19      	ldr	r2, [pc, #100]	@ (8005bc8 <sine_model_configure_activations+0xb0>)
 8005b62:	6093      	str	r3, [r2, #8]
    nl_0_nl_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 8005b64:	4b15      	ldr	r3, [pc, #84]	@ (8005bbc <sine_model_configure_activations+0xa4>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3340      	adds	r3, #64	@ 0x40
 8005b6a:	4a17      	ldr	r2, [pc, #92]	@ (8005bc8 <sine_model_configure_activations+0xb0>)
 8005b6c:	60d3      	str	r3, [r2, #12]
    gemm_1_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 0);
 8005b6e:	4b13      	ldr	r3, [pc, #76]	@ (8005bbc <sine_model_configure_activations+0xa4>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a16      	ldr	r2, [pc, #88]	@ (8005bcc <sine_model_configure_activations+0xb4>)
 8005b74:	6093      	str	r3, [r2, #8]
    gemm_1_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 0);
 8005b76:	4b11      	ldr	r3, [pc, #68]	@ (8005bbc <sine_model_configure_activations+0xa4>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a14      	ldr	r2, [pc, #80]	@ (8005bcc <sine_model_configure_activations+0xb4>)
 8005b7c:	60d3      	str	r3, [r2, #12]
    nl_1_nl_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 8005b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8005bbc <sine_model_configure_activations+0xa4>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	3340      	adds	r3, #64	@ 0x40
 8005b84:	4a12      	ldr	r2, [pc, #72]	@ (8005bd0 <sine_model_configure_activations+0xb8>)
 8005b86:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 8005b88:	4b0c      	ldr	r3, [pc, #48]	@ (8005bbc <sine_model_configure_activations+0xa4>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3340      	adds	r3, #64	@ 0x40
 8005b8e:	4a10      	ldr	r2, [pc, #64]	@ (8005bd0 <sine_model_configure_activations+0xb8>)
 8005b90:	60d3      	str	r3, [r2, #12]
    gemm_2_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 0);
 8005b92:	4b0a      	ldr	r3, [pc, #40]	@ (8005bbc <sine_model_configure_activations+0xa4>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a0f      	ldr	r2, [pc, #60]	@ (8005bd4 <sine_model_configure_activations+0xbc>)
 8005b98:	6093      	str	r3, [r2, #8]
    gemm_2_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 0);
 8005b9a:	4b08      	ldr	r3, [pc, #32]	@ (8005bbc <sine_model_configure_activations+0xa4>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a0d      	ldr	r2, [pc, #52]	@ (8005bd4 <sine_model_configure_activations+0xbc>)
 8005ba0:	60d3      	str	r3, [r2, #12]
    return true;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e005      	b.n	8005bb2 <sine_model_configure_activations+0x9a>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8005ba6:	2213      	movs	r2, #19
 8005ba8:	2130      	movs	r1, #48	@ 0x30
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fb0c 	bl	80061c8 <ai_platform_network_set_error>
  return false;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	24000a2c 	.word	0x24000a2c
 8005bc0:	24000014 	.word	0x24000014
 8005bc4:	24000024 	.word	0x24000024
 8005bc8:	24000034 	.word	0x24000034
 8005bcc:	24000044 	.word	0x24000044
 8005bd0:	24000054 	.word	0x24000054
 8005bd4:	24000064 	.word	0x24000064

08005bd8 <sine_model_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool sine_model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_sine_model_weights_map, 1, params)) {
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	2101      	movs	r1, #1
 8005be6:	483b      	ldr	r0, [pc, #236]	@ (8005cd4 <sine_model_configure_weights+0xfc>)
 8005be8:	f000 fa18 	bl	800601c <ai_platform_get_weights_map>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d065      	beq.n	8005cbe <sine_model_configure_weights+0xe6>
    /* Updating weights (byte) offsets */
    
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8005bf2:	4b39      	ldr	r3, [pc, #228]	@ (8005cd8 <sine_model_configure_weights+0x100>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005bfa:	4a37      	ldr	r2, [pc, #220]	@ (8005cd8 <sine_model_configure_weights+0x100>)
 8005bfc:	6013      	str	r3, [r2, #0]
    gemm_0_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 0);
 8005bfe:	4b35      	ldr	r3, [pc, #212]	@ (8005cd4 <sine_model_configure_weights+0xfc>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a35      	ldr	r2, [pc, #212]	@ (8005cd8 <sine_model_configure_weights+0x100>)
 8005c04:	6093      	str	r3, [r2, #8]
    gemm_0_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 0);
 8005c06:	4b33      	ldr	r3, [pc, #204]	@ (8005cd4 <sine_model_configure_weights+0xfc>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a33      	ldr	r2, [pc, #204]	@ (8005cd8 <sine_model_configure_weights+0x100>)
 8005c0c:	60d3      	str	r3, [r2, #12]
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c0e:	4b33      	ldr	r3, [pc, #204]	@ (8005cdc <sine_model_configure_weights+0x104>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c16:	4a31      	ldr	r2, [pc, #196]	@ (8005cdc <sine_model_configure_weights+0x104>)
 8005c18:	6013      	str	r3, [r2, #0]
    gemm_0_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 64);
 8005c1a:	4b2e      	ldr	r3, [pc, #184]	@ (8005cd4 <sine_model_configure_weights+0xfc>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3340      	adds	r3, #64	@ 0x40
 8005c20:	4a2e      	ldr	r2, [pc, #184]	@ (8005cdc <sine_model_configure_weights+0x104>)
 8005c22:	6093      	str	r3, [r2, #8]
    gemm_0_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 64);
 8005c24:	4b2b      	ldr	r3, [pc, #172]	@ (8005cd4 <sine_model_configure_weights+0xfc>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3340      	adds	r3, #64	@ 0x40
 8005c2a:	4a2c      	ldr	r2, [pc, #176]	@ (8005cdc <sine_model_configure_weights+0x104>)
 8005c2c:	60d3      	str	r3, [r2, #12]
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c2e:	4b2c      	ldr	r3, [pc, #176]	@ (8005ce0 <sine_model_configure_weights+0x108>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c36:	4a2a      	ldr	r2, [pc, #168]	@ (8005ce0 <sine_model_configure_weights+0x108>)
 8005c38:	6013      	str	r3, [r2, #0]
    gemm_1_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 128);
 8005c3a:	4b26      	ldr	r3, [pc, #152]	@ (8005cd4 <sine_model_configure_weights+0xfc>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	3380      	adds	r3, #128	@ 0x80
 8005c40:	4a27      	ldr	r2, [pc, #156]	@ (8005ce0 <sine_model_configure_weights+0x108>)
 8005c42:	6093      	str	r3, [r2, #8]
    gemm_1_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 128);
 8005c44:	4b23      	ldr	r3, [pc, #140]	@ (8005cd4 <sine_model_configure_weights+0xfc>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3380      	adds	r3, #128	@ 0x80
 8005c4a:	4a25      	ldr	r2, [pc, #148]	@ (8005ce0 <sine_model_configure_weights+0x108>)
 8005c4c:	60d3      	str	r3, [r2, #12]
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c4e:	4b25      	ldr	r3, [pc, #148]	@ (8005ce4 <sine_model_configure_weights+0x10c>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c56:	4a23      	ldr	r2, [pc, #140]	@ (8005ce4 <sine_model_configure_weights+0x10c>)
 8005c58:	6013      	str	r3, [r2, #0]
    gemm_1_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 1152);
 8005c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8005cd4 <sine_model_configure_weights+0xfc>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8005c62:	4a20      	ldr	r2, [pc, #128]	@ (8005ce4 <sine_model_configure_weights+0x10c>)
 8005c64:	6093      	str	r3, [r2, #8]
    gemm_1_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 1152);
 8005c66:	4b1b      	ldr	r3, [pc, #108]	@ (8005cd4 <sine_model_configure_weights+0xfc>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8005c6e:	4a1d      	ldr	r2, [pc, #116]	@ (8005ce4 <sine_model_configure_weights+0x10c>)
 8005c70:	60d3      	str	r3, [r2, #12]
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c72:	4b1d      	ldr	r3, [pc, #116]	@ (8005ce8 <sine_model_configure_weights+0x110>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c7a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ce8 <sine_model_configure_weights+0x110>)
 8005c7c:	6013      	str	r3, [r2, #0]
    gemm_2_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 1216);
 8005c7e:	4b15      	ldr	r3, [pc, #84]	@ (8005cd4 <sine_model_configure_weights+0xfc>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8005c86:	4a18      	ldr	r2, [pc, #96]	@ (8005ce8 <sine_model_configure_weights+0x110>)
 8005c88:	6093      	str	r3, [r2, #8]
    gemm_2_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 1216);
 8005c8a:	4b12      	ldr	r3, [pc, #72]	@ (8005cd4 <sine_model_configure_weights+0xfc>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8005c92:	4a15      	ldr	r2, [pc, #84]	@ (8005ce8 <sine_model_configure_weights+0x110>)
 8005c94:	60d3      	str	r3, [r2, #12]
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c96:	4b15      	ldr	r3, [pc, #84]	@ (8005cec <sine_model_configure_weights+0x114>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c9e:	4a13      	ldr	r2, [pc, #76]	@ (8005cec <sine_model_configure_weights+0x114>)
 8005ca0:	6013      	str	r3, [r2, #0]
    gemm_2_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 1280);
 8005ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8005cd4 <sine_model_configure_weights+0xfc>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005caa:	4a10      	ldr	r2, [pc, #64]	@ (8005cec <sine_model_configure_weights+0x114>)
 8005cac:	6093      	str	r3, [r2, #8]
    gemm_2_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 1280);
 8005cae:	4b09      	ldr	r3, [pc, #36]	@ (8005cd4 <sine_model_configure_weights+0xfc>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cb6:	4a0d      	ldr	r2, [pc, #52]	@ (8005cec <sine_model_configure_weights+0x114>)
 8005cb8:	60d3      	str	r3, [r2, #12]
    return true;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e005      	b.n	8005cca <sine_model_configure_weights+0xf2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8005cbe:	2212      	movs	r2, #18
 8005cc0:	2130      	movs	r1, #48	@ 0x30
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fa80 	bl	80061c8 <ai_platform_network_set_error>
  return false;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	24000a30 	.word	0x24000a30
 8005cd8:	24000074 	.word	0x24000074
 8005cdc:	24000084 	.word	0x24000084
 8005ce0:	24000094 	.word	0x24000094
 8005ce4:	240000a4 	.word	0x240000a4
 8005ce8:	240000b4 	.word	0x240000b4
 8005cec:	240000c4 	.word	0x240000c4

08005cf0 <ai_sine_model_get_error>:
}


AI_API_ENTRY
ai_error ai_sine_model_get_error(ai_handle network)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 fa59 	bl	80061b0 <ai_platform_network_get_error>
 8005cfe:	4603      	mov	r3, r0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <ai_sine_model_create>:


AI_API_ENTRY
ai_error ai_sine_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af02      	add	r7, sp, #8
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8005d12:	2300      	movs	r3, #0
 8005d14:	9301      	str	r3, [sp, #4]
 8005d16:	2305      	movs	r3, #5
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	4a04      	ldr	r2, [pc, #16]	@ (8005d30 <ai_sine_model_create+0x28>)
 8005d1e:	6839      	ldr	r1, [r7, #0]
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 fb45 	bl	80063b0 <ai_platform_network_create>
 8005d26:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	240005f8 	.word	0x240005f8

08005d34 <ai_sine_model_create_and_init>:


AI_API_ENTRY
ai_error ai_sine_model_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b094      	sub	sp, #80	@ 0x50
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_sine_model_create(network, AI_SINE_MODEL_DATA_CONFIG);
 8005d40:	2100      	movs	r1, #0
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f7ff ffe0 	bl	8005d08 <ai_sine_model_create>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 8005d4c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d001      	beq.n	8005d58 <ai_sine_model_create_and_init+0x24>
    return err;
 8005d54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d56:	e067      	b.n	8005e28 <ai_sine_model_create_and_init+0xf4>
  }
  
  if (ai_sine_model_data_params_get(&params) != true) {
 8005d58:	f107 0310 	add.w	r3, r7, #16
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f000 f8e7 	bl	8005f30 <ai_sine_model_data_params_get>
 8005d62:	4603      	mov	r3, r0
 8005d64:	f083 0301 	eor.w	r3, r3, #1
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d008      	beq.n	8005d80 <ai_sine_model_create_and_init+0x4c>
    err = ai_sine_model_get_error(*network);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7ff ffbc 	bl	8005cf0 <ai_sine_model_get_error>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 8005d7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d7e:	e053      	b.n	8005e28 <ai_sine_model_create_and_init+0xf4>
  }
#if defined(AI_SINE_MODEL_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8005d80:	2300      	movs	r3, #0
 8005d82:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005d86:	e012      	b.n	8005dae <ai_sine_model_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8005d88:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 8005d8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	4413      	add	r3, r2
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	f107 0310 	add.w	r3, r7, #16
 8005d9c:	330c      	adds	r3, #12
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 f92c 	bl	8005ffc <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8005da4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005da8:	3301      	adds	r3, #1
 8005daa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d004      	beq.n	8005dbe <ai_sine_model_create_and_init+0x8a>
 8005db4:	8bfb      	ldrh	r3, [r7, #30]
 8005db6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d3e4      	bcc.n	8005d88 <ai_sine_model_create_and_init+0x54>
  }
#endif
#if defined(AI_SINE_MODEL_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005dc4:	e012      	b.n	8005dec <ai_sine_model_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8005dc6:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 8005dca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	f107 0310 	add.w	r3, r7, #16
 8005dda:	3304      	adds	r3, #4
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f000 f90d 	bl	8005ffc <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8005de2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005de6:	3301      	adds	r3, #1
 8005de8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d004      	beq.n	8005dfc <ai_sine_model_create_and_init+0xc8>
 8005df2:	8afb      	ldrh	r3, [r7, #22]
 8005df4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d3e4      	bcc.n	8005dc6 <ai_sine_model_create_and_init+0x92>
  }
#endif
  if (ai_sine_model_init(*network, &params) != true) {
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f107 0210 	add.w	r2, r7, #16
 8005e04:	4611      	mov	r1, r2
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 f846 	bl	8005e98 <ai_sine_model_init>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	f083 0301 	eor.w	r3, r3, #1
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d006      	beq.n	8005e26 <ai_sine_model_create_and_init+0xf2>
    err = ai_sine_model_get_error(*network);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7ff ff67 	bl	8005cf0 <ai_sine_model_get_error>
 8005e22:	4603      	mov	r3, r0
 8005e24:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 8005e26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3750      	adds	r7, #80	@ 0x50
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <ai_sine_model_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_sine_model_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d104      	bne.n	8005e4a <ai_sine_model_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8005e40:	4b06      	ldr	r3, [pc, #24]	@ (8005e5c <ai_sine_model_inputs_get+0x2c>)
 8005e42:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a06      	ldr	r2, [pc, #24]	@ (8005e60 <ai_sine_model_inputs_get+0x30>)
 8005e48:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8005e4a:	6839      	ldr	r1, [r7, #0]
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 f9c1 	bl	80061d4 <ai_platform_inputs_get>
 8005e52:	4603      	mov	r3, r0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3708      	adds	r7, #8
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	240005f8 	.word	0x240005f8
 8005e60:	a1c00100 	.word	0xa1c00100

08005e64 <ai_sine_model_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_sine_model_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d104      	bne.n	8005e7e <ai_sine_model_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8005e74:	4b06      	ldr	r3, [pc, #24]	@ (8005e90 <ai_sine_model_outputs_get+0x2c>)
 8005e76:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a06      	ldr	r2, [pc, #24]	@ (8005e94 <ai_sine_model_outputs_get+0x30>)
 8005e7c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fa1f 	bl	80062c4 <ai_platform_outputs_get>
 8005e86:	4603      	mov	r3, r0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	240005f8 	.word	0x240005f8
 8005e94:	a1c00100 	.word	0xa1c00100

08005e98 <ai_sine_model_init>:


AI_API_ENTRY
ai_bool ai_sine_model_init(
  ai_handle network, const ai_network_params* params)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8005ea2:	6839      	ldr	r1, [r7, #0]
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fac5 	bl	8006434 <ai_platform_network_init>
 8005eaa:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 8005eac:	2301      	movs	r3, #1
 8005eae:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <ai_sine_model_init+0x22>
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	e026      	b.n	8005f08 <ai_sine_model_init+0x70>
  ok &= sine_model_configure_weights(net_ctx, params);
 8005eba:	6839      	ldr	r1, [r7, #0]
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f7ff fe8b 	bl	8005bd8 <sine_model_configure_weights>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	7afb      	ldrb	r3, [r7, #11]
 8005ec8:	4013      	ands	r3, r2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	bf14      	ite	ne
 8005ece:	2301      	movne	r3, #1
 8005ed0:	2300      	moveq	r3, #0
 8005ed2:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_activations(net_ctx, params);
 8005ed4:	6839      	ldr	r1, [r7, #0]
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f7ff fe1e 	bl	8005b18 <sine_model_configure_activations>
 8005edc:	4603      	mov	r3, r0
 8005ede:	461a      	mov	r2, r3
 8005ee0:	7afb      	ldrb	r3, [r7, #11]
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	bf14      	ite	ne
 8005ee8:	2301      	movne	r3, #1
 8005eea:	2300      	moveq	r3, #0
 8005eec:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 fb60 	bl	80065b4 <ai_platform_network_post_init>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	7afb      	ldrb	r3, [r7, #11]
 8005efa:	4013      	ands	r3, r2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	bf14      	ite	ne
 8005f00:	2301      	movne	r3, #1
 8005f02:	2300      	moveq	r3, #0
 8005f04:	72fb      	strb	r3, [r7, #11]

  return ok;
 8005f06:	7afb      	ldrb	r3, [r7, #11]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <ai_sine_model_run>:


AI_API_ENTRY
ai_i32 ai_sine_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	68b9      	ldr	r1, [r7, #8]
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f000 fb77 	bl	8006614 <ai_platform_network_process>
 8005f26:	4603      	mov	r3, r0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <ai_sine_model_data_params_get>:
 * @ingroup sine_model_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_sine_model_data_params_get(ai_network_params* params)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <ai_sine_model_data_params_get+0x12>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e016      	b.n	8005f70 <ai_sine_model_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8005f42:	4a0d      	ldr	r2, [pc, #52]	@ (8005f78 <ai_sine_model_data_params_get+0x48>)
 8005f44:	f107 0310 	add.w	r3, r7, #16
 8005f48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f4c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_SINE_MODEL_DATA_ACTIVATIONS_COUNT, g_sine_model_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8005f50:	4a0a      	ldr	r2, [pc, #40]	@ (8005f7c <ai_sine_model_data_params_get+0x4c>)
 8005f52:	f107 0308 	add.w	r3, r7, #8
 8005f56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f5a:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_SINE_MODEL_DATA_WEIGHTS_COUNT, g_sine_model_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8005f5e:	f107 0210 	add.w	r2, r7, #16
 8005f62:	f107 0308 	add.w	r3, r7, #8
 8005f66:	4619      	mov	r1, r3
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 f907 	bl	800617c <ai_platform_bind_network_params>
 8005f6e:	4603      	mov	r3, r0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3718      	adds	r7, #24
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	0800a760 	.word	0x0800a760
 8005f7c:	0800a768 	.word	0x0800a768

08005f80 <ai_buffer_get_size>:
 8005f80:	b368      	cbz	r0, 8005fde <ai_buffer_get_size+0x5e>
 8005f82:	4b17      	ldr	r3, [pc, #92]	@ (8005fe0 <ai_buffer_get_size+0x60>)
 8005f84:	4a17      	ldr	r2, [pc, #92]	@ (8005fe4 <ai_buffer_get_size+0x64>)
 8005f86:	b410      	push	{r4}
 8005f88:	6804      	ldr	r4, [r0, #0]
 8005f8a:	4023      	ands	r3, r4
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d123      	bne.n	8005fd8 <ai_buffer_get_size+0x58>
 8005f90:	b311      	cbz	r1, 8005fd8 <ai_buffer_get_size+0x58>
 8005f92:	6984      	ldr	r4, [r0, #24]
 8005f94:	6862      	ldr	r2, [r4, #4]
 8005f96:	321f      	adds	r2, #31
 8005f98:	f022 021f 	bic.w	r2, r2, #31
 8005f9c:	7d03      	ldrb	r3, [r0, #20]
 8005f9e:	6941      	ldr	r1, [r0, #20]
 8005fa0:	f1a3 0301 	sub.w	r3, r3, #1
 8005fa4:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8005fa8:	fab3 f383 	clz	r3, r3
 8005fac:	095b      	lsrs	r3, r3, #5
 8005fae:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8005fb2:	da0c      	bge.n	8005fce <ai_buffer_get_size+0x4e>
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d103      	bne.n	8005fc0 <ai_buffer_get_size+0x40>
 8005fb8:	2802      	cmp	r0, #2
 8005fba:	f04f 0302 	mov.w	r3, #2
 8005fbe:	d006      	beq.n	8005fce <ai_buffer_get_size+0x4e>
 8005fc0:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	4298      	cmp	r0, r3
 8005fc8:	fb01 f202 	mul.w	r2, r1, r2
 8005fcc:	d1f2      	bne.n	8005fb4 <ai_buffer_get_size+0x34>
 8005fce:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8005fd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fd6:	4770      	bx	lr
 8005fd8:	6984      	ldr	r4, [r0, #24]
 8005fda:	6862      	ldr	r2, [r4, #4]
 8005fdc:	e7de      	b.n	8005f9c <ai_buffer_get_size+0x1c>
 8005fde:	4770      	bx	lr
 8005fe0:	017fffff 	.word	0x017fffff
 8005fe4:	000400c0 	.word	0x000400c0

08005fe8 <ai_buffer_array_sane>:
 8005fe8:	b138      	cbz	r0, 8005ffa <ai_buffer_array_sane+0x12>
 8005fea:	6843      	ldr	r3, [r0, #4]
 8005fec:	b123      	cbz	r3, 8005ff8 <ai_buffer_array_sane+0x10>
 8005fee:	8840      	ldrh	r0, [r0, #2]
 8005ff0:	3800      	subs	r0, #0
 8005ff2:	bf18      	it	ne
 8005ff4:	2001      	movne	r0, #1
 8005ff6:	4770      	bx	lr
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	4770      	bx	lr

08005ffc <ai_buffer_array_item_set_address>:
 8005ffc:	b150      	cbz	r0, 8006014 <ai_buffer_array_item_set_address+0x18>
 8005ffe:	6843      	ldr	r3, [r0, #4]
 8006000:	b14b      	cbz	r3, 8006016 <ai_buffer_array_item_set_address+0x1a>
 8006002:	8840      	ldrh	r0, [r0, #2]
 8006004:	b900      	cbnz	r0, 8006008 <ai_buffer_array_item_set_address+0xc>
 8006006:	4770      	bx	lr
 8006008:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800600c:	2001      	movs	r0, #1
 800600e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006012:	605a      	str	r2, [r3, #4]
 8006014:	4770      	bx	lr
 8006016:	4618      	mov	r0, r3
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop

0800601c <ai_platform_get_weights_map>:
 800601c:	2900      	cmp	r1, #0
 800601e:	bf18      	it	ne
 8006020:	2800      	cmpne	r0, #0
 8006022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006024:	bf0c      	ite	eq
 8006026:	2401      	moveq	r4, #1
 8006028:	2400      	movne	r4, #0
 800602a:	2a00      	cmp	r2, #0
 800602c:	bf08      	it	eq
 800602e:	f044 0401 	orreq.w	r4, r4, #1
 8006032:	b114      	cbz	r4, 800603a <ai_platform_get_weights_map+0x1e>
 8006034:	2400      	movs	r4, #0
 8006036:	4620      	mov	r0, r4
 8006038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800603a:	4616      	mov	r6, r2
 800603c:	4b22      	ldr	r3, [pc, #136]	@ (80060c8 <ai_platform_get_weights_map+0xac>)
 800603e:	6812      	ldr	r2, [r2, #0]
 8006040:	4605      	mov	r5, r0
 8006042:	460f      	mov	r7, r1
 8006044:	429a      	cmp	r2, r3
 8006046:	d022      	beq.n	800608e <ai_platform_get_weights_map+0x72>
 8006048:	6870      	ldr	r0, [r6, #4]
 800604a:	2800      	cmp	r0, #0
 800604c:	d0f2      	beq.n	8006034 <ai_platform_get_weights_map+0x18>
 800604e:	6806      	ldr	r6, [r0, #0]
 8006050:	429e      	cmp	r6, r3
 8006052:	d006      	beq.n	8006062 <ai_platform_get_weights_map+0x46>
 8006054:	f1a1 0401 	sub.w	r4, r1, #1
 8006058:	6028      	str	r0, [r5, #0]
 800605a:	fab4 f484 	clz	r4, r4
 800605e:	0964      	lsrs	r4, r4, #5
 8006060:	e7e9      	b.n	8006036 <ai_platform_get_weights_map+0x1a>
 8006062:	3d04      	subs	r5, #4
 8006064:	4602      	mov	r2, r0
 8006066:	4621      	mov	r1, r4
 8006068:	e000      	b.n	800606c <ai_platform_get_weights_map+0x50>
 800606a:	4619      	mov	r1, r3
 800606c:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8006070:	42b3      	cmp	r3, r6
 8006072:	d025      	beq.n	80060c0 <ai_platform_get_weights_map+0xa4>
 8006074:	f845 3f04 	str.w	r3, [r5, #4]!
 8006078:	1c4b      	adds	r3, r1, #1
 800607a:	429f      	cmp	r7, r3
 800607c:	d8f5      	bhi.n	800606a <ai_platform_get_weights_map+0x4e>
 800607e:	d1da      	bne.n	8006036 <ai_platform_get_weights_map+0x1a>
 8006080:	3102      	adds	r1, #2
 8006082:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8006086:	42b3      	cmp	r3, r6
 8006088:	d1d5      	bne.n	8006036 <ai_platform_get_weights_map+0x1a>
 800608a:	2401      	movs	r4, #1
 800608c:	e7d3      	b.n	8006036 <ai_platform_get_weights_map+0x1a>
 800608e:	1d30      	adds	r0, r6, #4
 8006090:	f7ff ffaa 	bl	8005fe8 <ai_buffer_array_sane>
 8006094:	2800      	cmp	r0, #0
 8006096:	d0cd      	beq.n	8006034 <ai_platform_get_weights_map+0x18>
 8006098:	88f3      	ldrh	r3, [r6, #6]
 800609a:	429f      	cmp	r7, r3
 800609c:	d1ca      	bne.n	8006034 <ai_platform_get_weights_map+0x18>
 800609e:	3d04      	subs	r5, #4
 80060a0:	4622      	mov	r2, r4
 80060a2:	68b3      	ldr	r3, [r6, #8]
 80060a4:	4423      	add	r3, r4
 80060a6:	341c      	adds	r4, #28
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	b123      	cbz	r3, 80060b6 <ai_platform_get_weights_map+0x9a>
 80060ac:	3201      	adds	r2, #1
 80060ae:	f845 3f04 	str.w	r3, [r5, #4]!
 80060b2:	4297      	cmp	r7, r2
 80060b4:	d8f5      	bhi.n	80060a2 <ai_platform_get_weights_map+0x86>
 80060b6:	1abc      	subs	r4, r7, r2
 80060b8:	fab4 f484 	clz	r4, r4
 80060bc:	0964      	lsrs	r4, r4, #5
 80060be:	e7ba      	b.n	8006036 <ai_platform_get_weights_map+0x1a>
 80060c0:	428f      	cmp	r7, r1
 80060c2:	d1b8      	bne.n	8006036 <ai_platform_get_weights_map+0x1a>
 80060c4:	e7e1      	b.n	800608a <ai_platform_get_weights_map+0x6e>
 80060c6:	bf00      	nop
 80060c8:	a1facade 	.word	0xa1facade

080060cc <ai_platform_get_activations_map>:
 80060cc:	2900      	cmp	r1, #0
 80060ce:	bf18      	it	ne
 80060d0:	2800      	cmpne	r0, #0
 80060d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060d4:	bf0c      	ite	eq
 80060d6:	2401      	moveq	r4, #1
 80060d8:	2400      	movne	r4, #0
 80060da:	2a00      	cmp	r2, #0
 80060dc:	bf08      	it	eq
 80060de:	f044 0401 	orreq.w	r4, r4, #1
 80060e2:	b114      	cbz	r4, 80060ea <ai_platform_get_activations_map+0x1e>
 80060e4:	2400      	movs	r4, #0
 80060e6:	4620      	mov	r0, r4
 80060e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060ea:	4616      	mov	r6, r2
 80060ec:	4b22      	ldr	r3, [pc, #136]	@ (8006178 <ai_platform_get_activations_map+0xac>)
 80060ee:	6812      	ldr	r2, [r2, #0]
 80060f0:	4605      	mov	r5, r0
 80060f2:	460f      	mov	r7, r1
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d022      	beq.n	800613e <ai_platform_get_activations_map+0x72>
 80060f8:	6a30      	ldr	r0, [r6, #32]
 80060fa:	2800      	cmp	r0, #0
 80060fc:	d0f2      	beq.n	80060e4 <ai_platform_get_activations_map+0x18>
 80060fe:	6806      	ldr	r6, [r0, #0]
 8006100:	429e      	cmp	r6, r3
 8006102:	d006      	beq.n	8006112 <ai_platform_get_activations_map+0x46>
 8006104:	f1a1 0401 	sub.w	r4, r1, #1
 8006108:	6028      	str	r0, [r5, #0]
 800610a:	fab4 f484 	clz	r4, r4
 800610e:	0964      	lsrs	r4, r4, #5
 8006110:	e7e9      	b.n	80060e6 <ai_platform_get_activations_map+0x1a>
 8006112:	3d04      	subs	r5, #4
 8006114:	4602      	mov	r2, r0
 8006116:	4621      	mov	r1, r4
 8006118:	e000      	b.n	800611c <ai_platform_get_activations_map+0x50>
 800611a:	4619      	mov	r1, r3
 800611c:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8006120:	42b3      	cmp	r3, r6
 8006122:	d026      	beq.n	8006172 <ai_platform_get_activations_map+0xa6>
 8006124:	f845 3f04 	str.w	r3, [r5, #4]!
 8006128:	1c4b      	adds	r3, r1, #1
 800612a:	429f      	cmp	r7, r3
 800612c:	d8f5      	bhi.n	800611a <ai_platform_get_activations_map+0x4e>
 800612e:	d1da      	bne.n	80060e6 <ai_platform_get_activations_map+0x1a>
 8006130:	3102      	adds	r1, #2
 8006132:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8006136:	42b3      	cmp	r3, r6
 8006138:	d1d5      	bne.n	80060e6 <ai_platform_get_activations_map+0x1a>
 800613a:	2401      	movs	r4, #1
 800613c:	e7d3      	b.n	80060e6 <ai_platform_get_activations_map+0x1a>
 800613e:	f106 000c 	add.w	r0, r6, #12
 8006142:	f7ff ff51 	bl	8005fe8 <ai_buffer_array_sane>
 8006146:	2800      	cmp	r0, #0
 8006148:	d0cc      	beq.n	80060e4 <ai_platform_get_activations_map+0x18>
 800614a:	89f3      	ldrh	r3, [r6, #14]
 800614c:	429f      	cmp	r7, r3
 800614e:	d1c9      	bne.n	80060e4 <ai_platform_get_activations_map+0x18>
 8006150:	3d04      	subs	r5, #4
 8006152:	4622      	mov	r2, r4
 8006154:	6933      	ldr	r3, [r6, #16]
 8006156:	4423      	add	r3, r4
 8006158:	341c      	adds	r4, #28
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	b123      	cbz	r3, 8006168 <ai_platform_get_activations_map+0x9c>
 800615e:	3201      	adds	r2, #1
 8006160:	f845 3f04 	str.w	r3, [r5, #4]!
 8006164:	4297      	cmp	r7, r2
 8006166:	d8f5      	bhi.n	8006154 <ai_platform_get_activations_map+0x88>
 8006168:	1abc      	subs	r4, r7, r2
 800616a:	fab4 f484 	clz	r4, r4
 800616e:	0964      	lsrs	r4, r4, #5
 8006170:	e7b9      	b.n	80060e6 <ai_platform_get_activations_map+0x1a>
 8006172:	428f      	cmp	r7, r1
 8006174:	d1b7      	bne.n	80060e6 <ai_platform_get_activations_map+0x1a>
 8006176:	e7e0      	b.n	800613a <ai_platform_get_activations_map+0x6e>
 8006178:	a1facade 	.word	0xa1facade

0800617c <ai_platform_bind_network_params>:
 800617c:	2a00      	cmp	r2, #0
 800617e:	bf18      	it	ne
 8006180:	2900      	cmpne	r1, #0
 8006182:	d010      	beq.n	80061a6 <ai_platform_bind_network_params+0x2a>
 8006184:	b178      	cbz	r0, 80061a6 <ai_platform_bind_network_params+0x2a>
 8006186:	4603      	mov	r3, r0
 8006188:	4808      	ldr	r0, [pc, #32]	@ (80061ac <ai_platform_bind_network_params+0x30>)
 800618a:	f103 0c0c 	add.w	ip, r3, #12
 800618e:	f843 0b04 	str.w	r0, [r3], #4
 8006192:	c903      	ldmia	r1, {r0, r1}
 8006194:	e883 0003 	stmia.w	r3, {r0, r1}
 8006198:	2301      	movs	r3, #1
 800619a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800619e:	e88c 0003 	stmia.w	ip, {r0, r1}
 80061a2:	4618      	mov	r0, r3
 80061a4:	4770      	bx	lr
 80061a6:	2300      	movs	r3, #0
 80061a8:	4618      	mov	r0, r3
 80061aa:	4770      	bx	lr
 80061ac:	a1facade 	.word	0xa1facade

080061b0 <ai_platform_network_get_error>:
 80061b0:	4b04      	ldr	r3, [pc, #16]	@ (80061c4 <ai_platform_network_get_error+0x14>)
 80061b2:	6802      	ldr	r2, [r0, #0]
 80061b4:	4393      	bics	r3, r2
 80061b6:	d102      	bne.n	80061be <ai_platform_network_get_error+0xe>
 80061b8:	300c      	adds	r0, #12
 80061ba:	f000 bc73 	b.w	8006aa4 <core_get_error>
 80061be:	f241 0010 	movw	r0, #4112	@ 0x1010
 80061c2:	4770      	bx	lr
 80061c4:	a1c00100 	.word	0xa1c00100

080061c8 <ai_platform_network_set_error>:
 80061c8:	b110      	cbz	r0, 80061d0 <ai_platform_network_set_error+0x8>
 80061ca:	300c      	adds	r0, #12
 80061cc:	f000 bc70 	b.w	8006ab0 <core_set_error>
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop

080061d4 <ai_platform_inputs_get>:
 80061d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d8:	4b39      	ldr	r3, [pc, #228]	@ (80062c0 <ai_platform_inputs_get+0xec>)
 80061da:	b085      	sub	sp, #20
 80061dc:	6802      	ldr	r2, [r0, #0]
 80061de:	4393      	bics	r3, r2
 80061e0:	e9cd 1002 	strd	r1, r0, [sp, #8]
 80061e4:	d162      	bne.n	80062ac <ai_platform_inputs_get+0xd8>
 80061e6:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d051      	beq.n	8006290 <ai_platform_inputs_get+0xbc>
 80061ec:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 80061f0:	f1ba 0f00 	cmp.w	sl, #0
 80061f4:	d04c      	beq.n	8006290 <ai_platform_inputs_get+0xbc>
 80061f6:	f04f 0900 	mov.w	r9, #0
 80061fa:	464d      	mov	r5, r9
 80061fc:	e016      	b.n	800622c <ai_platform_inputs_get+0x58>
 80061fe:	9901      	ldr	r1, [sp, #4]
 8006200:	2301      	movs	r3, #1
 8006202:	f848 3001 	str.w	r3, [r8, r1]
 8006206:	69b1      	ldr	r1, [r6, #24]
 8006208:	f04f 0301 	mov.w	r3, #1
 800620c:	684e      	ldr	r6, [r1, #4]
 800620e:	3501      	adds	r5, #1
 8006210:	f109 091c 	add.w	r9, r9, #28
 8006214:	7523      	strb	r3, [r4, #20]
 8006216:	2300      	movs	r3, #0
 8006218:	6961      	ldr	r1, [r4, #20]
 800621a:	6020      	str	r0, [r4, #0]
 800621c:	f36b 211f 	bfi	r1, fp, #8, #24
 8006220:	e9c4 c701 	strd	ip, r7, [r4, #4]
 8006224:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8006228:	e9c4 1205 	strd	r1, r2, [r4, #20]
 800622c:	f8ba 3000 	ldrh.w	r3, [sl]
 8006230:	b2ac      	uxth	r4, r5
 8006232:	42ab      	cmp	r3, r5
 8006234:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8006238:	9301      	str	r3, [sp, #4]
 800623a:	d93b      	bls.n	80062b4 <ai_platform_inputs_get+0xe0>
 800623c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d037      	beq.n	80062b4 <ai_platform_inputs_get+0xe0>
 8006244:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8006248:	2e00      	cmp	r6, #0
 800624a:	d033      	beq.n	80062b4 <ai_platform_inputs_get+0xe0>
 800624c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006250:	69b2      	ldr	r2, [r6, #24]
 8006252:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8006256:	6810      	ldr	r0, [r2, #0]
 8006258:	68b3      	ldr	r3, [r6, #8]
 800625a:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800625e:	68f2      	ldr	r2, [r6, #12]
 8006260:	444c      	add	r4, r9
 8006262:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8006266:	9200      	str	r2, [sp, #0]
 8006268:	f001 f9b0 	bl	80075cc <ai_array_to_buffer_fmt>
 800626c:	69b1      	ldr	r1, [r6, #24]
 800626e:	9a00      	ldr	r2, [sp, #0]
 8006270:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8006274:	2f00      	cmp	r7, #0
 8006276:	d0c7      	beq.n	8006208 <ai_platform_inputs_get+0x34>
 8006278:	2100      	movs	r1, #0
 800627a:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 800627e:	6831      	ldr	r1, [r6, #0]
 8006280:	6079      	str	r1, [r7, #4]
 8006282:	b111      	cbz	r1, 800628a <ai_platform_inputs_get+0xb6>
 8006284:	8849      	ldrh	r1, [r1, #2]
 8006286:	2900      	cmp	r1, #0
 8006288:	d1b9      	bne.n	80061fe <ai_platform_inputs_get+0x2a>
 800628a:	69b1      	ldr	r1, [r6, #24]
 800628c:	2700      	movs	r7, #0
 800628e:	e7bb      	b.n	8006208 <ai_platform_inputs_get+0x34>
 8006290:	9803      	ldr	r0, [sp, #12]
 8006292:	2400      	movs	r4, #0
 8006294:	2218      	movs	r2, #24
 8006296:	2111      	movs	r1, #17
 8006298:	300c      	adds	r0, #12
 800629a:	f000 fc09 	bl	8006ab0 <core_set_error>
 800629e:	4620      	mov	r0, r4
 80062a0:	9b02      	ldr	r3, [sp, #8]
 80062a2:	b103      	cbz	r3, 80062a6 <ai_platform_inputs_get+0xd2>
 80062a4:	801c      	strh	r4, [r3, #0]
 80062a6:	b005      	add	sp, #20
 80062a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ac:	2000      	movs	r0, #0
 80062ae:	b005      	add	sp, #20
 80062b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062b4:	2c00      	cmp	r4, #0
 80062b6:	d0eb      	beq.n	8006290 <ai_platform_inputs_get+0xbc>
 80062b8:	f8da 3008 	ldr.w	r3, [sl, #8]
 80062bc:	6858      	ldr	r0, [r3, #4]
 80062be:	e7ef      	b.n	80062a0 <ai_platform_inputs_get+0xcc>
 80062c0:	a1c00100 	.word	0xa1c00100

080062c4 <ai_platform_outputs_get>:
 80062c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c8:	4b38      	ldr	r3, [pc, #224]	@ (80063ac <ai_platform_outputs_get+0xe8>)
 80062ca:	b085      	sub	sp, #20
 80062cc:	6802      	ldr	r2, [r0, #0]
 80062ce:	4393      	bics	r3, r2
 80062d0:	e9cd 1002 	strd	r1, r0, [sp, #8]
 80062d4:	d15f      	bne.n	8006396 <ai_platform_outputs_get+0xd2>
 80062d6:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d94e      	bls.n	800637a <ai_platform_outputs_get+0xb6>
 80062dc:	f04f 0900 	mov.w	r9, #0
 80062e0:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 80062e4:	464d      	mov	r5, r9
 80062e6:	e016      	b.n	8006316 <ai_platform_outputs_get+0x52>
 80062e8:	9901      	ldr	r1, [sp, #4]
 80062ea:	2301      	movs	r3, #1
 80062ec:	f848 3001 	str.w	r3, [r8, r1]
 80062f0:	69b1      	ldr	r1, [r6, #24]
 80062f2:	f04f 0301 	mov.w	r3, #1
 80062f6:	684e      	ldr	r6, [r1, #4]
 80062f8:	3501      	adds	r5, #1
 80062fa:	f109 091c 	add.w	r9, r9, #28
 80062fe:	7523      	strb	r3, [r4, #20]
 8006300:	2300      	movs	r3, #0
 8006302:	6961      	ldr	r1, [r4, #20]
 8006304:	6020      	str	r0, [r4, #0]
 8006306:	f36b 211f 	bfi	r1, fp, #8, #24
 800630a:	e9c4 c701 	strd	ip, r7, [r4, #4]
 800630e:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8006312:	e9c4 1205 	strd	r1, r2, [r4, #20]
 8006316:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800631a:	b2ac      	uxth	r4, r5
 800631c:	42ab      	cmp	r3, r5
 800631e:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8006322:	9301      	str	r3, [sp, #4]
 8006324:	d93b      	bls.n	800639e <ai_platform_outputs_get+0xda>
 8006326:	f8da 3010 	ldr.w	r3, [sl, #16]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d037      	beq.n	800639e <ai_platform_outputs_get+0xda>
 800632e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8006332:	2e00      	cmp	r6, #0
 8006334:	d033      	beq.n	800639e <ai_platform_outputs_get+0xda>
 8006336:	f8da 3014 	ldr.w	r3, [sl, #20]
 800633a:	69b2      	ldr	r2, [r6, #24]
 800633c:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8006340:	6810      	ldr	r0, [r2, #0]
 8006342:	68b3      	ldr	r3, [r6, #8]
 8006344:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8006348:	68f2      	ldr	r2, [r6, #12]
 800634a:	444c      	add	r4, r9
 800634c:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8006350:	9200      	str	r2, [sp, #0]
 8006352:	f001 f93b 	bl	80075cc <ai_array_to_buffer_fmt>
 8006356:	69b1      	ldr	r1, [r6, #24]
 8006358:	9a00      	ldr	r2, [sp, #0]
 800635a:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800635e:	2f00      	cmp	r7, #0
 8006360:	d0c7      	beq.n	80062f2 <ai_platform_outputs_get+0x2e>
 8006362:	2100      	movs	r1, #0
 8006364:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 8006368:	6831      	ldr	r1, [r6, #0]
 800636a:	6079      	str	r1, [r7, #4]
 800636c:	b111      	cbz	r1, 8006374 <ai_platform_outputs_get+0xb0>
 800636e:	8849      	ldrh	r1, [r1, #2]
 8006370:	2900      	cmp	r1, #0
 8006372:	d1b9      	bne.n	80062e8 <ai_platform_outputs_get+0x24>
 8006374:	69b1      	ldr	r1, [r6, #24]
 8006376:	2700      	movs	r7, #0
 8006378:	e7bb      	b.n	80062f2 <ai_platform_outputs_get+0x2e>
 800637a:	9803      	ldr	r0, [sp, #12]
 800637c:	2400      	movs	r4, #0
 800637e:	2218      	movs	r2, #24
 8006380:	2111      	movs	r1, #17
 8006382:	300c      	adds	r0, #12
 8006384:	f000 fb94 	bl	8006ab0 <core_set_error>
 8006388:	4620      	mov	r0, r4
 800638a:	9b02      	ldr	r3, [sp, #8]
 800638c:	b103      	cbz	r3, 8006390 <ai_platform_outputs_get+0xcc>
 800638e:	801c      	strh	r4, [r3, #0]
 8006390:	b005      	add	sp, #20
 8006392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006396:	2000      	movs	r0, #0
 8006398:	b005      	add	sp, #20
 800639a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800639e:	2c00      	cmp	r4, #0
 80063a0:	d0eb      	beq.n	800637a <ai_platform_outputs_get+0xb6>
 80063a2:	f8da 3014 	ldr.w	r3, [sl, #20]
 80063a6:	6858      	ldr	r0, [r3, #4]
 80063a8:	e7ef      	b.n	800638a <ai_platform_outputs_get+0xc6>
 80063aa:	bf00      	nop
 80063ac:	a1c00100 	.word	0xa1c00100

080063b0 <ai_platform_network_create>:
 80063b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063b4:	b083      	sub	sp, #12
 80063b6:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 80063ba:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 80063be:	b320      	cbz	r0, 800640a <ai_platform_network_create+0x5a>
 80063c0:	6002      	str	r2, [r0, #0]
 80063c2:	4616      	mov	r6, r2
 80063c4:	461f      	mov	r7, r3
 80063c6:	4604      	mov	r4, r0
 80063c8:	f000 fb6a 	bl	8006aa0 <core_init>
 80063cc:	b970      	cbnz	r0, 80063ec <ai_platform_network_create+0x3c>
 80063ce:	2530      	movs	r5, #48	@ 0x30
 80063d0:	2300      	movs	r3, #0
 80063d2:	6023      	str	r3, [r4, #0]
 80063d4:	2410      	movs	r4, #16
 80063d6:	464a      	mov	r2, r9
 80063d8:	4641      	mov	r1, r8
 80063da:	4638      	mov	r0, r7
 80063dc:	f001 f9a0 	bl	8007720 <ai_version_get>
 80063e0:	60b0      	str	r0, [r6, #8]
 80063e2:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80063e6:	b003      	add	sp, #12
 80063e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063ec:	2200      	movs	r2, #0
 80063ee:	4641      	mov	r1, r8
 80063f0:	4638      	mov	r0, r7
 80063f2:	f001 f995 	bl	8007720 <ai_version_get>
 80063f6:	4605      	mov	r5, r0
 80063f8:	2200      	movs	r2, #0
 80063fa:	2105      	movs	r1, #5
 80063fc:	2001      	movs	r0, #1
 80063fe:	f001 f98f 	bl	8007720 <ai_version_get>
 8006402:	4285      	cmp	r5, r0
 8006404:	d008      	beq.n	8006418 <ai_platform_network_create+0x68>
 8006406:	2501      	movs	r5, #1
 8006408:	e7e2      	b.n	80063d0 <ai_platform_network_create+0x20>
 800640a:	2510      	movs	r5, #16
 800640c:	462c      	mov	r4, r5
 800640e:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8006412:	b003      	add	sp, #12
 8006414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006418:	4b05      	ldr	r3, [pc, #20]	@ (8006430 <ai_platform_network_create+0x80>)
 800641a:	a801      	add	r0, sp, #4
 800641c:	9301      	str	r3, [sp, #4]
 800641e:	f000 fb53 	bl	8006ac8 <ai_check_custom_types>
 8006422:	b110      	cbz	r0, 800642a <ai_platform_network_create+0x7a>
 8006424:	2400      	movs	r4, #0
 8006426:	4625      	mov	r5, r4
 8006428:	e7d5      	b.n	80063d6 <ai_platform_network_create+0x26>
 800642a:	2502      	movs	r5, #2
 800642c:	e7d0      	b.n	80063d0 <ai_platform_network_create+0x20>
 800642e:	bf00      	nop
 8006430:	84048403 	.word	0x84048403

08006434 <ai_platform_network_init>:
 8006434:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006438:	4a5c      	ldr	r2, [pc, #368]	@ (80065ac <ai_platform_network_init+0x178>)
 800643a:	460c      	mov	r4, r1
 800643c:	6801      	ldr	r1, [r0, #0]
 800643e:	438a      	bics	r2, r1
 8006440:	d133      	bne.n	80064aa <ai_platform_network_init+0x76>
 8006442:	4605      	mov	r5, r0
 8006444:	2c00      	cmp	r4, #0
 8006446:	f000 8093 	beq.w	8006570 <ai_platform_network_init+0x13c>
 800644a:	f8d4 b000 	ldr.w	fp, [r4]
 800644e:	4a58      	ldr	r2, [pc, #352]	@ (80065b0 <ai_platform_network_init+0x17c>)
 8006450:	4593      	cmp	fp, r2
 8006452:	d10f      	bne.n	8006474 <ai_platform_network_init+0x40>
 8006454:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 8006458:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800645c:	4b53      	ldr	r3, [pc, #332]	@ (80065ac <ai_platform_network_init+0x178>)
 800645e:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 8006462:	0c32      	lsrs	r2, r6, #16
 8006464:	4299      	cmp	r1, r3
 8006466:	d02c      	beq.n	80064c2 <ai_platform_network_init+0x8e>
 8006468:	2303      	movs	r3, #3
 800646a:	462c      	mov	r4, r5
 800646c:	612b      	str	r3, [r5, #16]
 800646e:	4620      	mov	r0, r4
 8006470:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006474:	4627      	mov	r7, r4
 8006476:	2101      	movs	r1, #1
 8006478:	6864      	ldr	r4, [r4, #4]
 800647a:	4638      	mov	r0, r7
 800647c:	f107 081c 	add.w	r8, r7, #28
 8006480:	f7ff fd7e 	bl	8005f80 <ai_buffer_get_size>
 8006484:	4606      	mov	r6, r0
 8006486:	2101      	movs	r1, #1
 8006488:	4640      	mov	r0, r8
 800648a:	f8d7 9020 	ldr.w	r9, [r7, #32]
 800648e:	f7ff fd77 	bl	8005f80 <ai_buffer_get_size>
 8006492:	b976      	cbnz	r6, 80064b2 <ai_platform_network_init+0x7e>
 8006494:	2800      	cmp	r0, #0
 8006496:	d150      	bne.n	800653a <ai_platform_network_init+0x106>
 8006498:	4680      	mov	r8, r0
 800649a:	4686      	mov	lr, r0
 800649c:	4606      	mov	r6, r0
 800649e:	4607      	mov	r7, r0
 80064a0:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 80064a4:	6829      	ldr	r1, [r5, #0]
 80064a6:	0436      	lsls	r6, r6, #16
 80064a8:	e7d8      	b.n	800645c <ai_platform_network_init+0x28>
 80064aa:	2400      	movs	r4, #0
 80064ac:	4620      	mov	r0, r4
 80064ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064b2:	2800      	cmp	r0, #0
 80064b4:	d13b      	bne.n	800652e <ai_platform_network_init+0xfa>
 80064b6:	4680      	mov	r8, r0
 80064b8:	4686      	mov	lr, r0
 80064ba:	2c00      	cmp	r4, #0
 80064bc:	d05e      	beq.n	800657c <ai_platform_network_init+0x148>
 80064be:	2601      	movs	r6, #1
 80064c0:	e7ee      	b.n	80064a0 <ai_platform_network_init+0x6c>
 80064c2:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 80064c4:	4293      	cmp	r3, r2
 80064c6:	4b3a      	ldr	r3, [pc, #232]	@ (80065b0 <ai_platform_network_init+0x17c>)
 80064c8:	d33e      	bcc.n	8006548 <ai_platform_network_init+0x114>
 80064ca:	459b      	cmp	fp, r3
 80064cc:	d03e      	beq.n	800654c <ai_platform_network_init+0x118>
 80064ce:	b1a2      	cbz	r2, 80064fa <ai_platform_network_init+0xc6>
 80064d0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80064d4:	f04f 0c00 	mov.w	ip, #0
 80064d8:	ea4f 0982 	mov.w	r9, r2, lsl #2
 80064dc:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 80064de:	eb07 0b0c 	add.w	fp, r7, ip
 80064e2:	4464      	add	r4, ip
 80064e4:	f10c 0c1c 	add.w	ip, ip, #28
 80064e8:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 80064ec:	45cc      	cmp	ip, r9
 80064ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064f0:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 80064f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80064f8:	d1f0      	bne.n	80064dc <ai_platform_network_init+0xa8>
 80064fa:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 80064fc:	622e      	str	r6, [r5, #32]
 80064fe:	4553      	cmp	r3, sl
 8006500:	d34b      	bcc.n	800659a <ai_platform_network_init+0x166>
 8006502:	f1ba 0f00 	cmp.w	sl, #0
 8006506:	d025      	beq.n	8006554 <ai_platform_network_init+0x120>
 8006508:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 800650c:	2700      	movs	r7, #0
 800650e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8006512:	6aec      	ldr	r4, [r5, #44]	@ 0x2c
 8006514:	eb08 0607 	add.w	r6, r8, r7
 8006518:	443c      	add	r4, r7
 800651a:	371c      	adds	r7, #28
 800651c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800651e:	4557      	cmp	r7, sl
 8006520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006522:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8006526:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800652a:	d1f2      	bne.n	8006512 <ai_platform_network_init+0xde>
 800652c:	e012      	b.n	8006554 <ai_platform_network_init+0x120>
 800652e:	f1b9 0f00 	cmp.w	r9, #0
 8006532:	d015      	beq.n	8006560 <ai_platform_network_init+0x12c>
 8006534:	f04f 0e01 	mov.w	lr, #1
 8006538:	e7bf      	b.n	80064ba <ai_platform_network_init+0x86>
 800653a:	f1b9 0f00 	cmp.w	r9, #0
 800653e:	d00f      	beq.n	8006560 <ai_platform_network_init+0x12c>
 8006540:	f04f 0e01 	mov.w	lr, #1
 8006544:	4637      	mov	r7, r6
 8006546:	e7ab      	b.n	80064a0 <ai_platform_network_init+0x6c>
 8006548:	459b      	cmp	fp, r3
 800654a:	d11e      	bne.n	800658a <ai_platform_network_init+0x156>
 800654c:	f8c5 802c 	str.w	r8, [r5, #44]	@ 0x2c
 8006550:	e9c5 6708 	strd	r6, r7, [r5, #32]
 8006554:	4628      	mov	r0, r5
 8006556:	f8c5 e028 	str.w	lr, [r5, #40]	@ 0x28
 800655a:	f000 fadd 	bl	8006b18 <ai_layers_init_all>
 800655e:	e783      	b.n	8006468 <ai_platform_network_init+0x34>
 8006560:	2213      	movs	r2, #19
 8006562:	2110      	movs	r1, #16
 8006564:	f105 000c 	add.w	r0, r5, #12
 8006568:	2400      	movs	r4, #0
 800656a:	f000 faa1 	bl	8006ab0 <core_set_error>
 800656e:	e77e      	b.n	800646e <ai_platform_network_init+0x3a>
 8006570:	2211      	movs	r2, #17
 8006572:	2110      	movs	r1, #16
 8006574:	300c      	adds	r0, #12
 8006576:	f000 fa9b 	bl	8006ab0 <core_set_error>
 800657a:	e778      	b.n	800646e <ai_platform_network_init+0x3a>
 800657c:	2212      	movs	r2, #18
 800657e:	2110      	movs	r1, #16
 8006580:	f105 000c 	add.w	r0, r5, #12
 8006584:	f000 fa94 	bl	8006ab0 <core_set_error>
 8006588:	e771      	b.n	800646e <ai_platform_network_init+0x3a>
 800658a:	2212      	movs	r2, #18
 800658c:	2116      	movs	r1, #22
 800658e:	f105 000c 	add.w	r0, r5, #12
 8006592:	2400      	movs	r4, #0
 8006594:	f000 fa8c 	bl	8006ab0 <core_set_error>
 8006598:	e769      	b.n	800646e <ai_platform_network_init+0x3a>
 800659a:	2213      	movs	r2, #19
 800659c:	2116      	movs	r1, #22
 800659e:	f105 000c 	add.w	r0, r5, #12
 80065a2:	2400      	movs	r4, #0
 80065a4:	f000 fa84 	bl	8006ab0 <core_set_error>
 80065a8:	e761      	b.n	800646e <ai_platform_network_init+0x3a>
 80065aa:	bf00      	nop
 80065ac:	a1c00100 	.word	0xa1c00100
 80065b0:	a1facade 	.word	0xa1facade

080065b4 <ai_platform_network_post_init>:
 80065b4:	b538      	push	{r3, r4, r5, lr}
 80065b6:	4b16      	ldr	r3, [pc, #88]	@ (8006610 <ai_platform_network_post_init+0x5c>)
 80065b8:	6802      	ldr	r2, [r0, #0]
 80065ba:	ea02 0103 	and.w	r1, r2, r3
 80065be:	4393      	bics	r3, r2
 80065c0:	d108      	bne.n	80065d4 <ai_platform_network_post_init+0x20>
 80065c2:	6903      	ldr	r3, [r0, #16]
 80065c4:	4604      	mov	r4, r0
 80065c6:	f013 0502 	ands.w	r5, r3, #2
 80065ca:	d005      	beq.n	80065d8 <ai_platform_network_post_init+0x24>
 80065cc:	428a      	cmp	r2, r1
 80065ce:	d00a      	beq.n	80065e6 <ai_platform_network_post_init+0x32>
 80065d0:	2001      	movs	r0, #1
 80065d2:	bd38      	pop	{r3, r4, r5, pc}
 80065d4:	2000      	movs	r0, #0
 80065d6:	bd38      	pop	{r3, r4, r5, pc}
 80065d8:	2210      	movs	r2, #16
 80065da:	2111      	movs	r1, #17
 80065dc:	300c      	adds	r0, #12
 80065de:	f000 fa67 	bl	8006ab0 <core_set_error>
 80065e2:	4628      	mov	r0, r5
 80065e4:	bd38      	pop	{r3, r4, r5, pc}
 80065e6:	f000 faa5 	bl	8006b34 <ai_layers_post_init_all>
 80065ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d0ef      	beq.n	80065d0 <ai_platform_network_post_init+0x1c>
 80065f0:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 80065f2:	e008      	b.n	8006606 <ai_platform_network_post_init+0x52>
 80065f4:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 80065f8:	4798      	blx	r3
 80065fa:	692b      	ldr	r3, [r5, #16]
 80065fc:	42ab      	cmp	r3, r5
 80065fe:	461d      	mov	r5, r3
 8006600:	d0e6      	beq.n	80065d0 <ai_platform_network_post_init+0x1c>
 8006602:	2b00      	cmp	r3, #0
 8006604:	d0e4      	beq.n	80065d0 <ai_platform_network_post_init+0x1c>
 8006606:	4629      	mov	r1, r5
 8006608:	2000      	movs	r0, #0
 800660a:	2d00      	cmp	r5, #0
 800660c:	d1f2      	bne.n	80065f4 <ai_platform_network_post_init+0x40>
 800660e:	e7df      	b.n	80065d0 <ai_platform_network_post_init+0x1c>
 8006610:	a1c00100 	.word	0xa1c00100

08006614 <ai_platform_network_process>:
 8006614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006618:	b085      	sub	sp, #20
 800661a:	4bb7      	ldr	r3, [pc, #732]	@ (80068f8 <ai_platform_network_process+0x2e4>)
 800661c:	9202      	str	r2, [sp, #8]
 800661e:	6802      	ldr	r2, [r0, #0]
 8006620:	4393      	bics	r3, r2
 8006622:	f040 8142 	bne.w	80068aa <ai_platform_network_process+0x296>
 8006626:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8006628:	4605      	mov	r5, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	f000 8126 	beq.w	800687c <ai_platform_network_process+0x268>
 8006630:	6903      	ldr	r3, [r0, #16]
 8006632:	2200      	movs	r2, #0
 8006634:	f8d0 8034 	ldr.w	r8, [r0, #52]	@ 0x34
 8006638:	f003 0303 	and.w	r3, r3, #3
 800663c:	6182      	str	r2, [r0, #24]
 800663e:	2b03      	cmp	r3, #3
 8006640:	f040 8122 	bne.w	8006888 <ai_platform_network_process+0x274>
 8006644:	2900      	cmp	r1, #0
 8006646:	f000 8136 	beq.w	80068b6 <ai_platform_network_process+0x2a2>
 800664a:	fab8 f788 	clz	r7, r8
 800664e:	097f      	lsrs	r7, r7, #5
 8006650:	f1b8 0f00 	cmp.w	r8, #0
 8006654:	f000 812f 	beq.w	80068b6 <ai_platform_network_process+0x2a2>
 8006658:	f8b8 3000 	ldrh.w	r3, [r8]
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 812a 	beq.w	80068b6 <ai_platform_network_process+0x2a2>
 8006662:	698b      	ldr	r3, [r1, #24]
 8006664:	460e      	mov	r6, r1
 8006666:	9003      	str	r0, [sp, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	9301      	str	r3, [sp, #4]
 800666c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d072      	beq.n	800675a <ai_platform_network_process+0x146>
 8006674:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8006678:	2c00      	cmp	r4, #0
 800667a:	d06e      	beq.n	800675a <ai_platform_network_process+0x146>
 800667c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006680:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8006684:	f8d3 a000 	ldr.w	sl, [r3]
 8006688:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800668c:	f000 8112 	beq.w	80068b4 <ai_platform_network_process+0x2a0>
 8006690:	69a3      	ldr	r3, [r4, #24]
 8006692:	2101      	movs	r1, #1
 8006694:	4630      	mov	r0, r6
 8006696:	685d      	ldr	r5, [r3, #4]
 8006698:	f7ff fc72 	bl	8005f80 <ai_buffer_get_size>
 800669c:	4285      	cmp	r5, r0
 800669e:	f0c0 8115 	bcc.w	80068cc <ai_platform_network_process+0x2b8>
 80066a2:	68e0      	ldr	r0, [r4, #12]
 80066a4:	69b1      	ldr	r1, [r6, #24]
 80066a6:	68c2      	ldr	r2, [r0, #12]
 80066a8:	68cb      	ldr	r3, [r1, #12]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	f040 810e 	bne.w	80068cc <ai_platform_network_process+0x2b8>
 80066b0:	6882      	ldr	r2, [r0, #8]
 80066b2:	688b      	ldr	r3, [r1, #8]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	f040 8109 	bne.w	80068cc <ai_platform_network_process+0x2b8>
 80066ba:	6842      	ldr	r2, [r0, #4]
 80066bc:	684b      	ldr	r3, [r1, #4]
 80066be:	429a      	cmp	r2, r3
 80066c0:	f040 8104 	bne.w	80068cc <ai_platform_network_process+0x2b8>
 80066c4:	69a3      	ldr	r3, [r4, #24]
 80066c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066ca:	f001 f817 	bl	80076fc <ai_array_get_data_byte_size>
 80066ce:	4605      	mov	r5, r0
 80066d0:	4620      	mov	r0, r4
 80066d2:	f001 f82b 	bl	800772c <get_tensor_byte_size>
 80066d6:	4285      	cmp	r5, r0
 80066d8:	f0c0 80f8 	bcc.w	80068cc <ai_platform_network_process+0x2b8>
 80066dc:	69a3      	ldr	r3, [r4, #24]
 80066de:	6818      	ldr	r0, [r3, #0]
 80066e0:	f000 ff74 	bl	80075cc <ai_array_to_buffer_fmt>
 80066e4:	6833      	ldr	r3, [r6, #0]
 80066e6:	4058      	eors	r0, r3
 80066e8:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 80066ec:	f040 81a4 	bne.w	8006a38 <ai_platform_network_process+0x424>
 80066f0:	6873      	ldr	r3, [r6, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 80de 	beq.w	80068b4 <ai_platform_network_process+0x2a0>
 80066f8:	69b3      	ldr	r3, [r6, #24]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 81a4 	beq.w	8006a4a <ai_platform_network_process+0x436>
 8006702:	9a01      	ldr	r2, [sp, #4]
 8006704:	4620      	mov	r0, r4
 8006706:	3701      	adds	r7, #1
 8006708:	361c      	adds	r6, #28
 800670a:	429a      	cmp	r2, r3
 800670c:	bf38      	it	cc
 800670e:	461a      	movcc	r2, r3
 8006710:	9201      	str	r2, [sp, #4]
 8006712:	f001 f80b 	bl	800772c <get_tensor_byte_size>
 8006716:	f8c9 0008 	str.w	r0, [r9, #8]
 800671a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	fb00 f303 	mul.w	r3, r0, r3
 8006724:	f8c9 300c 	str.w	r3, [r9, #12]
 8006728:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800672c:	440b      	add	r3, r1
 800672e:	f8c9 1004 	str.w	r1, [r9, #4]
 8006732:	f84a 300b 	str.w	r3, [sl, fp]
 8006736:	69a0      	ldr	r0, [r4, #24]
 8006738:	6803      	ldr	r3, [r0, #0]
 800673a:	009a      	lsls	r2, r3, #2
 800673c:	f100 80af 	bmi.w	800689e <ai_platform_network_process+0x28a>
 8006740:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006744:	1a9b      	subs	r3, r3, r2
 8006746:	4419      	add	r1, r3
 8006748:	6081      	str	r1, [r0, #8]
 800674a:	69a3      	ldr	r3, [r4, #24]
 800674c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8006750:	60da      	str	r2, [r3, #12]
 8006752:	f8b8 3000 	ldrh.w	r3, [r8]
 8006756:	42bb      	cmp	r3, r7
 8006758:	d888      	bhi.n	800666c <ai_platform_network_process+0x58>
 800675a:	9d03      	ldr	r5, [sp, #12]
 800675c:	9b02      	ldr	r3, [sp, #8]
 800675e:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 817b 	beq.w	8006a5c <ai_platform_network_process+0x448>
 8006766:	2a01      	cmp	r2, #1
 8006768:	f240 80bd 	bls.w	80068e6 <ai_platform_network_process+0x2d2>
 800676c:	f8d5 9034 	ldr.w	r9, [r5, #52]	@ 0x34
 8006770:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 80b6 	beq.w	80068e6 <ai_platform_network_process+0x2d2>
 800677a:	2700      	movs	r7, #0
 800677c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006780:	9502      	str	r5, [sp, #8]
 8006782:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006786:	2b00      	cmp	r3, #0
 8006788:	f000 80bd 	beq.w	8006906 <ai_platform_network_process+0x2f2>
 800678c:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8006790:	2e00      	cmp	r6, #0
 8006792:	f000 80b8 	beq.w	8006906 <ai_platform_network_process+0x2f2>
 8006796:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800679a:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 800679e:	681c      	ldr	r4, [r3, #0]
 80067a0:	eb14 1807 	adds.w	r8, r4, r7, lsl #4
 80067a4:	f000 8170 	beq.w	8006a88 <ai_platform_network_process+0x474>
 80067a8:	69b3      	ldr	r3, [r6, #24]
 80067aa:	2101      	movs	r1, #1
 80067ac:	4658      	mov	r0, fp
 80067ae:	685d      	ldr	r5, [r3, #4]
 80067b0:	f7ff fbe6 	bl	8005f80 <ai_buffer_get_size>
 80067b4:	4285      	cmp	r5, r0
 80067b6:	f0c0 8095 	bcc.w	80068e4 <ai_platform_network_process+0x2d0>
 80067ba:	68f0      	ldr	r0, [r6, #12]
 80067bc:	f8db 1018 	ldr.w	r1, [fp, #24]
 80067c0:	68c2      	ldr	r2, [r0, #12]
 80067c2:	68cb      	ldr	r3, [r1, #12]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	f040 808d 	bne.w	80068e4 <ai_platform_network_process+0x2d0>
 80067ca:	6882      	ldr	r2, [r0, #8]
 80067cc:	688b      	ldr	r3, [r1, #8]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	f040 8088 	bne.w	80068e4 <ai_platform_network_process+0x2d0>
 80067d4:	6842      	ldr	r2, [r0, #4]
 80067d6:	684b      	ldr	r3, [r1, #4]
 80067d8:	429a      	cmp	r2, r3
 80067da:	f040 8083 	bne.w	80068e4 <ai_platform_network_process+0x2d0>
 80067de:	69b3      	ldr	r3, [r6, #24]
 80067e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80067e4:	f000 ff8a 	bl	80076fc <ai_array_get_data_byte_size>
 80067e8:	9003      	str	r0, [sp, #12]
 80067ea:	4630      	mov	r0, r6
 80067ec:	f000 ff9e 	bl	800772c <get_tensor_byte_size>
 80067f0:	9b03      	ldr	r3, [sp, #12]
 80067f2:	4283      	cmp	r3, r0
 80067f4:	d376      	bcc.n	80068e4 <ai_platform_network_process+0x2d0>
 80067f6:	69b3      	ldr	r3, [r6, #24]
 80067f8:	6818      	ldr	r0, [r3, #0]
 80067fa:	f000 fee7 	bl	80075cc <ai_array_to_buffer_fmt>
 80067fe:	f8db 3000 	ldr.w	r3, [fp]
 8006802:	4058      	eors	r0, r3
 8006804:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8006808:	f040 812c 	bne.w	8006a64 <ai_platform_network_process+0x450>
 800680c:	f8db 3004 	ldr.w	r3, [fp, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 8139 	beq.w	8006a88 <ai_platform_network_process+0x474>
 8006816:	f8db 3018 	ldr.w	r3, [fp, #24]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 812a 	beq.w	8006a76 <ai_platform_network_process+0x462>
 8006822:	9a01      	ldr	r2, [sp, #4]
 8006824:	4630      	mov	r0, r6
 8006826:	3701      	adds	r7, #1
 8006828:	f10b 0b1c 	add.w	fp, fp, #28
 800682c:	429a      	cmp	r2, r3
 800682e:	bf38      	it	cc
 8006830:	461a      	movcc	r2, r3
 8006832:	9201      	str	r2, [sp, #4]
 8006834:	f000 ff7a 	bl	800772c <get_tensor_byte_size>
 8006838:	f8c8 0008 	str.w	r0, [r8, #8]
 800683c:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	fb00 f303 	mul.w	r3, r0, r3
 8006846:	f8c8 300c 	str.w	r3, [r8, #12]
 800684a:	f85b 1c18 	ldr.w	r1, [fp, #-24]
 800684e:	440b      	add	r3, r1
 8006850:	f8c8 1004 	str.w	r1, [r8, #4]
 8006854:	f844 300a 	str.w	r3, [r4, sl]
 8006858:	69b0      	ldr	r0, [r6, #24]
 800685a:	6803      	ldr	r3, [r0, #0]
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	d44d      	bmi.n	80068fc <ai_platform_network_process+0x2e8>
 8006860:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006864:	1a9b      	subs	r3, r3, r2
 8006866:	4419      	add	r1, r3
 8006868:	6081      	str	r1, [r0, #8]
 800686a:	69b3      	ldr	r3, [r6, #24]
 800686c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006870:	60da      	str	r2, [r3, #12]
 8006872:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006876:	42bb      	cmp	r3, r7
 8006878:	d883      	bhi.n	8006782 <ai_platform_network_process+0x16e>
 800687a:	e044      	b.n	8006906 <ai_platform_network_process+0x2f2>
 800687c:	6902      	ldr	r2, [r0, #16]
 800687e:	6183      	str	r3, [r0, #24]
 8006880:	f002 0203 	and.w	r2, r2, #3
 8006884:	2a03      	cmp	r2, #3
 8006886:	d016      	beq.n	80068b6 <ai_platform_network_process+0x2a2>
 8006888:	2230      	movs	r2, #48	@ 0x30
 800688a:	2111      	movs	r1, #17
 800688c:	f105 000c 	add.w	r0, r5, #12
 8006890:	2400      	movs	r4, #0
 8006892:	f000 f90d 	bl	8006ab0 <core_set_error>
 8006896:	4620      	mov	r0, r4
 8006898:	b005      	add	sp, #20
 800689a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800689e:	f8b8 3000 	ldrh.w	r3, [r8]
 80068a2:	429f      	cmp	r7, r3
 80068a4:	f4ff aee2 	bcc.w	800666c <ai_platform_network_process+0x58>
 80068a8:	e757      	b.n	800675a <ai_platform_network_process+0x146>
 80068aa:	2400      	movs	r4, #0
 80068ac:	4620      	mov	r0, r4
 80068ae:	b005      	add	sp, #20
 80068b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068b4:	9d03      	ldr	r5, [sp, #12]
 80068b6:	2400      	movs	r4, #0
 80068b8:	2217      	movs	r2, #23
 80068ba:	2112      	movs	r1, #18
 80068bc:	f105 000c 	add.w	r0, r5, #12
 80068c0:	f000 f8f6 	bl	8006ab0 <core_set_error>
 80068c4:	4620      	mov	r0, r4
 80068c6:	b005      	add	sp, #20
 80068c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068cc:	9d03      	ldr	r5, [sp, #12]
 80068ce:	2400      	movs	r4, #0
 80068d0:	2218      	movs	r2, #24
 80068d2:	2112      	movs	r1, #18
 80068d4:	f105 000c 	add.w	r0, r5, #12
 80068d8:	f000 f8ea 	bl	8006ab0 <core_set_error>
 80068dc:	4620      	mov	r0, r4
 80068de:	b005      	add	sp, #20
 80068e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e4:	9d02      	ldr	r5, [sp, #8]
 80068e6:	2218      	movs	r2, #24
 80068e8:	2113      	movs	r1, #19
 80068ea:	f105 000c 	add.w	r0, r5, #12
 80068ee:	2400      	movs	r4, #0
 80068f0:	f000 f8de 	bl	8006ab0 <core_set_error>
 80068f4:	e7cf      	b.n	8006896 <ai_platform_network_process+0x282>
 80068f6:	bf00      	nop
 80068f8:	a1c00100 	.word	0xa1c00100
 80068fc:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006900:	429f      	cmp	r7, r3
 8006902:	f4ff af3e 	bcc.w	8006782 <ai_platform_network_process+0x16e>
 8006906:	9d02      	ldr	r5, [sp, #8]
 8006908:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800690c:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 800690e:	832b      	strh	r3, [r5, #24]
 8006910:	2a00      	cmp	r2, #0
 8006912:	f040 808b 	bne.w	8006a2c <ai_platform_network_process+0x418>
 8006916:	4616      	mov	r6, r2
 8006918:	4617      	mov	r7, r2
 800691a:	8b6c      	ldrh	r4, [r5, #26]
 800691c:	429c      	cmp	r4, r3
 800691e:	d2ba      	bcs.n	8006896 <ai_platform_network_process+0x282>
 8006920:	46ab      	mov	fp, r5
 8006922:	2e00      	cmp	r6, #0
 8006924:	d030      	beq.n	8006988 <ai_platform_network_process+0x374>
 8006926:	f04f 0800 	mov.w	r8, #0
 800692a:	e014      	b.n	8006956 <ai_platform_network_process+0x342>
 800692c:	6882      	ldr	r2, [r0, #8]
 800692e:	68c5      	ldr	r5, [r0, #12]
 8006930:	6863      	ldr	r3, [r4, #4]
 8006932:	1b52      	subs	r2, r2, r5
 8006934:	4413      	add	r3, r2
 8006936:	6083      	str	r3, [r0, #8]
 8006938:	698b      	ldr	r3, [r1, #24]
 800693a:	6862      	ldr	r2, [r4, #4]
 800693c:	60da      	str	r2, [r3, #12]
 800693e:	f859 200a 	ldr.w	r2, [r9, sl]
 8006942:	f108 0801 	add.w	r8, r8, #1
 8006946:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800694a:	440b      	add	r3, r1
 800694c:	4293      	cmp	r3, r2
 800694e:	d301      	bcc.n	8006954 <ai_platform_network_process+0x340>
 8006950:	68e3      	ldr	r3, [r4, #12]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	6063      	str	r3, [r4, #4]
 8006956:	8833      	ldrh	r3, [r6, #0]
 8006958:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800695c:	4543      	cmp	r3, r8
 800695e:	d913      	bls.n	8006988 <ai_platform_network_process+0x374>
 8006960:	6873      	ldr	r3, [r6, #4]
 8006962:	b18b      	cbz	r3, 8006988 <ai_platform_network_process+0x374>
 8006964:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8006968:	b171      	cbz	r1, 8006988 <ai_platform_network_process+0x374>
 800696a:	6988      	ldr	r0, [r1, #24]
 800696c:	68b2      	ldr	r2, [r6, #8]
 800696e:	6803      	ldr	r3, [r0, #0]
 8006970:	f8d2 9000 	ldr.w	r9, [r2]
 8006974:	009d      	lsls	r5, r3, #2
 8006976:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800697a:	d5d7      	bpl.n	800692c <ai_platform_network_process+0x318>
 800697c:	6881      	ldr	r1, [r0, #8]
 800697e:	68a2      	ldr	r2, [r4, #8]
 8006980:	6860      	ldr	r0, [r4, #4]
 8006982:	f000 fd9b 	bl	80074bc <st_int8_copy>
 8006986:	e7da      	b.n	800693e <ai_platform_network_process+0x32a>
 8006988:	4658      	mov	r0, fp
 800698a:	f000 f8e7 	bl	8006b5c <ai_layers_forward_all>
 800698e:	2f00      	cmp	r7, #0
 8006990:	d03d      	beq.n	8006a0e <ai_platform_network_process+0x3fa>
 8006992:	2400      	movs	r4, #0
 8006994:	e016      	b.n	80069c4 <ai_platform_network_process+0x3b0>
 8006996:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800699a:	f859 100a 	ldr.w	r1, [r9, sl]
 800699e:	4413      	add	r3, r2
 80069a0:	428b      	cmp	r3, r1
 80069a2:	d302      	bcc.n	80069aa <ai_platform_network_process+0x396>
 80069a4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80069a8:	1acb      	subs	r3, r1, r3
 80069aa:	f8c8 3004 	str.w	r3, [r8, #4]
 80069ae:	6981      	ldr	r1, [r0, #24]
 80069b0:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80069b4:	1b52      	subs	r2, r2, r5
 80069b6:	4413      	add	r3, r2
 80069b8:	608b      	str	r3, [r1, #8]
 80069ba:	6983      	ldr	r3, [r0, #24]
 80069bc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80069c0:	60da      	str	r2, [r3, #12]
 80069c2:	3401      	adds	r4, #1
 80069c4:	883b      	ldrh	r3, [r7, #0]
 80069c6:	42a3      	cmp	r3, r4
 80069c8:	d921      	bls.n	8006a0e <ai_platform_network_process+0x3fa>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	b1fb      	cbz	r3, 8006a0e <ai_platform_network_process+0x3fa>
 80069ce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80069d2:	b1e0      	cbz	r0, 8006a0e <ai_platform_network_process+0x3fa>
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 80069da:	6983      	ldr	r3, [r0, #24]
 80069dc:	f8d2 9000 	ldr.w	r9, [r2]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 80069e6:	0092      	lsls	r2, r2, #2
 80069e8:	d5d5      	bpl.n	8006996 <ai_platform_network_process+0x382>
 80069ea:	6898      	ldr	r0, [r3, #8]
 80069ec:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 80069f0:	f000 fd64 	bl	80074bc <st_int8_copy>
 80069f4:	f859 200a 	ldr.w	r2, [r9, sl]
 80069f8:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 80069fc:	440b      	add	r3, r1
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d302      	bcc.n	8006a08 <ai_platform_network_process+0x3f4>
 8006a02:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	f8c8 3004 	str.w	r3, [r8, #4]
 8006a0c:	e7d9      	b.n	80069c2 <ai_platform_network_process+0x3ae>
 8006a0e:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 8006a12:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 8006a16:	3401      	adds	r4, #1
 8006a18:	b2a4      	uxth	r4, r4
 8006a1a:	42a3      	cmp	r3, r4
 8006a1c:	f8ab 401a 	strh.w	r4, [fp, #26]
 8006a20:	f63f af7f 	bhi.w	8006922 <ai_platform_network_process+0x30e>
 8006a24:	4620      	mov	r0, r4
 8006a26:	b005      	add	sp, #20
 8006a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a2c:	2a01      	cmp	r2, #1
 8006a2e:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 8006a30:	d033      	beq.n	8006a9a <ai_platform_network_process+0x486>
 8006a32:	f106 070c 	add.w	r7, r6, #12
 8006a36:	e770      	b.n	800691a <ai_platform_network_process+0x306>
 8006a38:	9d03      	ldr	r5, [sp, #12]
 8006a3a:	2219      	movs	r2, #25
 8006a3c:	2112      	movs	r1, #18
 8006a3e:	2400      	movs	r4, #0
 8006a40:	f105 000c 	add.w	r0, r5, #12
 8006a44:	f000 f834 	bl	8006ab0 <core_set_error>
 8006a48:	e725      	b.n	8006896 <ai_platform_network_process+0x282>
 8006a4a:	9d03      	ldr	r5, [sp, #12]
 8006a4c:	4604      	mov	r4, r0
 8006a4e:	2221      	movs	r2, #33	@ 0x21
 8006a50:	2112      	movs	r1, #18
 8006a52:	f105 000c 	add.w	r0, r5, #12
 8006a56:	f000 f82b 	bl	8006ab0 <core_set_error>
 8006a5a:	e71c      	b.n	8006896 <ai_platform_network_process+0x282>
 8006a5c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006a60:	832b      	strh	r3, [r5, #24]
 8006a62:	e755      	b.n	8006910 <ai_platform_network_process+0x2fc>
 8006a64:	9d02      	ldr	r5, [sp, #8]
 8006a66:	2219      	movs	r2, #25
 8006a68:	2113      	movs	r1, #19
 8006a6a:	2400      	movs	r4, #0
 8006a6c:	f105 000c 	add.w	r0, r5, #12
 8006a70:	f000 f81e 	bl	8006ab0 <core_set_error>
 8006a74:	e70f      	b.n	8006896 <ai_platform_network_process+0x282>
 8006a76:	9d02      	ldr	r5, [sp, #8]
 8006a78:	4604      	mov	r4, r0
 8006a7a:	2221      	movs	r2, #33	@ 0x21
 8006a7c:	2113      	movs	r1, #19
 8006a7e:	f105 000c 	add.w	r0, r5, #12
 8006a82:	f000 f815 	bl	8006ab0 <core_set_error>
 8006a86:	e706      	b.n	8006896 <ai_platform_network_process+0x282>
 8006a88:	9d02      	ldr	r5, [sp, #8]
 8006a8a:	2217      	movs	r2, #23
 8006a8c:	2113      	movs	r1, #19
 8006a8e:	2400      	movs	r4, #0
 8006a90:	f105 000c 	add.w	r0, r5, #12
 8006a94:	f000 f80c 	bl	8006ab0 <core_set_error>
 8006a98:	e6fd      	b.n	8006896 <ai_platform_network_process+0x282>
 8006a9a:	2700      	movs	r7, #0
 8006a9c:	e73d      	b.n	800691a <ai_platform_network_process+0x306>
 8006a9e:	bf00      	nop

08006aa0 <core_init>:
 8006aa0:	2001      	movs	r0, #1
 8006aa2:	4770      	bx	lr

08006aa4 <core_get_error>:
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	6800      	ldr	r0, [r0, #0]
 8006aaa:	601a      	str	r2, [r3, #0]
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop

08006ab0 <core_set_error>:
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	7800      	ldrb	r0, [r0, #0]
 8006ab4:	b108      	cbz	r0, 8006aba <core_set_error+0xa>
 8006ab6:	2000      	movs	r0, #0
 8006ab8:	4770      	bx	lr
 8006aba:	7019      	strb	r1, [r3, #0]
 8006abc:	2001      	movs	r0, #1
 8006abe:	6819      	ldr	r1, [r3, #0]
 8006ac0:	f362 211f 	bfi	r1, r2, #8, #24
 8006ac4:	6019      	str	r1, [r3, #0]
 8006ac6:	4770      	bx	lr

08006ac8 <ai_check_custom_types>:
 8006ac8:	b082      	sub	sp, #8
 8006aca:	4b12      	ldr	r3, [pc, #72]	@ (8006b14 <ai_check_custom_types+0x4c>)
 8006acc:	9301      	str	r3, [sp, #4]
 8006ace:	b118      	cbz	r0, 8006ad8 <ai_check_custom_types+0x10>
 8006ad0:	7803      	ldrb	r3, [r0, #0]
 8006ad2:	2b03      	cmp	r3, #3
 8006ad4:	d002      	beq.n	8006adc <ai_check_custom_types+0x14>
 8006ad6:	2000      	movs	r0, #0
 8006ad8:	b002      	add	sp, #8
 8006ada:	4770      	bx	lr
 8006adc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d004      	beq.n	8006aee <ai_check_custom_types+0x26>
 8006ae4:	2001      	movs	r0, #1
 8006ae6:	f080 0001 	eor.w	r0, r0, #1
 8006aea:	b002      	add	sp, #8
 8006aec:	4770      	bx	lr
 8006aee:	7842      	ldrb	r2, [r0, #1]
 8006af0:	3001      	adds	r0, #1
 8006af2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d1f4      	bne.n	8006ae4 <ai_check_custom_types+0x1c>
 8006afa:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8006afe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d1ee      	bne.n	8006ae4 <ai_check_custom_types+0x1c>
 8006b06:	7842      	ldrb	r2, [r0, #1]
 8006b08:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d1e9      	bne.n	8006ae4 <ai_check_custom_types+0x1c>
 8006b10:	2000      	movs	r0, #0
 8006b12:	e7e8      	b.n	8006ae6 <ai_check_custom_types+0x1e>
 8006b14:	84048403 	.word	0x84048403

08006b18 <ai_layers_init_all>:
 8006b18:	2100      	movs	r1, #0
 8006b1a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8006b1c:	b13b      	cbz	r3, 8006b2e <ai_layers_init_all+0x16>
 8006b1e:	691a      	ldr	r2, [r3, #16]
 8006b20:	3101      	adds	r1, #1
 8006b22:	60d8      	str	r0, [r3, #12]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	4613      	mov	r3, r2
 8006b28:	d001      	beq.n	8006b2e <ai_layers_init_all+0x16>
 8006b2a:	2a00      	cmp	r2, #0
 8006b2c:	d1f6      	bne.n	8006b1c <ai_layers_init_all+0x4>
 8006b2e:	4608      	mov	r0, r1
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop

08006b34 <ai_layers_post_init_all>:
 8006b34:	b538      	push	{r3, r4, r5, lr}
 8006b36:	2500      	movs	r5, #0
 8006b38:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8006b3a:	b16c      	cbz	r4, 8006b58 <ai_layers_post_init_all+0x24>
 8006b3c:	6863      	ldr	r3, [r4, #4]
 8006b3e:	07db      	lsls	r3, r3, #31
 8006b40:	d504      	bpl.n	8006b4c <ai_layers_post_init_all+0x18>
 8006b42:	6a23      	ldr	r3, [r4, #32]
 8006b44:	4620      	mov	r0, r4
 8006b46:	b10b      	cbz	r3, 8006b4c <ai_layers_post_init_all+0x18>
 8006b48:	3501      	adds	r5, #1
 8006b4a:	4798      	blx	r3
 8006b4c:	6923      	ldr	r3, [r4, #16]
 8006b4e:	42a3      	cmp	r3, r4
 8006b50:	461c      	mov	r4, r3
 8006b52:	d001      	beq.n	8006b58 <ai_layers_post_init_all+0x24>
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1f0      	bne.n	8006b3a <ai_layers_post_init_all+0x6>
 8006b58:	4628      	mov	r0, r5
 8006b5a:	bd38      	pop	{r3, r4, r5, pc}

08006b5c <ai_layers_forward_all>:
 8006b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b60:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 8006b64:	4604      	mov	r4, r0
 8006b66:	f1b8 0f00 	cmp.w	r8, #0
 8006b6a:	d02a      	beq.n	8006bc2 <ai_layers_forward_all+0x66>
 8006b6c:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8006b6e:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8006b70:	b319      	cbz	r1, 8006bba <ai_layers_forward_all+0x5e>
 8006b72:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8006b74:	2001      	movs	r0, #1
 8006b76:	47c0      	blx	r8
 8006b78:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8006b7a:	b1f6      	cbz	r6, 8006bba <ai_layers_forward_all+0x5e>
 8006b7c:	2700      	movs	r7, #0
 8006b7e:	4631      	mov	r1, r6
 8006b80:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006b82:	2002      	movs	r0, #2
 8006b84:	47c0      	blx	r8
 8006b86:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8006b88:	4628      	mov	r0, r5
 8006b8a:	696b      	ldr	r3, [r5, #20]
 8006b8c:	4798      	blx	r3
 8006b8e:	692e      	ldr	r6, [r5, #16]
 8006b90:	2003      	movs	r0, #3
 8006b92:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006b94:	42b5      	cmp	r5, r6
 8006b96:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8006b98:	d007      	beq.n	8006baa <ai_layers_forward_all+0x4e>
 8006b9a:	47c0      	blx	r8
 8006b9c:	3701      	adds	r7, #1
 8006b9e:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8006ba0:	2e00      	cmp	r6, #0
 8006ba2:	d1ec      	bne.n	8006b7e <ai_layers_forward_all+0x22>
 8006ba4:	4638      	mov	r0, r7
 8006ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006baa:	2003      	movs	r0, #3
 8006bac:	3701      	adds	r7, #1
 8006bae:	47c0      	blx	r8
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	4638      	mov	r0, r7
 8006bb4:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8006bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bba:	2700      	movs	r7, #0
 8006bbc:	4638      	mov	r0, r7
 8006bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bc2:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8006bc4:	63c5      	str	r5, [r0, #60]	@ 0x3c
 8006bc6:	2d00      	cmp	r5, #0
 8006bc8:	d0f7      	beq.n	8006bba <ai_layers_forward_all+0x5e>
 8006bca:	4647      	mov	r7, r8
 8006bcc:	696b      	ldr	r3, [r5, #20]
 8006bce:	4628      	mov	r0, r5
 8006bd0:	4798      	blx	r3
 8006bd2:	462b      	mov	r3, r5
 8006bd4:	692d      	ldr	r5, [r5, #16]
 8006bd6:	429d      	cmp	r5, r3
 8006bd8:	d004      	beq.n	8006be4 <ai_layers_forward_all+0x88>
 8006bda:	3701      	adds	r7, #1
 8006bdc:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8006bde:	2d00      	cmp	r5, #0
 8006be0:	d1f4      	bne.n	8006bcc <ai_layers_forward_all+0x70>
 8006be2:	e7df      	b.n	8006ba4 <ai_layers_forward_all+0x48>
 8006be4:	2300      	movs	r3, #0
 8006be6:	3701      	adds	r7, #1
 8006be8:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8006bea:	e7db      	b.n	8006ba4 <ai_layers_forward_all+0x48>

08006bec <forward_dense>:
 8006bec:	6983      	ldr	r3, [r0, #24]
 8006bee:	881a      	ldrh	r2, [r3, #0]
 8006bf0:	2a00      	cmp	r2, #0
 8006bf2:	f000 80cb 	beq.w	8006d8c <forward_dense+0x1a0>
 8006bf6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bfa:	ed2d 8b02 	vpush	{d8}
 8006bfe:	6858      	ldr	r0, [r3, #4]
 8006c00:	b09b      	sub	sp, #108	@ 0x6c
 8006c02:	6844      	ldr	r4, [r0, #4]
 8006c04:	b104      	cbz	r4, 8006c08 <forward_dense+0x1c>
 8006c06:	6824      	ldr	r4, [r4, #0]
 8006c08:	2a01      	cmp	r2, #1
 8006c0a:	f000 81d8 	beq.w	8006fbe <forward_dense+0x3d2>
 8006c0e:	6905      	ldr	r5, [r0, #16]
 8006c10:	b105      	cbz	r5, 8006c14 <forward_dense+0x28>
 8006c12:	682d      	ldr	r5, [r5, #0]
 8006c14:	2a02      	cmp	r2, #2
 8006c16:	f000 80bb 	beq.w	8006d90 <forward_dense+0x1a4>
 8006c1a:	69c3      	ldr	r3, [r0, #28]
 8006c1c:	9308      	str	r3, [sp, #32]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f000 81c4 	beq.w	8006fac <forward_dense+0x3c0>
 8006c24:	4619      	mov	r1, r3
 8006c26:	8b03      	ldrh	r3, [r0, #24]
 8006c28:	6809      	ldr	r1, [r1, #0]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	910a      	str	r1, [sp, #40]	@ 0x28
 8006c2e:	f240 81bf 	bls.w	8006fb0 <forward_dense+0x3c4>
 8006c32:	9b08      	ldr	r3, [sp, #32]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	9308      	str	r3, [sp, #32]
 8006c38:	460b      	mov	r3, r1
 8006c3a:	f8d3 9018 	ldr.w	r9, [r3, #24]
 8006c3e:	2a03      	cmp	r2, #3
 8006c40:	68e3      	ldr	r3, [r4, #12]
 8006c42:	68ee      	ldr	r6, [r5, #12]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	6877      	ldr	r7, [r6, #4]
 8006c48:	9310      	str	r3, [sp, #64]	@ 0x40
 8006c4a:	f8d9 3000 	ldr.w	r3, [r9]
 8006c4e:	4639      	mov	r1, r7
 8006c50:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006c52:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8006c56:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 8006c5a:	e9d6 7602 	ldrd	r7, r6, [r6, #8]
 8006c5e:	fb01 f707 	mul.w	r7, r1, r7
 8006c62:	fa4e f10c 	asr.w	r1, lr, ip
 8006c66:	910d      	str	r1, [sp, #52]	@ 0x34
 8006c68:	f000 81a6 	beq.w	8006fb8 <forward_dense+0x3cc>
 8006c6c:	f8d0 8028 	ldr.w	r8, [r0, #40]	@ 0x28
 8006c70:	f1b8 0f00 	cmp.w	r8, #0
 8006c74:	d006      	beq.n	8006c84 <forward_dense+0x98>
 8006c76:	f8d8 8000 	ldr.w	r8, [r8]
 8006c7a:	f1b8 0f00 	cmp.w	r8, #0
 8006c7e:	d001      	beq.n	8006c84 <forward_dense+0x98>
 8006c80:	f8d8 8018 	ldr.w	r8, [r8, #24]
 8006c84:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8006c88:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 8006c8c:	fa42 f303 	asr.w	r3, r2, r3
 8006c90:	07db      	lsls	r3, r3, #31
 8006c92:	f140 8178 	bpl.w	8006f86 <forward_dense+0x39a>
 8006c96:	f04f 0900 	mov.w	r9, #0
 8006c9a:	69a3      	ldr	r3, [r4, #24]
 8006c9c:	fb07 f606 	mul.w	r6, r7, r6
 8006ca0:	69aa      	ldr	r2, [r5, #24]
 8006ca2:	6891      	ldr	r1, [r2, #8]
 8006ca4:	689a      	ldr	r2, [r3, #8]
 8006ca6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ca8:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8006cac:	9102      	str	r1, [sp, #8]
 8006cae:	695b      	ldr	r3, [r3, #20]
 8006cb0:	4281      	cmp	r1, r0
 8006cb2:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	9303      	str	r3, [sp, #12]
 8006cb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cba:	ea4f 0483 	mov.w	r4, r3, lsl #2
 8006cbe:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 8006cc2:	9409      	str	r4, [sp, #36]	@ 0x24
 8006cc4:	d25d      	bcs.n	8006d82 <forward_dense+0x196>
 8006cc6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006cc8:	4693      	mov	fp, r2
 8006cca:	464c      	mov	r4, r9
 8006ccc:	ed9f 8abd 	vldr	s16, [pc, #756]	@ 8006fc4 <forward_dense+0x3d8>
 8006cd0:	08d9      	lsrs	r1, r3, #3
 8006cd2:	46c1      	mov	r9, r8
 8006cd4:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
 8006cd8:	461a      	mov	r2, r3
 8006cda:	f023 0301 	bic.w	r3, r3, #1
 8006cde:	9104      	str	r1, [sp, #16]
 8006ce0:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8006ce4:	9301      	str	r3, [sp, #4]
 8006ce6:	014b      	lsls	r3, r1, #5
 8006ce8:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 8006cec:	9311      	str	r3, [sp, #68]	@ 0x44
 8006cee:	0093      	lsls	r3, r2, #2
 8006cf0:	930c      	str	r3, [sp, #48]	@ 0x30
 8006cf2:	f002 0301 	and.w	r3, r2, #1
 8006cf6:	9305      	str	r3, [sp, #20]
 8006cf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8006d00:	9b08      	ldr	r3, [sp, #32]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d04a      	beq.n	8006d9c <forward_dense+0x1b0>
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	689d      	ldr	r5, [r3, #8]
 8006d0a:	2c00      	cmp	r4, #0
 8006d0c:	d049      	beq.n	8006da2 <forward_dense+0x1b6>
 8006d0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d10:	2b04      	cmp	r3, #4
 8006d12:	9b02      	ldr	r3, [sp, #8]
 8006d14:	d058      	beq.n	8006dc8 <forward_dense+0x1dc>
 8006d16:	4599      	cmp	r9, r3
 8006d18:	d927      	bls.n	8006d6a <forward_dense+0x17e>
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	9e03      	ldr	r6, [sp, #12]
 8006d1e:	2d00      	cmp	r5, #0
 8006d20:	d039      	beq.n	8006d96 <forward_dense+0x1aa>
 8006d22:	ecb5 6a01 	vldmia	r5!, {s12}
 8006d26:	45da      	cmp	sl, fp
 8006d28:	d911      	bls.n	8006d4e <forward_dense+0x162>
 8006d2a:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8006fc4 <forward_dense+0x3d8>
 8006d2e:	465a      	mov	r2, fp
 8006d30:	4661      	mov	r1, ip
 8006d32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d36:	ecb2 7a01 	vldmia	r2!, {s14}
 8006d3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d3e:	4592      	cmp	sl, r2
 8006d40:	edd3 6a00 	vldr	s13, [r3]
 8006d44:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006d48:	d8f3      	bhi.n	8006d32 <forward_dense+0x146>
 8006d4a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006d4e:	eca0 6a01 	vstmia	r0!, {s12}
 8006d52:	4548      	cmp	r0, r9
 8006d54:	44b4      	add	ip, r6
 8006d56:	d3e2      	bcc.n	8006d1e <forward_dense+0x132>
 8006d58:	9a02      	ldr	r2, [sp, #8]
 8006d5a:	eba9 0302 	sub.w	r3, r9, r2
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	f023 0303 	bic.w	r3, r3, #3
 8006d64:	3304      	adds	r3, #4
 8006d66:	18d3      	adds	r3, r2, r3
 8006d68:	9302      	str	r3, [sp, #8]
 8006d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d6c:	9a01      	ldr	r2, [sp, #4]
 8006d6e:	4499      	add	r9, r3
 8006d70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d72:	441a      	add	r2, r3
 8006d74:	449a      	add	sl, r3
 8006d76:	449b      	add	fp, r3
 8006d78:	9b02      	ldr	r3, [sp, #8]
 8006d7a:	9201      	str	r2, [sp, #4]
 8006d7c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d3ba      	bcc.n	8006cf8 <forward_dense+0x10c>
 8006d82:	b01b      	add	sp, #108	@ 0x6c
 8006d84:	ecbd 8b02 	vpop	{d8}
 8006d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d8c:	6853      	ldr	r3, [r2, #4]
 8006d8e:	deff      	udf	#255	@ 0xff
 8006d90:	2300      	movs	r3, #0
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	deff      	udf	#255	@ 0xff
 8006d96:	ed9f 6a8b 	vldr	s12, [pc, #556]	@ 8006fc4 <forward_dense+0x3d8>
 8006d9a:	e7c4      	b.n	8006d26 <forward_dense+0x13a>
 8006d9c:	461d      	mov	r5, r3
 8006d9e:	2c00      	cmp	r4, #0
 8006da0:	d1b5      	bne.n	8006d0e <forward_dense+0x122>
 8006da2:	9b02      	ldr	r3, [sp, #8]
 8006da4:	a813      	add	r0, sp, #76	@ 0x4c
 8006da6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006da8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006daa:	4413      	add	r3, r2
 8006dac:	f8cd b050 	str.w	fp, [sp, #80]	@ 0x50
 8006db0:	9302      	str	r3, [sp, #8]
 8006db2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006db4:	9317      	str	r3, [sp, #92]	@ 0x5c
 8006db6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006db8:	9318      	str	r3, [sp, #96]	@ 0x60
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e9cd c515 	strd	ip, r5, [sp, #84]	@ 0x54
 8006dc0:	9319      	str	r3, [sp, #100]	@ 0x64
 8006dc2:	f000 fa1d 	bl	8007200 <forward_lite_dense_if32of32wf32>
 8006dc6:	e7d0      	b.n	8006d6a <forward_dense+0x17e>
 8006dc8:	4599      	cmp	r9, r3
 8006dca:	d9ce      	bls.n	8006d6a <forward_dense+0x17e>
 8006dcc:	9a04      	ldr	r2, [sp, #16]
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	1c57      	adds	r7, r2, #1
 8006dd2:	9b01      	ldr	r3, [sp, #4]
 8006dd4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	eb0c 0787 	add.w	r7, ip, r7, lsl #2
 8006ddc:	4452      	add	r2, sl
 8006dde:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
 8006de2:	9307      	str	r3, [sp, #28]
 8006de4:	9206      	str	r2, [sp, #24]
 8006de6:	2d00      	cmp	r5, #0
 8006de8:	f000 80c2 	beq.w	8006f70 <forward_dense+0x384>
 8006dec:	9b04      	ldr	r3, [sp, #16]
 8006dee:	ecf5 2a01 	vldmia	r5!, {s5}
 8006df2:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8006fc4 <forward_dense+0x3d8>
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f000 80c2 	beq.w	8006f80 <forward_dense+0x394>
 8006dfc:	f10c 0204 	add.w	r2, ip, #4
 8006e00:	f10b 0320 	add.w	r3, fp, #32
 8006e04:	f812 6c04 	ldrb.w	r6, [r2, #-4]
 8006e08:	3204      	adds	r2, #4
 8006e0a:	ed13 2a07 	vldr	s4, [r3, #-28]	@ 0xffffffe4
 8006e0e:	3320      	adds	r3, #32
 8006e10:	f006 0e0f 	and.w	lr, r6, #15
 8006e14:	0936      	lsrs	r6, r6, #4
 8006e16:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 8006e1a:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8006e1e:	ed13 4a10 	vldr	s8, [r3, #-64]	@ 0xffffffc0
 8006e22:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006e26:	ed53 3a0e 	vldr	s7, [r3, #-56]	@ 0xffffffc8
 8006e2a:	edde 7a00 	vldr	s15, [lr]
 8006e2e:	ed96 3a00 	vldr	s6, [r6]
 8006e32:	0906      	lsrs	r6, r0, #4
 8006e34:	ee67 7a82 	vmul.f32	s15, s15, s4
 8006e38:	f000 000f 	and.w	r0, r0, #15
 8006e3c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006e40:	f812 1c06 	ldrb.w	r1, [r2, #-6]
 8006e44:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8006e48:	ed13 5a0d 	vldr	s10, [r3, #-52]	@ 0xffffffcc
 8006e4c:	eee3 7a04 	vfma.f32	s15, s6, s8
 8006e50:	ed96 3a00 	vldr	s6, [r6]
 8006e54:	ed90 4a00 	vldr	s8, [r0]
 8006e58:	0908      	lsrs	r0, r1, #4
 8006e5a:	ed53 4a0c 	vldr	s9, [r3, #-48]	@ 0xffffffd0
 8006e5e:	f001 010f 	and.w	r1, r1, #15
 8006e62:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8006e66:	ed13 6a0b 	vldr	s12, [r3, #-44]	@ 0xffffffd4
 8006e6a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006e6e:	ed53 5a0a 	vldr	s11, [r3, #-40]	@ 0xffffffd8
 8006e72:	ed53 6a09 	vldr	s13, [r3, #-36]	@ 0xffffffdc
 8006e76:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006e7a:	eee4 7a05 	vfma.f32	s15, s8, s10
 8006e7e:	ed90 4a00 	vldr	s8, [r0]
 8006e82:	ed91 5a00 	vldr	s10, [r1]
 8006e86:	f812 1c05 	ldrb.w	r1, [r2, #-5]
 8006e8a:	42ba      	cmp	r2, r7
 8006e8c:	ea4f 1011 	mov.w	r0, r1, lsr #4
 8006e90:	f001 010f 	and.w	r1, r1, #15
 8006e94:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006e98:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8006e9c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006ea0:	eee5 7a06 	vfma.f32	s15, s10, s12
 8006ea4:	ed90 5a00 	vldr	s10, [r0]
 8006ea8:	ed91 6a00 	vldr	s12, [r1]
 8006eac:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006eb0:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006eb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006eb8:	d1a4      	bne.n	8006e04 <forward_dense+0x218>
 8006eba:	f1a7 0804 	sub.w	r8, r7, #4
 8006ebe:	f8dd e018 	ldr.w	lr, [sp, #24]
 8006ec2:	9b01      	ldr	r3, [sp, #4]
 8006ec4:	459e      	cmp	lr, r3
 8006ec6:	d229      	bcs.n	8006f1c <forward_dense+0x330>
 8006ec8:	9b07      	ldr	r3, [sp, #28]
 8006eca:	f10e 0208 	add.w	r2, lr, #8
 8006ece:	f108 30ff 	add.w	r0, r8, #4294967295
 8006ed2:	eba3 060e 	sub.w	r6, r3, lr
 8006ed6:	ea4f 0ad6 	mov.w	sl, r6, lsr #3
 8006eda:	eb08 06d6 	add.w	r6, r8, r6, lsr #3
 8006ede:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8006ee2:	3208      	adds	r2, #8
 8006ee4:	ed52 5a03 	vldr	s11, [r2, #-12]
 8006ee8:	f003 010f 	and.w	r1, r3, #15
 8006eec:	091b      	lsrs	r3, r3, #4
 8006eee:	ed52 6a04 	vldr	s13, [r2, #-16]
 8006ef2:	42b0      	cmp	r0, r6
 8006ef4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006ef8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006efc:	edd1 7a00 	vldr	s15, [r1]
 8006f00:	ed93 6a00 	vldr	s12, [r3]
 8006f04:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006f08:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006f0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006f10:	d1e5      	bne.n	8006ede <forward_dense+0x2f2>
 8006f12:	f10a 0a01 	add.w	sl, sl, #1
 8006f16:	44d0      	add	r8, sl
 8006f18:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8006f1c:	9b05      	ldr	r3, [sp, #20]
 8006f1e:	b1cb      	cbz	r3, 8006f54 <forward_dense+0x368>
 8006f20:	f898 3000 	ldrb.w	r3, [r8]
 8006f24:	edde 7a00 	vldr	s15, [lr]
 8006f28:	091b      	lsrs	r3, r3, #4
 8006f2a:	9a03      	ldr	r2, [sp, #12]
 8006f2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f30:	4494      	add	ip, r2
 8006f32:	4417      	add	r7, r2
 8006f34:	edd3 6a00 	vldr	s13, [r3]
 8006f38:	9b00      	ldr	r3, [sp, #0]
 8006f3a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006f3e:	ee32 7a87 	vadd.f32	s14, s5, s14
 8006f42:	eca3 7a01 	vstmia	r3!, {s14}
 8006f46:	4599      	cmp	r9, r3
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	f63f af4c 	bhi.w	8006de6 <forward_dense+0x1fa>
 8006f4e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006f52:	e701      	b.n	8006d58 <forward_dense+0x16c>
 8006f54:	9b03      	ldr	r3, [sp, #12]
 8006f56:	ee72 2a87 	vadd.f32	s5, s5, s14
 8006f5a:	449c      	add	ip, r3
 8006f5c:	441f      	add	r7, r3
 8006f5e:	9b00      	ldr	r3, [sp, #0]
 8006f60:	ece3 2a01 	vstmia	r3!, {s5}
 8006f64:	454b      	cmp	r3, r9
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	d2f1      	bcs.n	8006f4e <forward_dense+0x362>
 8006f6a:	2d00      	cmp	r5, #0
 8006f6c:	f47f af3e 	bne.w	8006dec <forward_dense+0x200>
 8006f70:	9b04      	ldr	r3, [sp, #16]
 8006f72:	eef0 2a48 	vmov.f32	s5, s16
 8006f76:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8006fc4 <forward_dense+0x3d8>
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f47f af3e 	bne.w	8006dfc <forward_dense+0x210>
 8006f80:	46de      	mov	lr, fp
 8006f82:	46e0      	mov	r8, ip
 8006f84:	e79d      	b.n	8006ec2 <forward_dense+0x2d6>
 8006f86:	f8d9 900c 	ldr.w	r9, [r9, #12]
 8006f8a:	f1b8 0f00 	cmp.w	r8, #0
 8006f8e:	f43f ae84 	beq.w	8006c9a <forward_dense+0xae>
 8006f92:	e9d8 0100 	ldrd	r0, r1, [r8]
 8006f96:	f000 fb89 	bl	80076ac <ai_array_get_byte_size>
 8006f9a:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	4648      	mov	r0, r9
 8006fa2:	4641      	mov	r1, r8
 8006fa4:	46c1      	mov	r9, r8
 8006fa6:	f000 fa89 	bl	80074bc <st_int8_copy>
 8006faa:	e676      	b.n	8006c9a <forward_dense+0xae>
 8006fac:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fae:	e644      	b.n	8006c3a <forward_dense+0x4e>
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	9308      	str	r3, [sp, #32]
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	e640      	b.n	8006c3a <forward_dense+0x4e>
 8006fb8:	2300      	movs	r3, #0
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	deff      	udf	#255	@ 0xff
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	deff      	udf	#255	@ 0xff
 8006fc4:	00000000 	.word	0x00000000

08006fc8 <forward_relu>:
 8006fc8:	6982      	ldr	r2, [r0, #24]
 8006fca:	8813      	ldrh	r3, [r2, #0]
 8006fcc:	b323      	cbz	r3, 8007018 <forward_relu+0x50>
 8006fce:	6851      	ldr	r1, [r2, #4]
 8006fd0:	684a      	ldr	r2, [r1, #4]
 8006fd2:	b102      	cbz	r2, 8006fd6 <forward_relu+0xe>
 8006fd4:	6812      	ldr	r2, [r2, #0]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	f000 8086 	beq.w	80070e8 <forward_relu+0x120>
 8006fdc:	b470      	push	{r4, r5, r6}
 8006fde:	690b      	ldr	r3, [r1, #16]
 8006fe0:	b103      	cbz	r3, 8006fe4 <forward_relu+0x1c>
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	69c6      	ldr	r6, [r0, #28]
 8006fe6:	b1ce      	cbz	r6, 800701c <forward_relu+0x54>
 8006fe8:	6871      	ldr	r1, [r6, #4]
 8006fea:	6998      	ldr	r0, [r3, #24]
 8006fec:	2901      	cmp	r1, #1
 8006fee:	d03f      	beq.n	8007070 <forward_relu+0xa8>
 8006ff0:	6893      	ldr	r3, [r2, #8]
 8006ff2:	6991      	ldr	r1, [r2, #24]
 8006ff4:	0a1b      	lsrs	r3, r3, #8
 8006ff6:	6880      	ldr	r0, [r0, #8]
 8006ff8:	6889      	ldr	r1, [r1, #8]
 8006ffa:	d06c      	beq.n	80070d6 <forward_relu+0x10e>
 8006ffc:	68d5      	ldr	r5, [r2, #12]
 8006ffe:	2201      	movs	r2, #1
 8007000:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007004:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8007008:	429d      	cmp	r5, r3
 800700a:	fb04 f202 	mul.w	r2, r4, r2
 800700e:	d1f9      	bne.n	8007004 <forward_relu+0x3c>
 8007010:	68b3      	ldr	r3, [r6, #8]
 8007012:	bc70      	pop	{r4, r5, r6}
 8007014:	f000 b86e 	b.w	80070f4 <forward_lite_nl_relu_generic_if32of32_kernel>
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	deff      	udf	#255	@ 0xff
 800701c:	6999      	ldr	r1, [r3, #24]
 800701e:	6893      	ldr	r3, [r2, #8]
 8007020:	6990      	ldr	r0, [r2, #24]
 8007022:	0a1b      	lsrs	r3, r3, #8
 8007024:	6889      	ldr	r1, [r1, #8]
 8007026:	6884      	ldr	r4, [r0, #8]
 8007028:	d057      	beq.n	80070da <forward_relu+0x112>
 800702a:	68d5      	ldr	r5, [r2, #12]
 800702c:	2201      	movs	r2, #1
 800702e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007032:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8007036:	429d      	cmp	r5, r3
 8007038:	fb00 f202 	mul.w	r2, r0, r2
 800703c:	d1f9      	bne.n	8007032 <forward_relu+0x6a>
 800703e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007042:	4413      	add	r3, r2
 8007044:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007048:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800704c:	4294      	cmp	r4, r2
 800704e:	d80d      	bhi.n	800706c <forward_relu+0xa4>
 8007050:	3204      	adds	r2, #4
 8007052:	3104      	adds	r1, #4
 8007054:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80070f0 <forward_relu+0x128>
 8007058:	4613      	mov	r3, r2
 800705a:	ed72 7a01 	vldmdb	r2!, {s15}
 800705e:	3b08      	subs	r3, #8
 8007060:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8007064:	ed61 7a01 	vstmdb	r1!, {s15}
 8007068:	429c      	cmp	r4, r3
 800706a:	d9f5      	bls.n	8007058 <forward_relu+0x90>
 800706c:	bc70      	pop	{r4, r5, r6}
 800706e:	4770      	bx	lr
 8007070:	6993      	ldr	r3, [r2, #24]
 8007072:	6880      	ldr	r0, [r0, #8]
 8007074:	689c      	ldr	r4, [r3, #8]
 8007076:	6893      	ldr	r3, [r2, #8]
 8007078:	0a1b      	lsrs	r3, r3, #8
 800707a:	d030      	beq.n	80070de <forward_relu+0x116>
 800707c:	68d5      	ldr	r5, [r2, #12]
 800707e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007082:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007086:	429d      	cmp	r5, r3
 8007088:	fb02 f101 	mul.w	r1, r2, r1
 800708c:	d1f9      	bne.n	8007082 <forward_relu+0xba>
 800708e:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 8007092:	68b3      	ldr	r3, [r6, #8]
 8007094:	440a      	add	r2, r1
 8007096:	ed93 7a00 	vldr	s14, [r3]
 800709a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800709e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80070a2:	429c      	cmp	r4, r3
 80070a4:	d8e2      	bhi.n	800706c <forward_relu+0xa4>
 80070a6:	1d02      	adds	r2, r0, #4
 80070a8:	3304      	adds	r3, #4
 80070aa:	2000      	movs	r0, #0
 80070ac:	ed53 7a01 	vldr	s15, [r3, #-4]
 80070b0:	1f19      	subs	r1, r3, #4
 80070b2:	3b08      	subs	r3, #8
 80070b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80070b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070bc:	d405      	bmi.n	80070ca <forward_relu+0x102>
 80070be:	429c      	cmp	r4, r3
 80070c0:	f842 0d04 	str.w	r0, [r2, #-4]!
 80070c4:	d8d2      	bhi.n	800706c <forward_relu+0xa4>
 80070c6:	460b      	mov	r3, r1
 80070c8:	e7f0      	b.n	80070ac <forward_relu+0xe4>
 80070ca:	429c      	cmp	r4, r3
 80070cc:	ed62 7a01 	vstmdb	r2!, {s15}
 80070d0:	d8cc      	bhi.n	800706c <forward_relu+0xa4>
 80070d2:	460b      	mov	r3, r1
 80070d4:	e7ea      	b.n	80070ac <forward_relu+0xe4>
 80070d6:	2201      	movs	r2, #1
 80070d8:	e79a      	b.n	8007010 <forward_relu+0x48>
 80070da:	4622      	mov	r2, r4
 80070dc:	e7b8      	b.n	8007050 <forward_relu+0x88>
 80070de:	68b2      	ldr	r2, [r6, #8]
 80070e0:	4623      	mov	r3, r4
 80070e2:	ed92 7a00 	vldr	s14, [r2]
 80070e6:	e7de      	b.n	80070a6 <forward_relu+0xde>
 80070e8:	2300      	movs	r3, #0
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	deff      	udf	#255	@ 0xff
 80070ee:	bf00      	nop
 80070f0:	00000000 	.word	0x00000000

080070f4 <forward_lite_nl_relu_generic_if32of32_kernel>:
 80070f4:	edd3 6a02 	vldr	s13, [r3, #8]
 80070f8:	ed93 7a00 	vldr	s14, [r3]
 80070fc:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8007100:	ed93 6a01 	vldr	s12, [r3, #4]
 8007104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007108:	d42b      	bmi.n	8007162 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 800710a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800710e:	4413      	add	r3, r2
 8007110:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8007114:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8007118:	4291      	cmp	r1, r2
 800711a:	d821      	bhi.n	8007160 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800711c:	f10c 0104 	add.w	r1, ip, #4
 8007120:	1d13      	adds	r3, r2, #4
 8007122:	eba2 020c 	sub.w	r2, r2, ip
 8007126:	4408      	add	r0, r1
 8007128:	e00c      	b.n	8007144 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 800712a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800712e:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8007132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007136:	db01      	blt.n	800713c <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 8007138:	ee65 7a86 	vmul.f32	s15, s11, s12
 800713c:	4293      	cmp	r3, r2
 800713e:	ed60 7a01 	vstmdb	r0!, {s15}
 8007142:	d00c      	beq.n	800715e <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 8007144:	ed73 7a01 	vldmdb	r3!, {s15}
 8007148:	eef4 6ae7 	vcmpe.f32	s13, s15
 800714c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007150:	daeb      	bge.n	800712a <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 8007152:	eef0 7a66 	vmov.f32	s15, s13
 8007156:	4293      	cmp	r3, r2
 8007158:	ed60 7a01 	vstmdb	r0!, {s15}
 800715c:	d1f2      	bne.n	8007144 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 800715e:	4770      	bx	lr
 8007160:	4770      	bx	lr
 8007162:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8007166:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800716a:	4413      	add	r3, r2
 800716c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007170:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 8007174:	b500      	push	{lr}
 8007176:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 800717a:	d019      	beq.n	80071b0 <forward_lite_nl_relu_generic_if32of32_kernel+0xbc>
 800717c:	4561      	cmp	r1, ip
 800717e:	d815      	bhi.n	80071ac <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8007180:	f10e 0204 	add.w	r2, lr, #4
 8007184:	f10c 0304 	add.w	r3, ip, #4
 8007188:	ebac 010e 	sub.w	r1, ip, lr
 800718c:	4402      	add	r2, r0
 800718e:	ed73 7a01 	vldmdb	r3!, {s15}
 8007192:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007196:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800719a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800719e:	ee66 6a86 	vmul.f32	s13, s13, s12
 80071a2:	d827      	bhi.n	80071f4 <forward_lite_nl_relu_generic_if32of32_kernel+0x100>
 80071a4:	428b      	cmp	r3, r1
 80071a6:	ed62 6a01 	vstmdb	r2!, {s13}
 80071aa:	d1f0      	bne.n	800718e <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 80071ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80071b0:	4561      	cmp	r1, ip
 80071b2:	d8fb      	bhi.n	80071ac <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 80071b4:	f10e 0204 	add.w	r2, lr, #4
 80071b8:	f10c 0304 	add.w	r3, ip, #4
 80071bc:	ebac 010e 	sub.w	r1, ip, lr
 80071c0:	f04f 0c00 	mov.w	ip, #0
 80071c4:	4402      	add	r2, r0
 80071c6:	ed73 7a01 	vldmdb	r3!, {s15}
 80071ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80071ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071d2:	d40a      	bmi.n	80071ea <forward_lite_nl_relu_generic_if32of32_kernel+0xf6>
 80071d4:	428b      	cmp	r3, r1
 80071d6:	f842 cd04 	str.w	ip, [r2, #-4]!
 80071da:	d0e7      	beq.n	80071ac <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 80071dc:	ed73 7a01 	vldmdb	r3!, {s15}
 80071e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80071e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071e8:	d5f4      	bpl.n	80071d4 <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 80071ea:	428b      	cmp	r3, r1
 80071ec:	ed62 7a01 	vstmdb	r2!, {s15}
 80071f0:	d1e9      	bne.n	80071c6 <forward_lite_nl_relu_generic_if32of32_kernel+0xd2>
 80071f2:	e7db      	b.n	80071ac <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 80071f4:	428b      	cmp	r3, r1
 80071f6:	ed62 7a01 	vstmdb	r2!, {s15}
 80071fa:	d1c8      	bne.n	800718e <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 80071fc:	e7d6      	b.n	80071ac <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 80071fe:	bf00      	nop

08007200 <forward_lite_dense_if32of32wf32>:
 8007200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007204:	ed2d 8b0c 	vpush	{d8-d13}
 8007208:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 800720c:	6801      	ldr	r1, [r0, #0]
 800720e:	b083      	sub	sp, #12
 8007210:	fb02 f303 	mul.w	r3, r2, r3
 8007214:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8007218:	9100      	str	r1, [sp, #0]
 800721a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800721e:	4299      	cmp	r1, r3
 8007220:	9301      	str	r3, [sp, #4]
 8007222:	f080 811c 	bcs.w	800745e <forward_lite_dense_if32of32wf32+0x25e>
 8007226:	4607      	mov	r7, r0
 8007228:	6904      	ldr	r4, [r0, #16]
 800722a:	0096      	lsls	r6, r2, #2
 800722c:	9b00      	ldr	r3, [sp, #0]
 800722e:	68bd      	ldr	r5, [r7, #8]
 8007230:	eb03 0e06 	add.w	lr, r3, r6
 8007234:	461e      	mov	r6, r3
 8007236:	459e      	cmp	lr, r3
 8007238:	f240 8103 	bls.w	8007442 <forward_lite_dense_if32of32wf32+0x242>
 800723c:	f1a4 0c10 	sub.w	ip, r4, #16
 8007240:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8007244:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8007248:	f10c 0c01 	add.w	ip, ip, #1
 800724c:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 8007250:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 8007254:	2c0f      	cmp	r4, #15
 8007256:	f240 8107 	bls.w	8007468 <forward_lite_dense_if32of32wf32+0x268>
 800725a:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 800725e:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 8007262:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 80074b8 <forward_lite_dense_if32of32wf32+0x2b8>
 8007266:	4621      	mov	r1, r4
 8007268:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 800726c:	3910      	subs	r1, #16
 800726e:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 8007272:	3340      	adds	r3, #64	@ 0x40
 8007274:	ed52 4a10 	vldr	s9, [r2, #-64]	@ 0xffffffc0
 8007278:	290f      	cmp	r1, #15
 800727a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800727e:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 8007282:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 8007286:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 800728a:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 800728e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007292:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 8007296:	ed12 da1d 	vldr	s26, [r2, #-116]	@ 0xffffff8c
 800729a:	ed52 ca1c 	vldr	s25, [r2, #-112]	@ 0xffffff90
 800729e:	ed13 ca1c 	vldr	s24, [r3, #-112]	@ 0xffffff90
 80072a2:	ed52 ba1b 	vldr	s23, [r2, #-108]	@ 0xffffff94
 80072a6:	ed13 ba1b 	vldr	s22, [r3, #-108]	@ 0xffffff94
 80072aa:	eee5 7a86 	vfma.f32	s15, s11, s12
 80072ae:	ed52 aa1a 	vldr	s21, [r2, #-104]	@ 0xffffff98
 80072b2:	ed13 aa1a 	vldr	s20, [r3, #-104]	@ 0xffffff98
 80072b6:	ed52 9a19 	vldr	s19, [r2, #-100]	@ 0xffffff9c
 80072ba:	ed13 9a19 	vldr	s18, [r3, #-100]	@ 0xffffff9c
 80072be:	ed52 8a18 	vldr	s17, [r2, #-96]	@ 0xffffffa0
 80072c2:	ed13 8a18 	vldr	s16, [r3, #-96]	@ 0xffffffa0
 80072c6:	eeed 7a26 	vfma.f32	s15, s26, s13
 80072ca:	ed12 0a17 	vldr	s0, [r2, #-92]	@ 0xffffffa4
 80072ce:	ed53 0a17 	vldr	s1, [r3, #-92]	@ 0xffffffa4
 80072d2:	ed12 1a16 	vldr	s2, [r2, #-88]	@ 0xffffffa8
 80072d6:	ed53 1a16 	vldr	s3, [r3, #-88]	@ 0xffffffa8
 80072da:	ed12 2a15 	vldr	s4, [r2, #-84]	@ 0xffffffac
 80072de:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 80072e2:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80072e6:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 80072ea:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 80072ee:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 80072f2:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 80072f6:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 80072fa:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 80072fe:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8007302:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8007306:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 800730a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800730e:	eee9 7a89 	vfma.f32	s15, s19, s18
 8007312:	eee8 7a88 	vfma.f32	s15, s17, s16
 8007316:	eee0 7a20 	vfma.f32	s15, s0, s1
 800731a:	eee1 7a21 	vfma.f32	s15, s2, s3
 800731e:	eee2 7a22 	vfma.f32	s15, s4, s5
 8007322:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007326:	eee4 7a24 	vfma.f32	s15, s8, s9
 800732a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800732e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007332:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007336:	d897      	bhi.n	8007268 <forward_lite_dense_if32of32wf32+0x68>
 8007338:	eb05 020b 	add.w	r2, r5, fp
 800733c:	f004 010f 	and.w	r1, r4, #15
 8007340:	4663      	mov	r3, ip
 8007342:	2903      	cmp	r1, #3
 8007344:	d95f      	bls.n	8007406 <forward_lite_dense_if32of32wf32+0x206>
 8007346:	edd2 6a01 	vldr	s13, [r2, #4]
 800734a:	1f08      	subs	r0, r1, #4
 800734c:	edd3 7a01 	vldr	s15, [r3, #4]
 8007350:	ed93 4a00 	vldr	s8, [r3]
 8007354:	2803      	cmp	r0, #3
 8007356:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800735a:	edd2 4a00 	vldr	s9, [r2]
 800735e:	ed93 5a02 	vldr	s10, [r3, #8]
 8007362:	edd2 5a02 	vldr	s11, [r2, #8]
 8007366:	eee4 7a24 	vfma.f32	s15, s8, s9
 800736a:	ed93 6a03 	vldr	s12, [r3, #12]
 800736e:	edd2 6a03 	vldr	s13, [r2, #12]
 8007372:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007376:	eee5 7a25 	vfma.f32	s15, s10, s11
 800737a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800737e:	eeb0 7a67 	vmov.f32	s14, s15
 8007382:	d938      	bls.n	80073f6 <forward_lite_dense_if32of32wf32+0x1f6>
 8007384:	edd2 6a05 	vldr	s13, [r2, #20]
 8007388:	f1a1 0a08 	sub.w	sl, r1, #8
 800738c:	edd3 7a05 	vldr	s15, [r3, #20]
 8007390:	ed93 4a04 	vldr	s8, [r3, #16]
 8007394:	f1ba 0f03 	cmp.w	sl, #3
 8007398:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800739c:	edd2 4a04 	vldr	s9, [r2, #16]
 80073a0:	ed93 5a06 	vldr	s10, [r3, #24]
 80073a4:	edd2 5a06 	vldr	s11, [r2, #24]
 80073a8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80073ac:	ed93 6a07 	vldr	s12, [r3, #28]
 80073b0:	edd2 6a07 	vldr	s13, [r2, #28]
 80073b4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80073b8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80073bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80073c0:	d919      	bls.n	80073f6 <forward_lite_dense_if32of32wf32+0x1f6>
 80073c2:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80073c6:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 80073ca:	ed92 4a08 	vldr	s8, [r2, #32]
 80073ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80073d2:	edd3 4a08 	vldr	s9, [r3, #32]
 80073d6:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 80073da:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 80073de:	eee4 7a24 	vfma.f32	s15, s8, s9
 80073e2:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 80073e6:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 80073ea:	eee5 7a25 	vfma.f32	s15, s10, s11
 80073ee:	eee6 7a26 	vfma.f32	s15, s12, s13
 80073f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80073f6:	0880      	lsrs	r0, r0, #2
 80073f8:	f001 0103 	and.w	r1, r1, #3
 80073fc:	3001      	adds	r0, #1
 80073fe:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8007402:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8007406:	b1a9      	cbz	r1, 8007434 <forward_lite_dense_if32of32wf32+0x234>
 8007408:	edd3 6a00 	vldr	s13, [r3]
 800740c:	3901      	subs	r1, #1
 800740e:	edd2 7a00 	vldr	s15, [r2]
 8007412:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007416:	d00d      	beq.n	8007434 <forward_lite_dense_if32of32wf32+0x234>
 8007418:	edd3 6a01 	vldr	s13, [r3, #4]
 800741c:	2901      	cmp	r1, #1
 800741e:	edd2 7a01 	vldr	s15, [r2, #4]
 8007422:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007426:	d005      	beq.n	8007434 <forward_lite_dense_if32of32wf32+0x234>
 8007428:	edd2 6a02 	vldr	s13, [r2, #8]
 800742c:	edd3 7a02 	vldr	s15, [r3, #8]
 8007430:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007434:	eca6 7a01 	vstmia	r6!, {s14}
 8007438:	45b6      	cmp	lr, r6
 800743a:	444d      	add	r5, r9
 800743c:	f63f af0a 	bhi.w	8007254 <forward_lite_dense_if32of32wf32+0x54>
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	b9b3      	cbnz	r3, 8007474 <forward_lite_dense_if32of32wf32+0x274>
 8007446:	9b00      	ldr	r3, [sp, #0]
 8007448:	0096      	lsls	r6, r2, #2
 800744a:	9901      	ldr	r1, [sp, #4]
 800744c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8007450:	693c      	ldr	r4, [r7, #16]
 8007452:	4299      	cmp	r1, r3
 8007454:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8007458:	9300      	str	r3, [sp, #0]
 800745a:	f63f aee7 	bhi.w	800722c <forward_lite_dense_if32of32wf32+0x2c>
 800745e:	b003      	add	sp, #12
 8007460:	ecbd 8b0c 	vpop	{d8-d13}
 8007464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007468:	4621      	mov	r1, r4
 800746a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80074b8 <forward_lite_dense_if32of32wf32+0x2b8>
 800746e:	462a      	mov	r2, r5
 8007470:	4643      	mov	r3, r8
 8007472:	e766      	b.n	8007342 <forward_lite_dense_if32of32wf32+0x142>
 8007474:	2a00      	cmp	r2, #0
 8007476:	d0e6      	beq.n	8007446 <forward_lite_dense_if32of32wf32+0x246>
 8007478:	9a00      	ldr	r2, [sp, #0]
 800747a:	ed93 7a00 	vldr	s14, [r3]
 800747e:	edd2 7a00 	vldr	s15, [r2]
 8007482:	4613      	mov	r3, r2
 8007484:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007488:	edc2 7a00 	vstr	s15, [r2]
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	2a01      	cmp	r2, #1
 8007490:	d9d9      	bls.n	8007446 <forward_lite_dense_if32of32wf32+0x246>
 8007492:	1d19      	adds	r1, r3, #4
 8007494:	2301      	movs	r3, #1
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	ed91 7a00 	vldr	s14, [r1]
 800749c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80074a0:	3301      	adds	r3, #1
 80074a2:	edd2 7a00 	vldr	s15, [r2]
 80074a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80074aa:	ece1 7a01 	vstmia	r1!, {s15}
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d8f0      	bhi.n	8007496 <forward_lite_dense_if32of32wf32+0x296>
 80074b4:	e7c7      	b.n	8007446 <forward_lite_dense_if32of32wf32+0x246>
 80074b6:	bf00      	nop
 80074b8:	00000000 	.word	0x00000000

080074bc <st_int8_copy>:
 80074bc:	4288      	cmp	r0, r1
 80074be:	d010      	beq.n	80074e2 <st_int8_copy+0x26>
 80074c0:	b17a      	cbz	r2, 80074e2 <st_int8_copy+0x26>
 80074c2:	4288      	cmp	r0, r1
 80074c4:	eb00 0302 	add.w	r3, r0, r2
 80074c8:	d20c      	bcs.n	80074e4 <st_int8_copy+0x28>
 80074ca:	428b      	cmp	r3, r1
 80074cc:	d90a      	bls.n	80074e4 <st_int8_copy+0x28>
 80074ce:	4283      	cmp	r3, r0
 80074d0:	440a      	add	r2, r1
 80074d2:	d906      	bls.n	80074e2 <st_int8_copy+0x26>
 80074d4:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 80074d8:	4283      	cmp	r3, r0
 80074da:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80074de:	d1f9      	bne.n	80074d4 <st_int8_copy+0x18>
 80074e0:	4770      	bx	lr
 80074e2:	4770      	bx	lr
 80074e4:	078b      	lsls	r3, r1, #30
 80074e6:	d102      	bne.n	80074ee <st_int8_copy+0x32>
 80074e8:	e008      	b.n	80074fc <st_int8_copy+0x40>
 80074ea:	2a00      	cmp	r2, #0
 80074ec:	d04c      	beq.n	8007588 <st_int8_copy+0xcc>
 80074ee:	f910 3b01 	ldrsb.w	r3, [r0], #1
 80074f2:	3a01      	subs	r2, #1
 80074f4:	f801 3b01 	strb.w	r3, [r1], #1
 80074f8:	078b      	lsls	r3, r1, #30
 80074fa:	d1f6      	bne.n	80074ea <st_int8_copy+0x2e>
 80074fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007500:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8007504:	d05d      	beq.n	80075c2 <st_int8_copy+0x106>
 8007506:	ea41 0300 	orr.w	r3, r1, r0
 800750a:	075b      	lsls	r3, r3, #29
 800750c:	d13d      	bne.n	800758a <st_int8_copy+0xce>
 800750e:	f1be 0f01 	cmp.w	lr, #1
 8007512:	d03a      	beq.n	800758a <st_int8_copy+0xce>
 8007514:	f100 0310 	add.w	r3, r0, #16
 8007518:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800751c:	f101 0c10 	add.w	ip, r1, #16
 8007520:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8007524:	3310      	adds	r3, #16
 8007526:	f10c 0c10 	add.w	ip, ip, #16
 800752a:	ed13 6b08 	vldr	d6, [r3, #-32]	@ 0xffffffe0
 800752e:	ed13 7b06 	vldr	d7, [r3, #-24]	@ 0xffffffe8
 8007532:	4573      	cmp	r3, lr
 8007534:	ed0c 6b08 	vstr	d6, [ip, #-32]	@ 0xffffffe0
 8007538:	ed0c 7b06 	vstr	d7, [ip, #-24]	@ 0xffffffe8
 800753c:	d1f2      	bne.n	8007524 <st_int8_copy+0x68>
 800753e:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8007542:	4421      	add	r1, r4
 8007544:	4420      	add	r0, r4
 8007546:	f002 0203 	and.w	r2, r2, #3
 800754a:	b16b      	cbz	r3, 8007568 <st_int8_copy+0xac>
 800754c:	6804      	ldr	r4, [r0, #0]
 800754e:	600c      	str	r4, [r1, #0]
 8007550:	1e5c      	subs	r4, r3, #1
 8007552:	d005      	beq.n	8007560 <st_int8_copy+0xa4>
 8007554:	6845      	ldr	r5, [r0, #4]
 8007556:	2c01      	cmp	r4, #1
 8007558:	604d      	str	r5, [r1, #4]
 800755a:	d001      	beq.n	8007560 <st_int8_copy+0xa4>
 800755c:	6884      	ldr	r4, [r0, #8]
 800755e:	608c      	str	r4, [r1, #8]
 8007560:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007564:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8007568:	b162      	cbz	r2, 8007584 <st_int8_copy+0xc8>
 800756a:	f990 3000 	ldrsb.w	r3, [r0]
 800756e:	3a01      	subs	r2, #1
 8007570:	700b      	strb	r3, [r1, #0]
 8007572:	d007      	beq.n	8007584 <st_int8_copy+0xc8>
 8007574:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8007578:	2a01      	cmp	r2, #1
 800757a:	704b      	strb	r3, [r1, #1]
 800757c:	d002      	beq.n	8007584 <st_int8_copy+0xc8>
 800757e:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8007582:	708b      	strb	r3, [r1, #2]
 8007584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007588:	4770      	bx	lr
 800758a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800758e:	460b      	mov	r3, r1
 8007590:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8007594:	4684      	mov	ip, r0
 8007596:	f8dc 8000 	ldr.w	r8, [ip]
 800759a:	3310      	adds	r3, #16
 800759c:	f8dc 7004 	ldr.w	r7, [ip, #4]
 80075a0:	f10c 0c10 	add.w	ip, ip, #16
 80075a4:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 80075a8:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 80075ac:	f843 8c10 	str.w	r8, [r3, #-16]
 80075b0:	f843 7c0c 	str.w	r7, [r3, #-12]
 80075b4:	f843 6c08 	str.w	r6, [r3, #-8]
 80075b8:	f843 5c04 	str.w	r5, [r3, #-4]
 80075bc:	459e      	cmp	lr, r3
 80075be:	d1ea      	bne.n	8007596 <st_int8_copy+0xda>
 80075c0:	e7bd      	b.n	800753e <st_int8_copy+0x82>
 80075c2:	0893      	lsrs	r3, r2, #2
 80075c4:	f002 0203 	and.w	r2, r2, #3
 80075c8:	e7bf      	b.n	800754a <st_int8_copy+0x8e>
 80075ca:	bf00      	nop

080075cc <ai_array_to_buffer_fmt>:
 80075cc:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d053      	beq.n	800767c <ai_array_to_buffer_fmt+0xb0>
 80075d4:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 80075d8:	4a2b      	ldr	r2, [pc, #172]	@ (8007688 <ai_array_to_buffer_fmt+0xbc>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d010      	beq.n	8007600 <ai_array_to_buffer_fmt+0x34>
 80075de:	dc21      	bgt.n	8007624 <ai_array_to_buffer_fmt+0x58>
 80075e0:	4a2a      	ldr	r2, [pc, #168]	@ (800768c <ai_array_to_buffer_fmt+0xc0>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d00c      	beq.n	8007600 <ai_array_to_buffer_fmt+0x34>
 80075e6:	dd0f      	ble.n	8007608 <ai_array_to_buffer_fmt+0x3c>
 80075e8:	4a29      	ldr	r2, [pc, #164]	@ (8007690 <ai_array_to_buffer_fmt+0xc4>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d008      	beq.n	8007600 <ai_array_to_buffer_fmt+0x34>
 80075ee:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d004      	beq.n	8007600 <ai_array_to_buffer_fmt+0x34>
 80075f6:	4a27      	ldr	r2, [pc, #156]	@ (8007694 <ai_array_to_buffer_fmt+0xc8>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	bf0c      	ite	eq
 80075fc:	4613      	moveq	r3, r2
 80075fe:	2340      	movne	r3, #64	@ 0x40
 8007600:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8007604:	4318      	orrs	r0, r3
 8007606:	4770      	bx	lr
 8007608:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800760c:	4293      	cmp	r3, r2
 800760e:	d0f7      	beq.n	8007600 <ai_array_to_buffer_fmt+0x34>
 8007610:	dd2a      	ble.n	8007668 <ai_array_to_buffer_fmt+0x9c>
 8007612:	4a21      	ldr	r2, [pc, #132]	@ (8007698 <ai_array_to_buffer_fmt+0xcc>)
 8007614:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8007618:	4293      	cmp	r3, r2
 800761a:	bf0c      	ite	eq
 800761c:	4613      	moveq	r3, r2
 800761e:	2340      	movne	r3, #64	@ 0x40
 8007620:	4318      	orrs	r0, r3
 8007622:	4770      	bx	lr
 8007624:	4a1d      	ldr	r2, [pc, #116]	@ (800769c <ai_array_to_buffer_fmt+0xd0>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d0ea      	beq.n	8007600 <ai_array_to_buffer_fmt+0x34>
 800762a:	dd0f      	ble.n	800764c <ai_array_to_buffer_fmt+0x80>
 800762c:	4a1c      	ldr	r2, [pc, #112]	@ (80076a0 <ai_array_to_buffer_fmt+0xd4>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d0e6      	beq.n	8007600 <ai_array_to_buffer_fmt+0x34>
 8007632:	f502 027e 	add.w	r2, r2, #16646144	@ 0xfe0000
 8007636:	4293      	cmp	r3, r2
 8007638:	d0e2      	beq.n	8007600 <ai_array_to_buffer_fmt+0x34>
 800763a:	4a1a      	ldr	r2, [pc, #104]	@ (80076a4 <ai_array_to_buffer_fmt+0xd8>)
 800763c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8007640:	4293      	cmp	r3, r2
 8007642:	bf0c      	ite	eq
 8007644:	4613      	moveq	r3, r2
 8007646:	2340      	movne	r3, #64	@ 0x40
 8007648:	4318      	orrs	r0, r3
 800764a:	4770      	bx	lr
 800764c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8007650:	4293      	cmp	r3, r2
 8007652:	d0d5      	beq.n	8007600 <ai_array_to_buffer_fmt+0x34>
 8007654:	3207      	adds	r2, #7
 8007656:	4293      	cmp	r3, r2
 8007658:	d0d2      	beq.n	8007600 <ai_array_to_buffer_fmt+0x34>
 800765a:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 800765e:	4293      	cmp	r3, r2
 8007660:	bf0c      	ite	eq
 8007662:	4613      	moveq	r3, r2
 8007664:	2340      	movne	r3, #64	@ 0x40
 8007666:	e7cb      	b.n	8007600 <ai_array_to_buffer_fmt+0x34>
 8007668:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800766c:	4293      	cmp	r3, r2
 800766e:	d0c7      	beq.n	8007600 <ai_array_to_buffer_fmt+0x34>
 8007670:	3280      	adds	r2, #128	@ 0x80
 8007672:	4293      	cmp	r3, r2
 8007674:	bf0c      	ite	eq
 8007676:	4613      	moveq	r3, r2
 8007678:	2340      	movne	r3, #64	@ 0x40
 800767a:	e7c1      	b.n	8007600 <ai_array_to_buffer_fmt+0x34>
 800767c:	4b0a      	ldr	r3, [pc, #40]	@ (80076a8 <ai_array_to_buffer_fmt+0xdc>)
 800767e:	4003      	ands	r3, r0
 8007680:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007684:	e7bc      	b.n	8007600 <ai_array_to_buffer_fmt+0x34>
 8007686:	bf00      	nop
 8007688:	00840040 	.word	0x00840040
 800768c:	00040840 	.word	0x00040840
 8007690:	00041040 	.word	0x00041040
 8007694:	0004084f 	.word	0x0004084f
 8007698:	00040447 	.word	0x00040447
 800769c:	00840840 	.word	0x00840840
 80076a0:	00841040 	.word	0x00841040
 80076a4:	0084084f 	.word	0x0084084f
 80076a8:	00803fff 	.word	0x00803fff

080076ac <ai_array_get_byte_size>:
 80076ac:	b319      	cbz	r1, 80076f6 <ai_array_get_byte_size+0x4a>
 80076ae:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80076b2:	f3c0 4243 	ubfx	r2, r0, #17, #4
 80076b6:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 80076ba:	11c0      	asrs	r0, r0, #7
 80076bc:	fb01 f303 	mul.w	r3, r1, r3
 80076c0:	2a04      	cmp	r2, #4
 80076c2:	f103 0307 	add.w	r3, r3, #7
 80076c6:	f023 0307 	bic.w	r3, r3, #7
 80076ca:	fa23 f10c 	lsr.w	r1, r3, ip
 80076ce:	d00b      	beq.n	80076e8 <ai_array_get_byte_size+0x3c>
 80076d0:	2a08      	cmp	r2, #8
 80076d2:	d002      	beq.n	80076da <ai_array_get_byte_size+0x2e>
 80076d4:	3107      	adds	r1, #7
 80076d6:	08c8      	lsrs	r0, r1, #3
 80076d8:	4770      	bx	lr
 80076da:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80076de:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80076e2:	3107      	adds	r1, #7
 80076e4:	08c8      	lsrs	r0, r1, #3
 80076e6:	4770      	bx	lr
 80076e8:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80076ec:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 80076f0:	3107      	adds	r1, #7
 80076f2:	08c8      	lsrs	r0, r1, #3
 80076f4:	4770      	bx	lr
 80076f6:	4608      	mov	r0, r1
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop

080076fc <ai_array_get_data_byte_size>:
 80076fc:	b169      	cbz	r1, 800771a <ai_array_get_data_byte_size+0x1e>
 80076fe:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8007702:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8007706:	fb03 f101 	mul.w	r1, r3, r1
 800770a:	1dcb      	adds	r3, r1, #7
 800770c:	f023 0307 	bic.w	r3, r3, #7
 8007710:	fa23 f000 	lsr.w	r0, r3, r0
 8007714:	3007      	adds	r0, #7
 8007716:	08c0      	lsrs	r0, r0, #3
 8007718:	4770      	bx	lr
 800771a:	4608      	mov	r0, r1
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop

08007720 <ai_version_get>:
 8007720:	0212      	lsls	r2, r2, #8
 8007722:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007726:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800772a:	4770      	bx	lr

0800772c <get_tensor_byte_size>:
 800772c:	b430      	push	{r4, r5}
 800772e:	6985      	ldr	r5, [r0, #24]
 8007730:	68c4      	ldr	r4, [r0, #12]
 8007732:	6941      	ldr	r1, [r0, #20]
 8007734:	4b06      	ldr	r3, [pc, #24]	@ (8007750 <get_tensor_byte_size+0x24>)
 8007736:	6828      	ldr	r0, [r5, #0]
 8007738:	4a06      	ldr	r2, [pc, #24]	@ (8007754 <get_tensor_byte_size+0x28>)
 800773a:	4003      	ands	r3, r0
 800773c:	68c9      	ldr	r1, [r1, #12]
 800773e:	68e0      	ldr	r0, [r4, #12]
 8007740:	4293      	cmp	r3, r2
 8007742:	fb01 f000 	mul.w	r0, r1, r0
 8007746:	d101      	bne.n	800774c <get_tensor_byte_size+0x20>
 8007748:	3007      	adds	r0, #7
 800774a:	08c0      	lsrs	r0, r0, #3
 800774c:	bc30      	pop	{r4, r5}
 800774e:	4770      	bx	lr
 8007750:	017fffff 	.word	0x017fffff
 8007754:	000400c0 	.word	0x000400c0

08007758 <malloc>:
 8007758:	4b02      	ldr	r3, [pc, #8]	@ (8007764 <malloc+0xc>)
 800775a:	4601      	mov	r1, r0
 800775c:	6818      	ldr	r0, [r3, #0]
 800775e:	f000 b825 	b.w	80077ac <_malloc_r>
 8007762:	bf00      	nop
 8007764:	240006a8 	.word	0x240006a8

08007768 <sbrk_aligned>:
 8007768:	b570      	push	{r4, r5, r6, lr}
 800776a:	4e0f      	ldr	r6, [pc, #60]	@ (80077a8 <sbrk_aligned+0x40>)
 800776c:	460c      	mov	r4, r1
 800776e:	6831      	ldr	r1, [r6, #0]
 8007770:	4605      	mov	r5, r0
 8007772:	b911      	cbnz	r1, 800777a <sbrk_aligned+0x12>
 8007774:	f001 f834 	bl	80087e0 <_sbrk_r>
 8007778:	6030      	str	r0, [r6, #0]
 800777a:	4621      	mov	r1, r4
 800777c:	4628      	mov	r0, r5
 800777e:	f001 f82f 	bl	80087e0 <_sbrk_r>
 8007782:	1c43      	adds	r3, r0, #1
 8007784:	d103      	bne.n	800778e <sbrk_aligned+0x26>
 8007786:	f04f 34ff 	mov.w	r4, #4294967295
 800778a:	4620      	mov	r0, r4
 800778c:	bd70      	pop	{r4, r5, r6, pc}
 800778e:	1cc4      	adds	r4, r0, #3
 8007790:	f024 0403 	bic.w	r4, r4, #3
 8007794:	42a0      	cmp	r0, r4
 8007796:	d0f8      	beq.n	800778a <sbrk_aligned+0x22>
 8007798:	1a21      	subs	r1, r4, r0
 800779a:	4628      	mov	r0, r5
 800779c:	f001 f820 	bl	80087e0 <_sbrk_r>
 80077a0:	3001      	adds	r0, #1
 80077a2:	d1f2      	bne.n	800778a <sbrk_aligned+0x22>
 80077a4:	e7ef      	b.n	8007786 <sbrk_aligned+0x1e>
 80077a6:	bf00      	nop
 80077a8:	24000ab8 	.word	0x24000ab8

080077ac <_malloc_r>:
 80077ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077b0:	1ccd      	adds	r5, r1, #3
 80077b2:	f025 0503 	bic.w	r5, r5, #3
 80077b6:	3508      	adds	r5, #8
 80077b8:	2d0c      	cmp	r5, #12
 80077ba:	bf38      	it	cc
 80077bc:	250c      	movcc	r5, #12
 80077be:	2d00      	cmp	r5, #0
 80077c0:	4606      	mov	r6, r0
 80077c2:	db01      	blt.n	80077c8 <_malloc_r+0x1c>
 80077c4:	42a9      	cmp	r1, r5
 80077c6:	d904      	bls.n	80077d2 <_malloc_r+0x26>
 80077c8:	230c      	movs	r3, #12
 80077ca:	6033      	str	r3, [r6, #0]
 80077cc:	2000      	movs	r0, #0
 80077ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80078a8 <_malloc_r+0xfc>
 80077d6:	f000 f869 	bl	80078ac <__malloc_lock>
 80077da:	f8d8 3000 	ldr.w	r3, [r8]
 80077de:	461c      	mov	r4, r3
 80077e0:	bb44      	cbnz	r4, 8007834 <_malloc_r+0x88>
 80077e2:	4629      	mov	r1, r5
 80077e4:	4630      	mov	r0, r6
 80077e6:	f7ff ffbf 	bl	8007768 <sbrk_aligned>
 80077ea:	1c43      	adds	r3, r0, #1
 80077ec:	4604      	mov	r4, r0
 80077ee:	d158      	bne.n	80078a2 <_malloc_r+0xf6>
 80077f0:	f8d8 4000 	ldr.w	r4, [r8]
 80077f4:	4627      	mov	r7, r4
 80077f6:	2f00      	cmp	r7, #0
 80077f8:	d143      	bne.n	8007882 <_malloc_r+0xd6>
 80077fa:	2c00      	cmp	r4, #0
 80077fc:	d04b      	beq.n	8007896 <_malloc_r+0xea>
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	4639      	mov	r1, r7
 8007802:	4630      	mov	r0, r6
 8007804:	eb04 0903 	add.w	r9, r4, r3
 8007808:	f000 ffea 	bl	80087e0 <_sbrk_r>
 800780c:	4581      	cmp	r9, r0
 800780e:	d142      	bne.n	8007896 <_malloc_r+0xea>
 8007810:	6821      	ldr	r1, [r4, #0]
 8007812:	1a6d      	subs	r5, r5, r1
 8007814:	4629      	mov	r1, r5
 8007816:	4630      	mov	r0, r6
 8007818:	f7ff ffa6 	bl	8007768 <sbrk_aligned>
 800781c:	3001      	adds	r0, #1
 800781e:	d03a      	beq.n	8007896 <_malloc_r+0xea>
 8007820:	6823      	ldr	r3, [r4, #0]
 8007822:	442b      	add	r3, r5
 8007824:	6023      	str	r3, [r4, #0]
 8007826:	f8d8 3000 	ldr.w	r3, [r8]
 800782a:	685a      	ldr	r2, [r3, #4]
 800782c:	bb62      	cbnz	r2, 8007888 <_malloc_r+0xdc>
 800782e:	f8c8 7000 	str.w	r7, [r8]
 8007832:	e00f      	b.n	8007854 <_malloc_r+0xa8>
 8007834:	6822      	ldr	r2, [r4, #0]
 8007836:	1b52      	subs	r2, r2, r5
 8007838:	d420      	bmi.n	800787c <_malloc_r+0xd0>
 800783a:	2a0b      	cmp	r2, #11
 800783c:	d917      	bls.n	800786e <_malloc_r+0xc2>
 800783e:	1961      	adds	r1, r4, r5
 8007840:	42a3      	cmp	r3, r4
 8007842:	6025      	str	r5, [r4, #0]
 8007844:	bf18      	it	ne
 8007846:	6059      	strne	r1, [r3, #4]
 8007848:	6863      	ldr	r3, [r4, #4]
 800784a:	bf08      	it	eq
 800784c:	f8c8 1000 	streq.w	r1, [r8]
 8007850:	5162      	str	r2, [r4, r5]
 8007852:	604b      	str	r3, [r1, #4]
 8007854:	4630      	mov	r0, r6
 8007856:	f000 f82f 	bl	80078b8 <__malloc_unlock>
 800785a:	f104 000b 	add.w	r0, r4, #11
 800785e:	1d23      	adds	r3, r4, #4
 8007860:	f020 0007 	bic.w	r0, r0, #7
 8007864:	1ac2      	subs	r2, r0, r3
 8007866:	bf1c      	itt	ne
 8007868:	1a1b      	subne	r3, r3, r0
 800786a:	50a3      	strne	r3, [r4, r2]
 800786c:	e7af      	b.n	80077ce <_malloc_r+0x22>
 800786e:	6862      	ldr	r2, [r4, #4]
 8007870:	42a3      	cmp	r3, r4
 8007872:	bf0c      	ite	eq
 8007874:	f8c8 2000 	streq.w	r2, [r8]
 8007878:	605a      	strne	r2, [r3, #4]
 800787a:	e7eb      	b.n	8007854 <_malloc_r+0xa8>
 800787c:	4623      	mov	r3, r4
 800787e:	6864      	ldr	r4, [r4, #4]
 8007880:	e7ae      	b.n	80077e0 <_malloc_r+0x34>
 8007882:	463c      	mov	r4, r7
 8007884:	687f      	ldr	r7, [r7, #4]
 8007886:	e7b6      	b.n	80077f6 <_malloc_r+0x4a>
 8007888:	461a      	mov	r2, r3
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	42a3      	cmp	r3, r4
 800788e:	d1fb      	bne.n	8007888 <_malloc_r+0xdc>
 8007890:	2300      	movs	r3, #0
 8007892:	6053      	str	r3, [r2, #4]
 8007894:	e7de      	b.n	8007854 <_malloc_r+0xa8>
 8007896:	230c      	movs	r3, #12
 8007898:	6033      	str	r3, [r6, #0]
 800789a:	4630      	mov	r0, r6
 800789c:	f000 f80c 	bl	80078b8 <__malloc_unlock>
 80078a0:	e794      	b.n	80077cc <_malloc_r+0x20>
 80078a2:	6005      	str	r5, [r0, #0]
 80078a4:	e7d6      	b.n	8007854 <_malloc_r+0xa8>
 80078a6:	bf00      	nop
 80078a8:	24000abc 	.word	0x24000abc

080078ac <__malloc_lock>:
 80078ac:	4801      	ldr	r0, [pc, #4]	@ (80078b4 <__malloc_lock+0x8>)
 80078ae:	f000 bfe4 	b.w	800887a <__retarget_lock_acquire_recursive>
 80078b2:	bf00      	nop
 80078b4:	24000c00 	.word	0x24000c00

080078b8 <__malloc_unlock>:
 80078b8:	4801      	ldr	r0, [pc, #4]	@ (80078c0 <__malloc_unlock+0x8>)
 80078ba:	f000 bfdf 	b.w	800887c <__retarget_lock_release_recursive>
 80078be:	bf00      	nop
 80078c0:	24000c00 	.word	0x24000c00

080078c4 <srand>:
 80078c4:	b538      	push	{r3, r4, r5, lr}
 80078c6:	4b10      	ldr	r3, [pc, #64]	@ (8007908 <srand+0x44>)
 80078c8:	681d      	ldr	r5, [r3, #0]
 80078ca:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80078cc:	4604      	mov	r4, r0
 80078ce:	b9b3      	cbnz	r3, 80078fe <srand+0x3a>
 80078d0:	2018      	movs	r0, #24
 80078d2:	f7ff ff41 	bl	8007758 <malloc>
 80078d6:	4602      	mov	r2, r0
 80078d8:	6328      	str	r0, [r5, #48]	@ 0x30
 80078da:	b920      	cbnz	r0, 80078e6 <srand+0x22>
 80078dc:	4b0b      	ldr	r3, [pc, #44]	@ (800790c <srand+0x48>)
 80078de:	480c      	ldr	r0, [pc, #48]	@ (8007910 <srand+0x4c>)
 80078e0:	2146      	movs	r1, #70	@ 0x46
 80078e2:	f000 ffdb 	bl	800889c <__assert_func>
 80078e6:	490b      	ldr	r1, [pc, #44]	@ (8007914 <srand+0x50>)
 80078e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007918 <srand+0x54>)
 80078ea:	e9c0 1300 	strd	r1, r3, [r0]
 80078ee:	4b0b      	ldr	r3, [pc, #44]	@ (800791c <srand+0x58>)
 80078f0:	6083      	str	r3, [r0, #8]
 80078f2:	230b      	movs	r3, #11
 80078f4:	8183      	strh	r3, [r0, #12]
 80078f6:	2100      	movs	r1, #0
 80078f8:	2001      	movs	r0, #1
 80078fa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80078fe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8007900:	2200      	movs	r2, #0
 8007902:	611c      	str	r4, [r3, #16]
 8007904:	615a      	str	r2, [r3, #20]
 8007906:	bd38      	pop	{r3, r4, r5, pc}
 8007908:	240006a8 	.word	0x240006a8
 800790c:	0800ace8 	.word	0x0800ace8
 8007910:	0800acff 	.word	0x0800acff
 8007914:	abcd330e 	.word	0xabcd330e
 8007918:	e66d1234 	.word	0xe66d1234
 800791c:	0005deec 	.word	0x0005deec

08007920 <rand>:
 8007920:	4b16      	ldr	r3, [pc, #88]	@ (800797c <rand+0x5c>)
 8007922:	b510      	push	{r4, lr}
 8007924:	681c      	ldr	r4, [r3, #0]
 8007926:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007928:	b9b3      	cbnz	r3, 8007958 <rand+0x38>
 800792a:	2018      	movs	r0, #24
 800792c:	f7ff ff14 	bl	8007758 <malloc>
 8007930:	4602      	mov	r2, r0
 8007932:	6320      	str	r0, [r4, #48]	@ 0x30
 8007934:	b920      	cbnz	r0, 8007940 <rand+0x20>
 8007936:	4b12      	ldr	r3, [pc, #72]	@ (8007980 <rand+0x60>)
 8007938:	4812      	ldr	r0, [pc, #72]	@ (8007984 <rand+0x64>)
 800793a:	2152      	movs	r1, #82	@ 0x52
 800793c:	f000 ffae 	bl	800889c <__assert_func>
 8007940:	4911      	ldr	r1, [pc, #68]	@ (8007988 <rand+0x68>)
 8007942:	4b12      	ldr	r3, [pc, #72]	@ (800798c <rand+0x6c>)
 8007944:	e9c0 1300 	strd	r1, r3, [r0]
 8007948:	4b11      	ldr	r3, [pc, #68]	@ (8007990 <rand+0x70>)
 800794a:	6083      	str	r3, [r0, #8]
 800794c:	230b      	movs	r3, #11
 800794e:	8183      	strh	r3, [r0, #12]
 8007950:	2100      	movs	r1, #0
 8007952:	2001      	movs	r0, #1
 8007954:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007958:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800795a:	480e      	ldr	r0, [pc, #56]	@ (8007994 <rand+0x74>)
 800795c:	690b      	ldr	r3, [r1, #16]
 800795e:	694c      	ldr	r4, [r1, #20]
 8007960:	4a0d      	ldr	r2, [pc, #52]	@ (8007998 <rand+0x78>)
 8007962:	4358      	muls	r0, r3
 8007964:	fb02 0004 	mla	r0, r2, r4, r0
 8007968:	fba3 3202 	umull	r3, r2, r3, r2
 800796c:	3301      	adds	r3, #1
 800796e:	eb40 0002 	adc.w	r0, r0, r2
 8007972:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8007976:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800797a:	bd10      	pop	{r4, pc}
 800797c:	240006a8 	.word	0x240006a8
 8007980:	0800ace8 	.word	0x0800ace8
 8007984:	0800acff 	.word	0x0800acff
 8007988:	abcd330e 	.word	0xabcd330e
 800798c:	e66d1234 	.word	0xe66d1234
 8007990:	0005deec 	.word	0x0005deec
 8007994:	5851f42d 	.word	0x5851f42d
 8007998:	4c957f2d 	.word	0x4c957f2d

0800799c <_realloc_r>:
 800799c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079a0:	4680      	mov	r8, r0
 80079a2:	4615      	mov	r5, r2
 80079a4:	460c      	mov	r4, r1
 80079a6:	b921      	cbnz	r1, 80079b2 <_realloc_r+0x16>
 80079a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079ac:	4611      	mov	r1, r2
 80079ae:	f7ff befd 	b.w	80077ac <_malloc_r>
 80079b2:	b92a      	cbnz	r2, 80079c0 <_realloc_r+0x24>
 80079b4:	f001 fd6e 	bl	8009494 <_free_r>
 80079b8:	2400      	movs	r4, #0
 80079ba:	4620      	mov	r0, r4
 80079bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079c0:	f002 f934 	bl	8009c2c <_malloc_usable_size_r>
 80079c4:	4285      	cmp	r5, r0
 80079c6:	4606      	mov	r6, r0
 80079c8:	d802      	bhi.n	80079d0 <_realloc_r+0x34>
 80079ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80079ce:	d8f4      	bhi.n	80079ba <_realloc_r+0x1e>
 80079d0:	4629      	mov	r1, r5
 80079d2:	4640      	mov	r0, r8
 80079d4:	f7ff feea 	bl	80077ac <_malloc_r>
 80079d8:	4607      	mov	r7, r0
 80079da:	2800      	cmp	r0, #0
 80079dc:	d0ec      	beq.n	80079b8 <_realloc_r+0x1c>
 80079de:	42b5      	cmp	r5, r6
 80079e0:	462a      	mov	r2, r5
 80079e2:	4621      	mov	r1, r4
 80079e4:	bf28      	it	cs
 80079e6:	4632      	movcs	r2, r6
 80079e8:	f000 ff49 	bl	800887e <memcpy>
 80079ec:	4621      	mov	r1, r4
 80079ee:	4640      	mov	r0, r8
 80079f0:	f001 fd50 	bl	8009494 <_free_r>
 80079f4:	463c      	mov	r4, r7
 80079f6:	e7e0      	b.n	80079ba <_realloc_r+0x1e>

080079f8 <__cvt>:
 80079f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079fa:	ed2d 8b02 	vpush	{d8}
 80079fe:	eeb0 8b40 	vmov.f64	d8, d0
 8007a02:	b085      	sub	sp, #20
 8007a04:	4617      	mov	r7, r2
 8007a06:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8007a08:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a0a:	ee18 2a90 	vmov	r2, s17
 8007a0e:	f025 0520 	bic.w	r5, r5, #32
 8007a12:	2a00      	cmp	r2, #0
 8007a14:	bfb6      	itet	lt
 8007a16:	222d      	movlt	r2, #45	@ 0x2d
 8007a18:	2200      	movge	r2, #0
 8007a1a:	eeb1 8b40 	vneglt.f64	d8, d0
 8007a1e:	2d46      	cmp	r5, #70	@ 0x46
 8007a20:	460c      	mov	r4, r1
 8007a22:	701a      	strb	r2, [r3, #0]
 8007a24:	d004      	beq.n	8007a30 <__cvt+0x38>
 8007a26:	2d45      	cmp	r5, #69	@ 0x45
 8007a28:	d100      	bne.n	8007a2c <__cvt+0x34>
 8007a2a:	3401      	adds	r4, #1
 8007a2c:	2102      	movs	r1, #2
 8007a2e:	e000      	b.n	8007a32 <__cvt+0x3a>
 8007a30:	2103      	movs	r1, #3
 8007a32:	ab03      	add	r3, sp, #12
 8007a34:	9301      	str	r3, [sp, #4]
 8007a36:	ab02      	add	r3, sp, #8
 8007a38:	9300      	str	r3, [sp, #0]
 8007a3a:	4622      	mov	r2, r4
 8007a3c:	4633      	mov	r3, r6
 8007a3e:	eeb0 0b48 	vmov.f64	d0, d8
 8007a42:	f000 ffd1 	bl	80089e8 <_dtoa_r>
 8007a46:	2d47      	cmp	r5, #71	@ 0x47
 8007a48:	d114      	bne.n	8007a74 <__cvt+0x7c>
 8007a4a:	07fb      	lsls	r3, r7, #31
 8007a4c:	d50a      	bpl.n	8007a64 <__cvt+0x6c>
 8007a4e:	1902      	adds	r2, r0, r4
 8007a50:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a58:	bf08      	it	eq
 8007a5a:	9203      	streq	r2, [sp, #12]
 8007a5c:	2130      	movs	r1, #48	@ 0x30
 8007a5e:	9b03      	ldr	r3, [sp, #12]
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d319      	bcc.n	8007a98 <__cvt+0xa0>
 8007a64:	9b03      	ldr	r3, [sp, #12]
 8007a66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a68:	1a1b      	subs	r3, r3, r0
 8007a6a:	6013      	str	r3, [r2, #0]
 8007a6c:	b005      	add	sp, #20
 8007a6e:	ecbd 8b02 	vpop	{d8}
 8007a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a74:	2d46      	cmp	r5, #70	@ 0x46
 8007a76:	eb00 0204 	add.w	r2, r0, r4
 8007a7a:	d1e9      	bne.n	8007a50 <__cvt+0x58>
 8007a7c:	7803      	ldrb	r3, [r0, #0]
 8007a7e:	2b30      	cmp	r3, #48	@ 0x30
 8007a80:	d107      	bne.n	8007a92 <__cvt+0x9a>
 8007a82:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a8a:	bf1c      	itt	ne
 8007a8c:	f1c4 0401 	rsbne	r4, r4, #1
 8007a90:	6034      	strne	r4, [r6, #0]
 8007a92:	6833      	ldr	r3, [r6, #0]
 8007a94:	441a      	add	r2, r3
 8007a96:	e7db      	b.n	8007a50 <__cvt+0x58>
 8007a98:	1c5c      	adds	r4, r3, #1
 8007a9a:	9403      	str	r4, [sp, #12]
 8007a9c:	7019      	strb	r1, [r3, #0]
 8007a9e:	e7de      	b.n	8007a5e <__cvt+0x66>

08007aa0 <__exponent>:
 8007aa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007aa2:	2900      	cmp	r1, #0
 8007aa4:	bfba      	itte	lt
 8007aa6:	4249      	neglt	r1, r1
 8007aa8:	232d      	movlt	r3, #45	@ 0x2d
 8007aaa:	232b      	movge	r3, #43	@ 0x2b
 8007aac:	2909      	cmp	r1, #9
 8007aae:	7002      	strb	r2, [r0, #0]
 8007ab0:	7043      	strb	r3, [r0, #1]
 8007ab2:	dd29      	ble.n	8007b08 <__exponent+0x68>
 8007ab4:	f10d 0307 	add.w	r3, sp, #7
 8007ab8:	461d      	mov	r5, r3
 8007aba:	270a      	movs	r7, #10
 8007abc:	461a      	mov	r2, r3
 8007abe:	fbb1 f6f7 	udiv	r6, r1, r7
 8007ac2:	fb07 1416 	mls	r4, r7, r6, r1
 8007ac6:	3430      	adds	r4, #48	@ 0x30
 8007ac8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007acc:	460c      	mov	r4, r1
 8007ace:	2c63      	cmp	r4, #99	@ 0x63
 8007ad0:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ad4:	4631      	mov	r1, r6
 8007ad6:	dcf1      	bgt.n	8007abc <__exponent+0x1c>
 8007ad8:	3130      	adds	r1, #48	@ 0x30
 8007ada:	1e94      	subs	r4, r2, #2
 8007adc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007ae0:	1c41      	adds	r1, r0, #1
 8007ae2:	4623      	mov	r3, r4
 8007ae4:	42ab      	cmp	r3, r5
 8007ae6:	d30a      	bcc.n	8007afe <__exponent+0x5e>
 8007ae8:	f10d 0309 	add.w	r3, sp, #9
 8007aec:	1a9b      	subs	r3, r3, r2
 8007aee:	42ac      	cmp	r4, r5
 8007af0:	bf88      	it	hi
 8007af2:	2300      	movhi	r3, #0
 8007af4:	3302      	adds	r3, #2
 8007af6:	4403      	add	r3, r0
 8007af8:	1a18      	subs	r0, r3, r0
 8007afa:	b003      	add	sp, #12
 8007afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007afe:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007b02:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007b06:	e7ed      	b.n	8007ae4 <__exponent+0x44>
 8007b08:	2330      	movs	r3, #48	@ 0x30
 8007b0a:	3130      	adds	r1, #48	@ 0x30
 8007b0c:	7083      	strb	r3, [r0, #2]
 8007b0e:	70c1      	strb	r1, [r0, #3]
 8007b10:	1d03      	adds	r3, r0, #4
 8007b12:	e7f1      	b.n	8007af8 <__exponent+0x58>
 8007b14:	0000      	movs	r0, r0
	...

08007b18 <_printf_float>:
 8007b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b1c:	b08d      	sub	sp, #52	@ 0x34
 8007b1e:	460c      	mov	r4, r1
 8007b20:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007b24:	4616      	mov	r6, r2
 8007b26:	461f      	mov	r7, r3
 8007b28:	4605      	mov	r5, r0
 8007b2a:	f000 fe0f 	bl	800874c <_localeconv_r>
 8007b2e:	f8d0 b000 	ldr.w	fp, [r0]
 8007b32:	4658      	mov	r0, fp
 8007b34:	f7f8 fc24 	bl	8000380 <strlen>
 8007b38:	2300      	movs	r3, #0
 8007b3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b3c:	f8d8 3000 	ldr.w	r3, [r8]
 8007b40:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007b44:	6822      	ldr	r2, [r4, #0]
 8007b46:	9005      	str	r0, [sp, #20]
 8007b48:	3307      	adds	r3, #7
 8007b4a:	f023 0307 	bic.w	r3, r3, #7
 8007b4e:	f103 0108 	add.w	r1, r3, #8
 8007b52:	f8c8 1000 	str.w	r1, [r8]
 8007b56:	ed93 0b00 	vldr	d0, [r3]
 8007b5a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8007db8 <_printf_float+0x2a0>
 8007b5e:	eeb0 7bc0 	vabs.f64	d7, d0
 8007b62:	eeb4 7b46 	vcmp.f64	d7, d6
 8007b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b6a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8007b6e:	dd24      	ble.n	8007bba <_printf_float+0xa2>
 8007b70:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b78:	d502      	bpl.n	8007b80 <_printf_float+0x68>
 8007b7a:	232d      	movs	r3, #45	@ 0x2d
 8007b7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b80:	498f      	ldr	r1, [pc, #572]	@ (8007dc0 <_printf_float+0x2a8>)
 8007b82:	4b90      	ldr	r3, [pc, #576]	@ (8007dc4 <_printf_float+0x2ac>)
 8007b84:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8007b88:	bf94      	ite	ls
 8007b8a:	4688      	movls	r8, r1
 8007b8c:	4698      	movhi	r8, r3
 8007b8e:	f022 0204 	bic.w	r2, r2, #4
 8007b92:	2303      	movs	r3, #3
 8007b94:	6123      	str	r3, [r4, #16]
 8007b96:	6022      	str	r2, [r4, #0]
 8007b98:	f04f 0a00 	mov.w	sl, #0
 8007b9c:	9700      	str	r7, [sp, #0]
 8007b9e:	4633      	mov	r3, r6
 8007ba0:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007ba2:	4621      	mov	r1, r4
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	f000 f9d1 	bl	8007f4c <_printf_common>
 8007baa:	3001      	adds	r0, #1
 8007bac:	f040 8089 	bne.w	8007cc2 <_printf_float+0x1aa>
 8007bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb4:	b00d      	add	sp, #52	@ 0x34
 8007bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bba:	eeb4 0b40 	vcmp.f64	d0, d0
 8007bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bc2:	d709      	bvc.n	8007bd8 <_printf_float+0xc0>
 8007bc4:	ee10 3a90 	vmov	r3, s1
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	bfbc      	itt	lt
 8007bcc:	232d      	movlt	r3, #45	@ 0x2d
 8007bce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007bd2:	497d      	ldr	r1, [pc, #500]	@ (8007dc8 <_printf_float+0x2b0>)
 8007bd4:	4b7d      	ldr	r3, [pc, #500]	@ (8007dcc <_printf_float+0x2b4>)
 8007bd6:	e7d5      	b.n	8007b84 <_printf_float+0x6c>
 8007bd8:	6863      	ldr	r3, [r4, #4]
 8007bda:	1c59      	adds	r1, r3, #1
 8007bdc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8007be0:	d139      	bne.n	8007c56 <_printf_float+0x13e>
 8007be2:	2306      	movs	r3, #6
 8007be4:	6063      	str	r3, [r4, #4]
 8007be6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007bea:	2300      	movs	r3, #0
 8007bec:	6022      	str	r2, [r4, #0]
 8007bee:	9303      	str	r3, [sp, #12]
 8007bf0:	ab0a      	add	r3, sp, #40	@ 0x28
 8007bf2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007bf6:	ab09      	add	r3, sp, #36	@ 0x24
 8007bf8:	9300      	str	r3, [sp, #0]
 8007bfa:	6861      	ldr	r1, [r4, #4]
 8007bfc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007c00:	4628      	mov	r0, r5
 8007c02:	f7ff fef9 	bl	80079f8 <__cvt>
 8007c06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007c0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c0c:	4680      	mov	r8, r0
 8007c0e:	d129      	bne.n	8007c64 <_printf_float+0x14c>
 8007c10:	1cc8      	adds	r0, r1, #3
 8007c12:	db02      	blt.n	8007c1a <_printf_float+0x102>
 8007c14:	6863      	ldr	r3, [r4, #4]
 8007c16:	4299      	cmp	r1, r3
 8007c18:	dd41      	ble.n	8007c9e <_printf_float+0x186>
 8007c1a:	f1a9 0902 	sub.w	r9, r9, #2
 8007c1e:	fa5f f989 	uxtb.w	r9, r9
 8007c22:	3901      	subs	r1, #1
 8007c24:	464a      	mov	r2, r9
 8007c26:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007c2a:	9109      	str	r1, [sp, #36]	@ 0x24
 8007c2c:	f7ff ff38 	bl	8007aa0 <__exponent>
 8007c30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c32:	1813      	adds	r3, r2, r0
 8007c34:	2a01      	cmp	r2, #1
 8007c36:	4682      	mov	sl, r0
 8007c38:	6123      	str	r3, [r4, #16]
 8007c3a:	dc02      	bgt.n	8007c42 <_printf_float+0x12a>
 8007c3c:	6822      	ldr	r2, [r4, #0]
 8007c3e:	07d2      	lsls	r2, r2, #31
 8007c40:	d501      	bpl.n	8007c46 <_printf_float+0x12e>
 8007c42:	3301      	adds	r3, #1
 8007c44:	6123      	str	r3, [r4, #16]
 8007c46:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d0a6      	beq.n	8007b9c <_printf_float+0x84>
 8007c4e:	232d      	movs	r3, #45	@ 0x2d
 8007c50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c54:	e7a2      	b.n	8007b9c <_printf_float+0x84>
 8007c56:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007c5a:	d1c4      	bne.n	8007be6 <_printf_float+0xce>
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1c2      	bne.n	8007be6 <_printf_float+0xce>
 8007c60:	2301      	movs	r3, #1
 8007c62:	e7bf      	b.n	8007be4 <_printf_float+0xcc>
 8007c64:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8007c68:	d9db      	bls.n	8007c22 <_printf_float+0x10a>
 8007c6a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8007c6e:	d118      	bne.n	8007ca2 <_printf_float+0x18a>
 8007c70:	2900      	cmp	r1, #0
 8007c72:	6863      	ldr	r3, [r4, #4]
 8007c74:	dd0b      	ble.n	8007c8e <_printf_float+0x176>
 8007c76:	6121      	str	r1, [r4, #16]
 8007c78:	b913      	cbnz	r3, 8007c80 <_printf_float+0x168>
 8007c7a:	6822      	ldr	r2, [r4, #0]
 8007c7c:	07d0      	lsls	r0, r2, #31
 8007c7e:	d502      	bpl.n	8007c86 <_printf_float+0x16e>
 8007c80:	3301      	adds	r3, #1
 8007c82:	440b      	add	r3, r1
 8007c84:	6123      	str	r3, [r4, #16]
 8007c86:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007c88:	f04f 0a00 	mov.w	sl, #0
 8007c8c:	e7db      	b.n	8007c46 <_printf_float+0x12e>
 8007c8e:	b913      	cbnz	r3, 8007c96 <_printf_float+0x17e>
 8007c90:	6822      	ldr	r2, [r4, #0]
 8007c92:	07d2      	lsls	r2, r2, #31
 8007c94:	d501      	bpl.n	8007c9a <_printf_float+0x182>
 8007c96:	3302      	adds	r3, #2
 8007c98:	e7f4      	b.n	8007c84 <_printf_float+0x16c>
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e7f2      	b.n	8007c84 <_printf_float+0x16c>
 8007c9e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8007ca2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ca4:	4299      	cmp	r1, r3
 8007ca6:	db05      	blt.n	8007cb4 <_printf_float+0x19c>
 8007ca8:	6823      	ldr	r3, [r4, #0]
 8007caa:	6121      	str	r1, [r4, #16]
 8007cac:	07d8      	lsls	r0, r3, #31
 8007cae:	d5ea      	bpl.n	8007c86 <_printf_float+0x16e>
 8007cb0:	1c4b      	adds	r3, r1, #1
 8007cb2:	e7e7      	b.n	8007c84 <_printf_float+0x16c>
 8007cb4:	2900      	cmp	r1, #0
 8007cb6:	bfd4      	ite	le
 8007cb8:	f1c1 0202 	rsble	r2, r1, #2
 8007cbc:	2201      	movgt	r2, #1
 8007cbe:	4413      	add	r3, r2
 8007cc0:	e7e0      	b.n	8007c84 <_printf_float+0x16c>
 8007cc2:	6823      	ldr	r3, [r4, #0]
 8007cc4:	055a      	lsls	r2, r3, #21
 8007cc6:	d407      	bmi.n	8007cd8 <_printf_float+0x1c0>
 8007cc8:	6923      	ldr	r3, [r4, #16]
 8007cca:	4642      	mov	r2, r8
 8007ccc:	4631      	mov	r1, r6
 8007cce:	4628      	mov	r0, r5
 8007cd0:	47b8      	blx	r7
 8007cd2:	3001      	adds	r0, #1
 8007cd4:	d12a      	bne.n	8007d2c <_printf_float+0x214>
 8007cd6:	e76b      	b.n	8007bb0 <_printf_float+0x98>
 8007cd8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8007cdc:	f240 80e0 	bls.w	8007ea0 <_printf_float+0x388>
 8007ce0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8007ce4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cec:	d133      	bne.n	8007d56 <_printf_float+0x23e>
 8007cee:	4a38      	ldr	r2, [pc, #224]	@ (8007dd0 <_printf_float+0x2b8>)
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	4631      	mov	r1, r6
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	47b8      	blx	r7
 8007cf8:	3001      	adds	r0, #1
 8007cfa:	f43f af59 	beq.w	8007bb0 <_printf_float+0x98>
 8007cfe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007d02:	4543      	cmp	r3, r8
 8007d04:	db02      	blt.n	8007d0c <_printf_float+0x1f4>
 8007d06:	6823      	ldr	r3, [r4, #0]
 8007d08:	07d8      	lsls	r0, r3, #31
 8007d0a:	d50f      	bpl.n	8007d2c <_printf_float+0x214>
 8007d0c:	9b05      	ldr	r3, [sp, #20]
 8007d0e:	465a      	mov	r2, fp
 8007d10:	4631      	mov	r1, r6
 8007d12:	4628      	mov	r0, r5
 8007d14:	47b8      	blx	r7
 8007d16:	3001      	adds	r0, #1
 8007d18:	f43f af4a 	beq.w	8007bb0 <_printf_float+0x98>
 8007d1c:	f04f 0900 	mov.w	r9, #0
 8007d20:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d24:	f104 0a1a 	add.w	sl, r4, #26
 8007d28:	45c8      	cmp	r8, r9
 8007d2a:	dc09      	bgt.n	8007d40 <_printf_float+0x228>
 8007d2c:	6823      	ldr	r3, [r4, #0]
 8007d2e:	079b      	lsls	r3, r3, #30
 8007d30:	f100 8107 	bmi.w	8007f42 <_printf_float+0x42a>
 8007d34:	68e0      	ldr	r0, [r4, #12]
 8007d36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d38:	4298      	cmp	r0, r3
 8007d3a:	bfb8      	it	lt
 8007d3c:	4618      	movlt	r0, r3
 8007d3e:	e739      	b.n	8007bb4 <_printf_float+0x9c>
 8007d40:	2301      	movs	r3, #1
 8007d42:	4652      	mov	r2, sl
 8007d44:	4631      	mov	r1, r6
 8007d46:	4628      	mov	r0, r5
 8007d48:	47b8      	blx	r7
 8007d4a:	3001      	adds	r0, #1
 8007d4c:	f43f af30 	beq.w	8007bb0 <_printf_float+0x98>
 8007d50:	f109 0901 	add.w	r9, r9, #1
 8007d54:	e7e8      	b.n	8007d28 <_printf_float+0x210>
 8007d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	dc3b      	bgt.n	8007dd4 <_printf_float+0x2bc>
 8007d5c:	4a1c      	ldr	r2, [pc, #112]	@ (8007dd0 <_printf_float+0x2b8>)
 8007d5e:	2301      	movs	r3, #1
 8007d60:	4631      	mov	r1, r6
 8007d62:	4628      	mov	r0, r5
 8007d64:	47b8      	blx	r7
 8007d66:	3001      	adds	r0, #1
 8007d68:	f43f af22 	beq.w	8007bb0 <_printf_float+0x98>
 8007d6c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007d70:	ea59 0303 	orrs.w	r3, r9, r3
 8007d74:	d102      	bne.n	8007d7c <_printf_float+0x264>
 8007d76:	6823      	ldr	r3, [r4, #0]
 8007d78:	07d9      	lsls	r1, r3, #31
 8007d7a:	d5d7      	bpl.n	8007d2c <_printf_float+0x214>
 8007d7c:	9b05      	ldr	r3, [sp, #20]
 8007d7e:	465a      	mov	r2, fp
 8007d80:	4631      	mov	r1, r6
 8007d82:	4628      	mov	r0, r5
 8007d84:	47b8      	blx	r7
 8007d86:	3001      	adds	r0, #1
 8007d88:	f43f af12 	beq.w	8007bb0 <_printf_float+0x98>
 8007d8c:	f04f 0a00 	mov.w	sl, #0
 8007d90:	f104 0b1a 	add.w	fp, r4, #26
 8007d94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d96:	425b      	negs	r3, r3
 8007d98:	4553      	cmp	r3, sl
 8007d9a:	dc01      	bgt.n	8007da0 <_printf_float+0x288>
 8007d9c:	464b      	mov	r3, r9
 8007d9e:	e794      	b.n	8007cca <_printf_float+0x1b2>
 8007da0:	2301      	movs	r3, #1
 8007da2:	465a      	mov	r2, fp
 8007da4:	4631      	mov	r1, r6
 8007da6:	4628      	mov	r0, r5
 8007da8:	47b8      	blx	r7
 8007daa:	3001      	adds	r0, #1
 8007dac:	f43f af00 	beq.w	8007bb0 <_printf_float+0x98>
 8007db0:	f10a 0a01 	add.w	sl, sl, #1
 8007db4:	e7ee      	b.n	8007d94 <_printf_float+0x27c>
 8007db6:	bf00      	nop
 8007db8:	ffffffff 	.word	0xffffffff
 8007dbc:	7fefffff 	.word	0x7fefffff
 8007dc0:	0800ad57 	.word	0x0800ad57
 8007dc4:	0800ad5b 	.word	0x0800ad5b
 8007dc8:	0800ad5f 	.word	0x0800ad5f
 8007dcc:	0800ad63 	.word	0x0800ad63
 8007dd0:	0800ad67 	.word	0x0800ad67
 8007dd4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007dd6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007dda:	4553      	cmp	r3, sl
 8007ddc:	bfa8      	it	ge
 8007dde:	4653      	movge	r3, sl
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	4699      	mov	r9, r3
 8007de4:	dc37      	bgt.n	8007e56 <_printf_float+0x33e>
 8007de6:	2300      	movs	r3, #0
 8007de8:	9307      	str	r3, [sp, #28]
 8007dea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007dee:	f104 021a 	add.w	r2, r4, #26
 8007df2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007df4:	9907      	ldr	r1, [sp, #28]
 8007df6:	9306      	str	r3, [sp, #24]
 8007df8:	eba3 0309 	sub.w	r3, r3, r9
 8007dfc:	428b      	cmp	r3, r1
 8007dfe:	dc31      	bgt.n	8007e64 <_printf_float+0x34c>
 8007e00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e02:	459a      	cmp	sl, r3
 8007e04:	dc3b      	bgt.n	8007e7e <_printf_float+0x366>
 8007e06:	6823      	ldr	r3, [r4, #0]
 8007e08:	07da      	lsls	r2, r3, #31
 8007e0a:	d438      	bmi.n	8007e7e <_printf_float+0x366>
 8007e0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e0e:	ebaa 0903 	sub.w	r9, sl, r3
 8007e12:	9b06      	ldr	r3, [sp, #24]
 8007e14:	ebaa 0303 	sub.w	r3, sl, r3
 8007e18:	4599      	cmp	r9, r3
 8007e1a:	bfa8      	it	ge
 8007e1c:	4699      	movge	r9, r3
 8007e1e:	f1b9 0f00 	cmp.w	r9, #0
 8007e22:	dc34      	bgt.n	8007e8e <_printf_float+0x376>
 8007e24:	f04f 0800 	mov.w	r8, #0
 8007e28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e2c:	f104 0b1a 	add.w	fp, r4, #26
 8007e30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e32:	ebaa 0303 	sub.w	r3, sl, r3
 8007e36:	eba3 0309 	sub.w	r3, r3, r9
 8007e3a:	4543      	cmp	r3, r8
 8007e3c:	f77f af76 	ble.w	8007d2c <_printf_float+0x214>
 8007e40:	2301      	movs	r3, #1
 8007e42:	465a      	mov	r2, fp
 8007e44:	4631      	mov	r1, r6
 8007e46:	4628      	mov	r0, r5
 8007e48:	47b8      	blx	r7
 8007e4a:	3001      	adds	r0, #1
 8007e4c:	f43f aeb0 	beq.w	8007bb0 <_printf_float+0x98>
 8007e50:	f108 0801 	add.w	r8, r8, #1
 8007e54:	e7ec      	b.n	8007e30 <_printf_float+0x318>
 8007e56:	4642      	mov	r2, r8
 8007e58:	4631      	mov	r1, r6
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	47b8      	blx	r7
 8007e5e:	3001      	adds	r0, #1
 8007e60:	d1c1      	bne.n	8007de6 <_printf_float+0x2ce>
 8007e62:	e6a5      	b.n	8007bb0 <_printf_float+0x98>
 8007e64:	2301      	movs	r3, #1
 8007e66:	4631      	mov	r1, r6
 8007e68:	4628      	mov	r0, r5
 8007e6a:	9206      	str	r2, [sp, #24]
 8007e6c:	47b8      	blx	r7
 8007e6e:	3001      	adds	r0, #1
 8007e70:	f43f ae9e 	beq.w	8007bb0 <_printf_float+0x98>
 8007e74:	9b07      	ldr	r3, [sp, #28]
 8007e76:	9a06      	ldr	r2, [sp, #24]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	9307      	str	r3, [sp, #28]
 8007e7c:	e7b9      	b.n	8007df2 <_printf_float+0x2da>
 8007e7e:	9b05      	ldr	r3, [sp, #20]
 8007e80:	465a      	mov	r2, fp
 8007e82:	4631      	mov	r1, r6
 8007e84:	4628      	mov	r0, r5
 8007e86:	47b8      	blx	r7
 8007e88:	3001      	adds	r0, #1
 8007e8a:	d1bf      	bne.n	8007e0c <_printf_float+0x2f4>
 8007e8c:	e690      	b.n	8007bb0 <_printf_float+0x98>
 8007e8e:	9a06      	ldr	r2, [sp, #24]
 8007e90:	464b      	mov	r3, r9
 8007e92:	4442      	add	r2, r8
 8007e94:	4631      	mov	r1, r6
 8007e96:	4628      	mov	r0, r5
 8007e98:	47b8      	blx	r7
 8007e9a:	3001      	adds	r0, #1
 8007e9c:	d1c2      	bne.n	8007e24 <_printf_float+0x30c>
 8007e9e:	e687      	b.n	8007bb0 <_printf_float+0x98>
 8007ea0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8007ea4:	f1b9 0f01 	cmp.w	r9, #1
 8007ea8:	dc01      	bgt.n	8007eae <_printf_float+0x396>
 8007eaa:	07db      	lsls	r3, r3, #31
 8007eac:	d536      	bpl.n	8007f1c <_printf_float+0x404>
 8007eae:	2301      	movs	r3, #1
 8007eb0:	4642      	mov	r2, r8
 8007eb2:	4631      	mov	r1, r6
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	47b8      	blx	r7
 8007eb8:	3001      	adds	r0, #1
 8007eba:	f43f ae79 	beq.w	8007bb0 <_printf_float+0x98>
 8007ebe:	9b05      	ldr	r3, [sp, #20]
 8007ec0:	465a      	mov	r2, fp
 8007ec2:	4631      	mov	r1, r6
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	47b8      	blx	r7
 8007ec8:	3001      	adds	r0, #1
 8007eca:	f43f ae71 	beq.w	8007bb0 <_printf_float+0x98>
 8007ece:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8007ed2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eda:	f109 39ff 	add.w	r9, r9, #4294967295
 8007ede:	d018      	beq.n	8007f12 <_printf_float+0x3fa>
 8007ee0:	464b      	mov	r3, r9
 8007ee2:	f108 0201 	add.w	r2, r8, #1
 8007ee6:	4631      	mov	r1, r6
 8007ee8:	4628      	mov	r0, r5
 8007eea:	47b8      	blx	r7
 8007eec:	3001      	adds	r0, #1
 8007eee:	d10c      	bne.n	8007f0a <_printf_float+0x3f2>
 8007ef0:	e65e      	b.n	8007bb0 <_printf_float+0x98>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	465a      	mov	r2, fp
 8007ef6:	4631      	mov	r1, r6
 8007ef8:	4628      	mov	r0, r5
 8007efa:	47b8      	blx	r7
 8007efc:	3001      	adds	r0, #1
 8007efe:	f43f ae57 	beq.w	8007bb0 <_printf_float+0x98>
 8007f02:	f108 0801 	add.w	r8, r8, #1
 8007f06:	45c8      	cmp	r8, r9
 8007f08:	dbf3      	blt.n	8007ef2 <_printf_float+0x3da>
 8007f0a:	4653      	mov	r3, sl
 8007f0c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007f10:	e6dc      	b.n	8007ccc <_printf_float+0x1b4>
 8007f12:	f04f 0800 	mov.w	r8, #0
 8007f16:	f104 0b1a 	add.w	fp, r4, #26
 8007f1a:	e7f4      	b.n	8007f06 <_printf_float+0x3ee>
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	4642      	mov	r2, r8
 8007f20:	e7e1      	b.n	8007ee6 <_printf_float+0x3ce>
 8007f22:	2301      	movs	r3, #1
 8007f24:	464a      	mov	r2, r9
 8007f26:	4631      	mov	r1, r6
 8007f28:	4628      	mov	r0, r5
 8007f2a:	47b8      	blx	r7
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	f43f ae3f 	beq.w	8007bb0 <_printf_float+0x98>
 8007f32:	f108 0801 	add.w	r8, r8, #1
 8007f36:	68e3      	ldr	r3, [r4, #12]
 8007f38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007f3a:	1a5b      	subs	r3, r3, r1
 8007f3c:	4543      	cmp	r3, r8
 8007f3e:	dcf0      	bgt.n	8007f22 <_printf_float+0x40a>
 8007f40:	e6f8      	b.n	8007d34 <_printf_float+0x21c>
 8007f42:	f04f 0800 	mov.w	r8, #0
 8007f46:	f104 0919 	add.w	r9, r4, #25
 8007f4a:	e7f4      	b.n	8007f36 <_printf_float+0x41e>

08007f4c <_printf_common>:
 8007f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f50:	4616      	mov	r6, r2
 8007f52:	4698      	mov	r8, r3
 8007f54:	688a      	ldr	r2, [r1, #8]
 8007f56:	690b      	ldr	r3, [r1, #16]
 8007f58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	bfb8      	it	lt
 8007f60:	4613      	movlt	r3, r2
 8007f62:	6033      	str	r3, [r6, #0]
 8007f64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007f68:	4607      	mov	r7, r0
 8007f6a:	460c      	mov	r4, r1
 8007f6c:	b10a      	cbz	r2, 8007f72 <_printf_common+0x26>
 8007f6e:	3301      	adds	r3, #1
 8007f70:	6033      	str	r3, [r6, #0]
 8007f72:	6823      	ldr	r3, [r4, #0]
 8007f74:	0699      	lsls	r1, r3, #26
 8007f76:	bf42      	ittt	mi
 8007f78:	6833      	ldrmi	r3, [r6, #0]
 8007f7a:	3302      	addmi	r3, #2
 8007f7c:	6033      	strmi	r3, [r6, #0]
 8007f7e:	6825      	ldr	r5, [r4, #0]
 8007f80:	f015 0506 	ands.w	r5, r5, #6
 8007f84:	d106      	bne.n	8007f94 <_printf_common+0x48>
 8007f86:	f104 0a19 	add.w	sl, r4, #25
 8007f8a:	68e3      	ldr	r3, [r4, #12]
 8007f8c:	6832      	ldr	r2, [r6, #0]
 8007f8e:	1a9b      	subs	r3, r3, r2
 8007f90:	42ab      	cmp	r3, r5
 8007f92:	dc26      	bgt.n	8007fe2 <_printf_common+0x96>
 8007f94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007f98:	6822      	ldr	r2, [r4, #0]
 8007f9a:	3b00      	subs	r3, #0
 8007f9c:	bf18      	it	ne
 8007f9e:	2301      	movne	r3, #1
 8007fa0:	0692      	lsls	r2, r2, #26
 8007fa2:	d42b      	bmi.n	8007ffc <_printf_common+0xb0>
 8007fa4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007fa8:	4641      	mov	r1, r8
 8007faa:	4638      	mov	r0, r7
 8007fac:	47c8      	blx	r9
 8007fae:	3001      	adds	r0, #1
 8007fb0:	d01e      	beq.n	8007ff0 <_printf_common+0xa4>
 8007fb2:	6823      	ldr	r3, [r4, #0]
 8007fb4:	6922      	ldr	r2, [r4, #16]
 8007fb6:	f003 0306 	and.w	r3, r3, #6
 8007fba:	2b04      	cmp	r3, #4
 8007fbc:	bf02      	ittt	eq
 8007fbe:	68e5      	ldreq	r5, [r4, #12]
 8007fc0:	6833      	ldreq	r3, [r6, #0]
 8007fc2:	1aed      	subeq	r5, r5, r3
 8007fc4:	68a3      	ldr	r3, [r4, #8]
 8007fc6:	bf0c      	ite	eq
 8007fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fcc:	2500      	movne	r5, #0
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	bfc4      	itt	gt
 8007fd2:	1a9b      	subgt	r3, r3, r2
 8007fd4:	18ed      	addgt	r5, r5, r3
 8007fd6:	2600      	movs	r6, #0
 8007fd8:	341a      	adds	r4, #26
 8007fda:	42b5      	cmp	r5, r6
 8007fdc:	d11a      	bne.n	8008014 <_printf_common+0xc8>
 8007fde:	2000      	movs	r0, #0
 8007fe0:	e008      	b.n	8007ff4 <_printf_common+0xa8>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	4652      	mov	r2, sl
 8007fe6:	4641      	mov	r1, r8
 8007fe8:	4638      	mov	r0, r7
 8007fea:	47c8      	blx	r9
 8007fec:	3001      	adds	r0, #1
 8007fee:	d103      	bne.n	8007ff8 <_printf_common+0xac>
 8007ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ff8:	3501      	adds	r5, #1
 8007ffa:	e7c6      	b.n	8007f8a <_printf_common+0x3e>
 8007ffc:	18e1      	adds	r1, r4, r3
 8007ffe:	1c5a      	adds	r2, r3, #1
 8008000:	2030      	movs	r0, #48	@ 0x30
 8008002:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008006:	4422      	add	r2, r4
 8008008:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800800c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008010:	3302      	adds	r3, #2
 8008012:	e7c7      	b.n	8007fa4 <_printf_common+0x58>
 8008014:	2301      	movs	r3, #1
 8008016:	4622      	mov	r2, r4
 8008018:	4641      	mov	r1, r8
 800801a:	4638      	mov	r0, r7
 800801c:	47c8      	blx	r9
 800801e:	3001      	adds	r0, #1
 8008020:	d0e6      	beq.n	8007ff0 <_printf_common+0xa4>
 8008022:	3601      	adds	r6, #1
 8008024:	e7d9      	b.n	8007fda <_printf_common+0x8e>
	...

08008028 <_printf_i>:
 8008028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800802c:	7e0f      	ldrb	r7, [r1, #24]
 800802e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008030:	2f78      	cmp	r7, #120	@ 0x78
 8008032:	4691      	mov	r9, r2
 8008034:	4680      	mov	r8, r0
 8008036:	460c      	mov	r4, r1
 8008038:	469a      	mov	sl, r3
 800803a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800803e:	d807      	bhi.n	8008050 <_printf_i+0x28>
 8008040:	2f62      	cmp	r7, #98	@ 0x62
 8008042:	d80a      	bhi.n	800805a <_printf_i+0x32>
 8008044:	2f00      	cmp	r7, #0
 8008046:	f000 80d2 	beq.w	80081ee <_printf_i+0x1c6>
 800804a:	2f58      	cmp	r7, #88	@ 0x58
 800804c:	f000 80b9 	beq.w	80081c2 <_printf_i+0x19a>
 8008050:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008054:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008058:	e03a      	b.n	80080d0 <_printf_i+0xa8>
 800805a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800805e:	2b15      	cmp	r3, #21
 8008060:	d8f6      	bhi.n	8008050 <_printf_i+0x28>
 8008062:	a101      	add	r1, pc, #4	@ (adr r1, 8008068 <_printf_i+0x40>)
 8008064:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008068:	080080c1 	.word	0x080080c1
 800806c:	080080d5 	.word	0x080080d5
 8008070:	08008051 	.word	0x08008051
 8008074:	08008051 	.word	0x08008051
 8008078:	08008051 	.word	0x08008051
 800807c:	08008051 	.word	0x08008051
 8008080:	080080d5 	.word	0x080080d5
 8008084:	08008051 	.word	0x08008051
 8008088:	08008051 	.word	0x08008051
 800808c:	08008051 	.word	0x08008051
 8008090:	08008051 	.word	0x08008051
 8008094:	080081d5 	.word	0x080081d5
 8008098:	080080ff 	.word	0x080080ff
 800809c:	0800818f 	.word	0x0800818f
 80080a0:	08008051 	.word	0x08008051
 80080a4:	08008051 	.word	0x08008051
 80080a8:	080081f7 	.word	0x080081f7
 80080ac:	08008051 	.word	0x08008051
 80080b0:	080080ff 	.word	0x080080ff
 80080b4:	08008051 	.word	0x08008051
 80080b8:	08008051 	.word	0x08008051
 80080bc:	08008197 	.word	0x08008197
 80080c0:	6833      	ldr	r3, [r6, #0]
 80080c2:	1d1a      	adds	r2, r3, #4
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	6032      	str	r2, [r6, #0]
 80080c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80080d0:	2301      	movs	r3, #1
 80080d2:	e09d      	b.n	8008210 <_printf_i+0x1e8>
 80080d4:	6833      	ldr	r3, [r6, #0]
 80080d6:	6820      	ldr	r0, [r4, #0]
 80080d8:	1d19      	adds	r1, r3, #4
 80080da:	6031      	str	r1, [r6, #0]
 80080dc:	0606      	lsls	r6, r0, #24
 80080de:	d501      	bpl.n	80080e4 <_printf_i+0xbc>
 80080e0:	681d      	ldr	r5, [r3, #0]
 80080e2:	e003      	b.n	80080ec <_printf_i+0xc4>
 80080e4:	0645      	lsls	r5, r0, #25
 80080e6:	d5fb      	bpl.n	80080e0 <_printf_i+0xb8>
 80080e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80080ec:	2d00      	cmp	r5, #0
 80080ee:	da03      	bge.n	80080f8 <_printf_i+0xd0>
 80080f0:	232d      	movs	r3, #45	@ 0x2d
 80080f2:	426d      	negs	r5, r5
 80080f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080f8:	4859      	ldr	r0, [pc, #356]	@ (8008260 <_printf_i+0x238>)
 80080fa:	230a      	movs	r3, #10
 80080fc:	e011      	b.n	8008122 <_printf_i+0xfa>
 80080fe:	6821      	ldr	r1, [r4, #0]
 8008100:	6833      	ldr	r3, [r6, #0]
 8008102:	0608      	lsls	r0, r1, #24
 8008104:	f853 5b04 	ldr.w	r5, [r3], #4
 8008108:	d402      	bmi.n	8008110 <_printf_i+0xe8>
 800810a:	0649      	lsls	r1, r1, #25
 800810c:	bf48      	it	mi
 800810e:	b2ad      	uxthmi	r5, r5
 8008110:	2f6f      	cmp	r7, #111	@ 0x6f
 8008112:	4853      	ldr	r0, [pc, #332]	@ (8008260 <_printf_i+0x238>)
 8008114:	6033      	str	r3, [r6, #0]
 8008116:	bf14      	ite	ne
 8008118:	230a      	movne	r3, #10
 800811a:	2308      	moveq	r3, #8
 800811c:	2100      	movs	r1, #0
 800811e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008122:	6866      	ldr	r6, [r4, #4]
 8008124:	60a6      	str	r6, [r4, #8]
 8008126:	2e00      	cmp	r6, #0
 8008128:	bfa2      	ittt	ge
 800812a:	6821      	ldrge	r1, [r4, #0]
 800812c:	f021 0104 	bicge.w	r1, r1, #4
 8008130:	6021      	strge	r1, [r4, #0]
 8008132:	b90d      	cbnz	r5, 8008138 <_printf_i+0x110>
 8008134:	2e00      	cmp	r6, #0
 8008136:	d04b      	beq.n	80081d0 <_printf_i+0x1a8>
 8008138:	4616      	mov	r6, r2
 800813a:	fbb5 f1f3 	udiv	r1, r5, r3
 800813e:	fb03 5711 	mls	r7, r3, r1, r5
 8008142:	5dc7      	ldrb	r7, [r0, r7]
 8008144:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008148:	462f      	mov	r7, r5
 800814a:	42bb      	cmp	r3, r7
 800814c:	460d      	mov	r5, r1
 800814e:	d9f4      	bls.n	800813a <_printf_i+0x112>
 8008150:	2b08      	cmp	r3, #8
 8008152:	d10b      	bne.n	800816c <_printf_i+0x144>
 8008154:	6823      	ldr	r3, [r4, #0]
 8008156:	07df      	lsls	r7, r3, #31
 8008158:	d508      	bpl.n	800816c <_printf_i+0x144>
 800815a:	6923      	ldr	r3, [r4, #16]
 800815c:	6861      	ldr	r1, [r4, #4]
 800815e:	4299      	cmp	r1, r3
 8008160:	bfde      	ittt	le
 8008162:	2330      	movle	r3, #48	@ 0x30
 8008164:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008168:	f106 36ff 	addle.w	r6, r6, #4294967295
 800816c:	1b92      	subs	r2, r2, r6
 800816e:	6122      	str	r2, [r4, #16]
 8008170:	f8cd a000 	str.w	sl, [sp]
 8008174:	464b      	mov	r3, r9
 8008176:	aa03      	add	r2, sp, #12
 8008178:	4621      	mov	r1, r4
 800817a:	4640      	mov	r0, r8
 800817c:	f7ff fee6 	bl	8007f4c <_printf_common>
 8008180:	3001      	adds	r0, #1
 8008182:	d14a      	bne.n	800821a <_printf_i+0x1f2>
 8008184:	f04f 30ff 	mov.w	r0, #4294967295
 8008188:	b004      	add	sp, #16
 800818a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800818e:	6823      	ldr	r3, [r4, #0]
 8008190:	f043 0320 	orr.w	r3, r3, #32
 8008194:	6023      	str	r3, [r4, #0]
 8008196:	4833      	ldr	r0, [pc, #204]	@ (8008264 <_printf_i+0x23c>)
 8008198:	2778      	movs	r7, #120	@ 0x78
 800819a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800819e:	6823      	ldr	r3, [r4, #0]
 80081a0:	6831      	ldr	r1, [r6, #0]
 80081a2:	061f      	lsls	r7, r3, #24
 80081a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80081a8:	d402      	bmi.n	80081b0 <_printf_i+0x188>
 80081aa:	065f      	lsls	r7, r3, #25
 80081ac:	bf48      	it	mi
 80081ae:	b2ad      	uxthmi	r5, r5
 80081b0:	6031      	str	r1, [r6, #0]
 80081b2:	07d9      	lsls	r1, r3, #31
 80081b4:	bf44      	itt	mi
 80081b6:	f043 0320 	orrmi.w	r3, r3, #32
 80081ba:	6023      	strmi	r3, [r4, #0]
 80081bc:	b11d      	cbz	r5, 80081c6 <_printf_i+0x19e>
 80081be:	2310      	movs	r3, #16
 80081c0:	e7ac      	b.n	800811c <_printf_i+0xf4>
 80081c2:	4827      	ldr	r0, [pc, #156]	@ (8008260 <_printf_i+0x238>)
 80081c4:	e7e9      	b.n	800819a <_printf_i+0x172>
 80081c6:	6823      	ldr	r3, [r4, #0]
 80081c8:	f023 0320 	bic.w	r3, r3, #32
 80081cc:	6023      	str	r3, [r4, #0]
 80081ce:	e7f6      	b.n	80081be <_printf_i+0x196>
 80081d0:	4616      	mov	r6, r2
 80081d2:	e7bd      	b.n	8008150 <_printf_i+0x128>
 80081d4:	6833      	ldr	r3, [r6, #0]
 80081d6:	6825      	ldr	r5, [r4, #0]
 80081d8:	6961      	ldr	r1, [r4, #20]
 80081da:	1d18      	adds	r0, r3, #4
 80081dc:	6030      	str	r0, [r6, #0]
 80081de:	062e      	lsls	r6, r5, #24
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	d501      	bpl.n	80081e8 <_printf_i+0x1c0>
 80081e4:	6019      	str	r1, [r3, #0]
 80081e6:	e002      	b.n	80081ee <_printf_i+0x1c6>
 80081e8:	0668      	lsls	r0, r5, #25
 80081ea:	d5fb      	bpl.n	80081e4 <_printf_i+0x1bc>
 80081ec:	8019      	strh	r1, [r3, #0]
 80081ee:	2300      	movs	r3, #0
 80081f0:	6123      	str	r3, [r4, #16]
 80081f2:	4616      	mov	r6, r2
 80081f4:	e7bc      	b.n	8008170 <_printf_i+0x148>
 80081f6:	6833      	ldr	r3, [r6, #0]
 80081f8:	1d1a      	adds	r2, r3, #4
 80081fa:	6032      	str	r2, [r6, #0]
 80081fc:	681e      	ldr	r6, [r3, #0]
 80081fe:	6862      	ldr	r2, [r4, #4]
 8008200:	2100      	movs	r1, #0
 8008202:	4630      	mov	r0, r6
 8008204:	f7f8 f86c 	bl	80002e0 <memchr>
 8008208:	b108      	cbz	r0, 800820e <_printf_i+0x1e6>
 800820a:	1b80      	subs	r0, r0, r6
 800820c:	6060      	str	r0, [r4, #4]
 800820e:	6863      	ldr	r3, [r4, #4]
 8008210:	6123      	str	r3, [r4, #16]
 8008212:	2300      	movs	r3, #0
 8008214:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008218:	e7aa      	b.n	8008170 <_printf_i+0x148>
 800821a:	6923      	ldr	r3, [r4, #16]
 800821c:	4632      	mov	r2, r6
 800821e:	4649      	mov	r1, r9
 8008220:	4640      	mov	r0, r8
 8008222:	47d0      	blx	sl
 8008224:	3001      	adds	r0, #1
 8008226:	d0ad      	beq.n	8008184 <_printf_i+0x15c>
 8008228:	6823      	ldr	r3, [r4, #0]
 800822a:	079b      	lsls	r3, r3, #30
 800822c:	d413      	bmi.n	8008256 <_printf_i+0x22e>
 800822e:	68e0      	ldr	r0, [r4, #12]
 8008230:	9b03      	ldr	r3, [sp, #12]
 8008232:	4298      	cmp	r0, r3
 8008234:	bfb8      	it	lt
 8008236:	4618      	movlt	r0, r3
 8008238:	e7a6      	b.n	8008188 <_printf_i+0x160>
 800823a:	2301      	movs	r3, #1
 800823c:	4632      	mov	r2, r6
 800823e:	4649      	mov	r1, r9
 8008240:	4640      	mov	r0, r8
 8008242:	47d0      	blx	sl
 8008244:	3001      	adds	r0, #1
 8008246:	d09d      	beq.n	8008184 <_printf_i+0x15c>
 8008248:	3501      	adds	r5, #1
 800824a:	68e3      	ldr	r3, [r4, #12]
 800824c:	9903      	ldr	r1, [sp, #12]
 800824e:	1a5b      	subs	r3, r3, r1
 8008250:	42ab      	cmp	r3, r5
 8008252:	dcf2      	bgt.n	800823a <_printf_i+0x212>
 8008254:	e7eb      	b.n	800822e <_printf_i+0x206>
 8008256:	2500      	movs	r5, #0
 8008258:	f104 0619 	add.w	r6, r4, #25
 800825c:	e7f5      	b.n	800824a <_printf_i+0x222>
 800825e:	bf00      	nop
 8008260:	0800ad69 	.word	0x0800ad69
 8008264:	0800ad7a 	.word	0x0800ad7a

08008268 <std>:
 8008268:	2300      	movs	r3, #0
 800826a:	b510      	push	{r4, lr}
 800826c:	4604      	mov	r4, r0
 800826e:	e9c0 3300 	strd	r3, r3, [r0]
 8008272:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008276:	6083      	str	r3, [r0, #8]
 8008278:	8181      	strh	r1, [r0, #12]
 800827a:	6643      	str	r3, [r0, #100]	@ 0x64
 800827c:	81c2      	strh	r2, [r0, #14]
 800827e:	6183      	str	r3, [r0, #24]
 8008280:	4619      	mov	r1, r3
 8008282:	2208      	movs	r2, #8
 8008284:	305c      	adds	r0, #92	@ 0x5c
 8008286:	f000 fa2d 	bl	80086e4 <memset>
 800828a:	4b0d      	ldr	r3, [pc, #52]	@ (80082c0 <std+0x58>)
 800828c:	6263      	str	r3, [r4, #36]	@ 0x24
 800828e:	4b0d      	ldr	r3, [pc, #52]	@ (80082c4 <std+0x5c>)
 8008290:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008292:	4b0d      	ldr	r3, [pc, #52]	@ (80082c8 <std+0x60>)
 8008294:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008296:	4b0d      	ldr	r3, [pc, #52]	@ (80082cc <std+0x64>)
 8008298:	6323      	str	r3, [r4, #48]	@ 0x30
 800829a:	4b0d      	ldr	r3, [pc, #52]	@ (80082d0 <std+0x68>)
 800829c:	6224      	str	r4, [r4, #32]
 800829e:	429c      	cmp	r4, r3
 80082a0:	d006      	beq.n	80082b0 <std+0x48>
 80082a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80082a6:	4294      	cmp	r4, r2
 80082a8:	d002      	beq.n	80082b0 <std+0x48>
 80082aa:	33d0      	adds	r3, #208	@ 0xd0
 80082ac:	429c      	cmp	r4, r3
 80082ae:	d105      	bne.n	80082bc <std+0x54>
 80082b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80082b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082b8:	f000 bade 	b.w	8008878 <__retarget_lock_init_recursive>
 80082bc:	bd10      	pop	{r4, pc}
 80082be:	bf00      	nop
 80082c0:	08008535 	.word	0x08008535
 80082c4:	08008557 	.word	0x08008557
 80082c8:	0800858f 	.word	0x0800858f
 80082cc:	080085b3 	.word	0x080085b3
 80082d0:	24000ac0 	.word	0x24000ac0

080082d4 <stdio_exit_handler>:
 80082d4:	4a02      	ldr	r2, [pc, #8]	@ (80082e0 <stdio_exit_handler+0xc>)
 80082d6:	4903      	ldr	r1, [pc, #12]	@ (80082e4 <stdio_exit_handler+0x10>)
 80082d8:	4803      	ldr	r0, [pc, #12]	@ (80082e8 <stdio_exit_handler+0x14>)
 80082da:	f000 b869 	b.w	80083b0 <_fwalk_sglue>
 80082de:	bf00      	nop
 80082e0:	2400069c 	.word	0x2400069c
 80082e4:	0800a279 	.word	0x0800a279
 80082e8:	240006ac 	.word	0x240006ac

080082ec <cleanup_stdio>:
 80082ec:	6841      	ldr	r1, [r0, #4]
 80082ee:	4b0c      	ldr	r3, [pc, #48]	@ (8008320 <cleanup_stdio+0x34>)
 80082f0:	4299      	cmp	r1, r3
 80082f2:	b510      	push	{r4, lr}
 80082f4:	4604      	mov	r4, r0
 80082f6:	d001      	beq.n	80082fc <cleanup_stdio+0x10>
 80082f8:	f001 ffbe 	bl	800a278 <_fflush_r>
 80082fc:	68a1      	ldr	r1, [r4, #8]
 80082fe:	4b09      	ldr	r3, [pc, #36]	@ (8008324 <cleanup_stdio+0x38>)
 8008300:	4299      	cmp	r1, r3
 8008302:	d002      	beq.n	800830a <cleanup_stdio+0x1e>
 8008304:	4620      	mov	r0, r4
 8008306:	f001 ffb7 	bl	800a278 <_fflush_r>
 800830a:	68e1      	ldr	r1, [r4, #12]
 800830c:	4b06      	ldr	r3, [pc, #24]	@ (8008328 <cleanup_stdio+0x3c>)
 800830e:	4299      	cmp	r1, r3
 8008310:	d004      	beq.n	800831c <cleanup_stdio+0x30>
 8008312:	4620      	mov	r0, r4
 8008314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008318:	f001 bfae 	b.w	800a278 <_fflush_r>
 800831c:	bd10      	pop	{r4, pc}
 800831e:	bf00      	nop
 8008320:	24000ac0 	.word	0x24000ac0
 8008324:	24000b28 	.word	0x24000b28
 8008328:	24000b90 	.word	0x24000b90

0800832c <global_stdio_init.part.0>:
 800832c:	b510      	push	{r4, lr}
 800832e:	4b0b      	ldr	r3, [pc, #44]	@ (800835c <global_stdio_init.part.0+0x30>)
 8008330:	4c0b      	ldr	r4, [pc, #44]	@ (8008360 <global_stdio_init.part.0+0x34>)
 8008332:	4a0c      	ldr	r2, [pc, #48]	@ (8008364 <global_stdio_init.part.0+0x38>)
 8008334:	601a      	str	r2, [r3, #0]
 8008336:	4620      	mov	r0, r4
 8008338:	2200      	movs	r2, #0
 800833a:	2104      	movs	r1, #4
 800833c:	f7ff ff94 	bl	8008268 <std>
 8008340:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008344:	2201      	movs	r2, #1
 8008346:	2109      	movs	r1, #9
 8008348:	f7ff ff8e 	bl	8008268 <std>
 800834c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008350:	2202      	movs	r2, #2
 8008352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008356:	2112      	movs	r1, #18
 8008358:	f7ff bf86 	b.w	8008268 <std>
 800835c:	24000bf8 	.word	0x24000bf8
 8008360:	24000ac0 	.word	0x24000ac0
 8008364:	080082d5 	.word	0x080082d5

08008368 <__sfp_lock_acquire>:
 8008368:	4801      	ldr	r0, [pc, #4]	@ (8008370 <__sfp_lock_acquire+0x8>)
 800836a:	f000 ba86 	b.w	800887a <__retarget_lock_acquire_recursive>
 800836e:	bf00      	nop
 8008370:	24000c01 	.word	0x24000c01

08008374 <__sfp_lock_release>:
 8008374:	4801      	ldr	r0, [pc, #4]	@ (800837c <__sfp_lock_release+0x8>)
 8008376:	f000 ba81 	b.w	800887c <__retarget_lock_release_recursive>
 800837a:	bf00      	nop
 800837c:	24000c01 	.word	0x24000c01

08008380 <__sinit>:
 8008380:	b510      	push	{r4, lr}
 8008382:	4604      	mov	r4, r0
 8008384:	f7ff fff0 	bl	8008368 <__sfp_lock_acquire>
 8008388:	6a23      	ldr	r3, [r4, #32]
 800838a:	b11b      	cbz	r3, 8008394 <__sinit+0x14>
 800838c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008390:	f7ff bff0 	b.w	8008374 <__sfp_lock_release>
 8008394:	4b04      	ldr	r3, [pc, #16]	@ (80083a8 <__sinit+0x28>)
 8008396:	6223      	str	r3, [r4, #32]
 8008398:	4b04      	ldr	r3, [pc, #16]	@ (80083ac <__sinit+0x2c>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1f5      	bne.n	800838c <__sinit+0xc>
 80083a0:	f7ff ffc4 	bl	800832c <global_stdio_init.part.0>
 80083a4:	e7f2      	b.n	800838c <__sinit+0xc>
 80083a6:	bf00      	nop
 80083a8:	080082ed 	.word	0x080082ed
 80083ac:	24000bf8 	.word	0x24000bf8

080083b0 <_fwalk_sglue>:
 80083b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083b4:	4607      	mov	r7, r0
 80083b6:	4688      	mov	r8, r1
 80083b8:	4614      	mov	r4, r2
 80083ba:	2600      	movs	r6, #0
 80083bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083c0:	f1b9 0901 	subs.w	r9, r9, #1
 80083c4:	d505      	bpl.n	80083d2 <_fwalk_sglue+0x22>
 80083c6:	6824      	ldr	r4, [r4, #0]
 80083c8:	2c00      	cmp	r4, #0
 80083ca:	d1f7      	bne.n	80083bc <_fwalk_sglue+0xc>
 80083cc:	4630      	mov	r0, r6
 80083ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083d2:	89ab      	ldrh	r3, [r5, #12]
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d907      	bls.n	80083e8 <_fwalk_sglue+0x38>
 80083d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083dc:	3301      	adds	r3, #1
 80083de:	d003      	beq.n	80083e8 <_fwalk_sglue+0x38>
 80083e0:	4629      	mov	r1, r5
 80083e2:	4638      	mov	r0, r7
 80083e4:	47c0      	blx	r8
 80083e6:	4306      	orrs	r6, r0
 80083e8:	3568      	adds	r5, #104	@ 0x68
 80083ea:	e7e9      	b.n	80083c0 <_fwalk_sglue+0x10>

080083ec <iprintf>:
 80083ec:	b40f      	push	{r0, r1, r2, r3}
 80083ee:	b507      	push	{r0, r1, r2, lr}
 80083f0:	4906      	ldr	r1, [pc, #24]	@ (800840c <iprintf+0x20>)
 80083f2:	ab04      	add	r3, sp, #16
 80083f4:	6808      	ldr	r0, [r1, #0]
 80083f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80083fa:	6881      	ldr	r1, [r0, #8]
 80083fc:	9301      	str	r3, [sp, #4]
 80083fe:	f001 fd9f 	bl	8009f40 <_vfiprintf_r>
 8008402:	b003      	add	sp, #12
 8008404:	f85d eb04 	ldr.w	lr, [sp], #4
 8008408:	b004      	add	sp, #16
 800840a:	4770      	bx	lr
 800840c:	240006a8 	.word	0x240006a8

08008410 <_puts_r>:
 8008410:	6a03      	ldr	r3, [r0, #32]
 8008412:	b570      	push	{r4, r5, r6, lr}
 8008414:	6884      	ldr	r4, [r0, #8]
 8008416:	4605      	mov	r5, r0
 8008418:	460e      	mov	r6, r1
 800841a:	b90b      	cbnz	r3, 8008420 <_puts_r+0x10>
 800841c:	f7ff ffb0 	bl	8008380 <__sinit>
 8008420:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008422:	07db      	lsls	r3, r3, #31
 8008424:	d405      	bmi.n	8008432 <_puts_r+0x22>
 8008426:	89a3      	ldrh	r3, [r4, #12]
 8008428:	0598      	lsls	r0, r3, #22
 800842a:	d402      	bmi.n	8008432 <_puts_r+0x22>
 800842c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800842e:	f000 fa24 	bl	800887a <__retarget_lock_acquire_recursive>
 8008432:	89a3      	ldrh	r3, [r4, #12]
 8008434:	0719      	lsls	r1, r3, #28
 8008436:	d502      	bpl.n	800843e <_puts_r+0x2e>
 8008438:	6923      	ldr	r3, [r4, #16]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d135      	bne.n	80084aa <_puts_r+0x9a>
 800843e:	4621      	mov	r1, r4
 8008440:	4628      	mov	r0, r5
 8008442:	f000 f8f9 	bl	8008638 <__swsetup_r>
 8008446:	b380      	cbz	r0, 80084aa <_puts_r+0x9a>
 8008448:	f04f 35ff 	mov.w	r5, #4294967295
 800844c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800844e:	07da      	lsls	r2, r3, #31
 8008450:	d405      	bmi.n	800845e <_puts_r+0x4e>
 8008452:	89a3      	ldrh	r3, [r4, #12]
 8008454:	059b      	lsls	r3, r3, #22
 8008456:	d402      	bmi.n	800845e <_puts_r+0x4e>
 8008458:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800845a:	f000 fa0f 	bl	800887c <__retarget_lock_release_recursive>
 800845e:	4628      	mov	r0, r5
 8008460:	bd70      	pop	{r4, r5, r6, pc}
 8008462:	2b00      	cmp	r3, #0
 8008464:	da04      	bge.n	8008470 <_puts_r+0x60>
 8008466:	69a2      	ldr	r2, [r4, #24]
 8008468:	429a      	cmp	r2, r3
 800846a:	dc17      	bgt.n	800849c <_puts_r+0x8c>
 800846c:	290a      	cmp	r1, #10
 800846e:	d015      	beq.n	800849c <_puts_r+0x8c>
 8008470:	6823      	ldr	r3, [r4, #0]
 8008472:	1c5a      	adds	r2, r3, #1
 8008474:	6022      	str	r2, [r4, #0]
 8008476:	7019      	strb	r1, [r3, #0]
 8008478:	68a3      	ldr	r3, [r4, #8]
 800847a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800847e:	3b01      	subs	r3, #1
 8008480:	60a3      	str	r3, [r4, #8]
 8008482:	2900      	cmp	r1, #0
 8008484:	d1ed      	bne.n	8008462 <_puts_r+0x52>
 8008486:	2b00      	cmp	r3, #0
 8008488:	da11      	bge.n	80084ae <_puts_r+0x9e>
 800848a:	4622      	mov	r2, r4
 800848c:	210a      	movs	r1, #10
 800848e:	4628      	mov	r0, r5
 8008490:	f000 f893 	bl	80085ba <__swbuf_r>
 8008494:	3001      	adds	r0, #1
 8008496:	d0d7      	beq.n	8008448 <_puts_r+0x38>
 8008498:	250a      	movs	r5, #10
 800849a:	e7d7      	b.n	800844c <_puts_r+0x3c>
 800849c:	4622      	mov	r2, r4
 800849e:	4628      	mov	r0, r5
 80084a0:	f000 f88b 	bl	80085ba <__swbuf_r>
 80084a4:	3001      	adds	r0, #1
 80084a6:	d1e7      	bne.n	8008478 <_puts_r+0x68>
 80084a8:	e7ce      	b.n	8008448 <_puts_r+0x38>
 80084aa:	3e01      	subs	r6, #1
 80084ac:	e7e4      	b.n	8008478 <_puts_r+0x68>
 80084ae:	6823      	ldr	r3, [r4, #0]
 80084b0:	1c5a      	adds	r2, r3, #1
 80084b2:	6022      	str	r2, [r4, #0]
 80084b4:	220a      	movs	r2, #10
 80084b6:	701a      	strb	r2, [r3, #0]
 80084b8:	e7ee      	b.n	8008498 <_puts_r+0x88>
	...

080084bc <puts>:
 80084bc:	4b02      	ldr	r3, [pc, #8]	@ (80084c8 <puts+0xc>)
 80084be:	4601      	mov	r1, r0
 80084c0:	6818      	ldr	r0, [r3, #0]
 80084c2:	f7ff bfa5 	b.w	8008410 <_puts_r>
 80084c6:	bf00      	nop
 80084c8:	240006a8 	.word	0x240006a8

080084cc <sniprintf>:
 80084cc:	b40c      	push	{r2, r3}
 80084ce:	b530      	push	{r4, r5, lr}
 80084d0:	4b17      	ldr	r3, [pc, #92]	@ (8008530 <sniprintf+0x64>)
 80084d2:	1e0c      	subs	r4, r1, #0
 80084d4:	681d      	ldr	r5, [r3, #0]
 80084d6:	b09d      	sub	sp, #116	@ 0x74
 80084d8:	da08      	bge.n	80084ec <sniprintf+0x20>
 80084da:	238b      	movs	r3, #139	@ 0x8b
 80084dc:	602b      	str	r3, [r5, #0]
 80084de:	f04f 30ff 	mov.w	r0, #4294967295
 80084e2:	b01d      	add	sp, #116	@ 0x74
 80084e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084e8:	b002      	add	sp, #8
 80084ea:	4770      	bx	lr
 80084ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80084f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80084f4:	bf14      	ite	ne
 80084f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80084fa:	4623      	moveq	r3, r4
 80084fc:	9304      	str	r3, [sp, #16]
 80084fe:	9307      	str	r3, [sp, #28]
 8008500:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008504:	9002      	str	r0, [sp, #8]
 8008506:	9006      	str	r0, [sp, #24]
 8008508:	f8ad 3016 	strh.w	r3, [sp, #22]
 800850c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800850e:	ab21      	add	r3, sp, #132	@ 0x84
 8008510:	a902      	add	r1, sp, #8
 8008512:	4628      	mov	r0, r5
 8008514:	9301      	str	r3, [sp, #4]
 8008516:	f001 fbed 	bl	8009cf4 <_svfiprintf_r>
 800851a:	1c43      	adds	r3, r0, #1
 800851c:	bfbc      	itt	lt
 800851e:	238b      	movlt	r3, #139	@ 0x8b
 8008520:	602b      	strlt	r3, [r5, #0]
 8008522:	2c00      	cmp	r4, #0
 8008524:	d0dd      	beq.n	80084e2 <sniprintf+0x16>
 8008526:	9b02      	ldr	r3, [sp, #8]
 8008528:	2200      	movs	r2, #0
 800852a:	701a      	strb	r2, [r3, #0]
 800852c:	e7d9      	b.n	80084e2 <sniprintf+0x16>
 800852e:	bf00      	nop
 8008530:	240006a8 	.word	0x240006a8

08008534 <__sread>:
 8008534:	b510      	push	{r4, lr}
 8008536:	460c      	mov	r4, r1
 8008538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800853c:	f000 f93e 	bl	80087bc <_read_r>
 8008540:	2800      	cmp	r0, #0
 8008542:	bfab      	itete	ge
 8008544:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008546:	89a3      	ldrhlt	r3, [r4, #12]
 8008548:	181b      	addge	r3, r3, r0
 800854a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800854e:	bfac      	ite	ge
 8008550:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008552:	81a3      	strhlt	r3, [r4, #12]
 8008554:	bd10      	pop	{r4, pc}

08008556 <__swrite>:
 8008556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800855a:	461f      	mov	r7, r3
 800855c:	898b      	ldrh	r3, [r1, #12]
 800855e:	05db      	lsls	r3, r3, #23
 8008560:	4605      	mov	r5, r0
 8008562:	460c      	mov	r4, r1
 8008564:	4616      	mov	r6, r2
 8008566:	d505      	bpl.n	8008574 <__swrite+0x1e>
 8008568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800856c:	2302      	movs	r3, #2
 800856e:	2200      	movs	r2, #0
 8008570:	f000 f912 	bl	8008798 <_lseek_r>
 8008574:	89a3      	ldrh	r3, [r4, #12]
 8008576:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800857a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800857e:	81a3      	strh	r3, [r4, #12]
 8008580:	4632      	mov	r2, r6
 8008582:	463b      	mov	r3, r7
 8008584:	4628      	mov	r0, r5
 8008586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800858a:	f000 b939 	b.w	8008800 <_write_r>

0800858e <__sseek>:
 800858e:	b510      	push	{r4, lr}
 8008590:	460c      	mov	r4, r1
 8008592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008596:	f000 f8ff 	bl	8008798 <_lseek_r>
 800859a:	1c43      	adds	r3, r0, #1
 800859c:	89a3      	ldrh	r3, [r4, #12]
 800859e:	bf15      	itete	ne
 80085a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80085a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80085a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80085aa:	81a3      	strheq	r3, [r4, #12]
 80085ac:	bf18      	it	ne
 80085ae:	81a3      	strhne	r3, [r4, #12]
 80085b0:	bd10      	pop	{r4, pc}

080085b2 <__sclose>:
 80085b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085b6:	f000 b8cd 	b.w	8008754 <_close_r>

080085ba <__swbuf_r>:
 80085ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085bc:	460e      	mov	r6, r1
 80085be:	4614      	mov	r4, r2
 80085c0:	4605      	mov	r5, r0
 80085c2:	b118      	cbz	r0, 80085cc <__swbuf_r+0x12>
 80085c4:	6a03      	ldr	r3, [r0, #32]
 80085c6:	b90b      	cbnz	r3, 80085cc <__swbuf_r+0x12>
 80085c8:	f7ff feda 	bl	8008380 <__sinit>
 80085cc:	69a3      	ldr	r3, [r4, #24]
 80085ce:	60a3      	str	r3, [r4, #8]
 80085d0:	89a3      	ldrh	r3, [r4, #12]
 80085d2:	071a      	lsls	r2, r3, #28
 80085d4:	d501      	bpl.n	80085da <__swbuf_r+0x20>
 80085d6:	6923      	ldr	r3, [r4, #16]
 80085d8:	b943      	cbnz	r3, 80085ec <__swbuf_r+0x32>
 80085da:	4621      	mov	r1, r4
 80085dc:	4628      	mov	r0, r5
 80085de:	f000 f82b 	bl	8008638 <__swsetup_r>
 80085e2:	b118      	cbz	r0, 80085ec <__swbuf_r+0x32>
 80085e4:	f04f 37ff 	mov.w	r7, #4294967295
 80085e8:	4638      	mov	r0, r7
 80085ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085ec:	6823      	ldr	r3, [r4, #0]
 80085ee:	6922      	ldr	r2, [r4, #16]
 80085f0:	1a98      	subs	r0, r3, r2
 80085f2:	6963      	ldr	r3, [r4, #20]
 80085f4:	b2f6      	uxtb	r6, r6
 80085f6:	4283      	cmp	r3, r0
 80085f8:	4637      	mov	r7, r6
 80085fa:	dc05      	bgt.n	8008608 <__swbuf_r+0x4e>
 80085fc:	4621      	mov	r1, r4
 80085fe:	4628      	mov	r0, r5
 8008600:	f001 fe3a 	bl	800a278 <_fflush_r>
 8008604:	2800      	cmp	r0, #0
 8008606:	d1ed      	bne.n	80085e4 <__swbuf_r+0x2a>
 8008608:	68a3      	ldr	r3, [r4, #8]
 800860a:	3b01      	subs	r3, #1
 800860c:	60a3      	str	r3, [r4, #8]
 800860e:	6823      	ldr	r3, [r4, #0]
 8008610:	1c5a      	adds	r2, r3, #1
 8008612:	6022      	str	r2, [r4, #0]
 8008614:	701e      	strb	r6, [r3, #0]
 8008616:	6962      	ldr	r2, [r4, #20]
 8008618:	1c43      	adds	r3, r0, #1
 800861a:	429a      	cmp	r2, r3
 800861c:	d004      	beq.n	8008628 <__swbuf_r+0x6e>
 800861e:	89a3      	ldrh	r3, [r4, #12]
 8008620:	07db      	lsls	r3, r3, #31
 8008622:	d5e1      	bpl.n	80085e8 <__swbuf_r+0x2e>
 8008624:	2e0a      	cmp	r6, #10
 8008626:	d1df      	bne.n	80085e8 <__swbuf_r+0x2e>
 8008628:	4621      	mov	r1, r4
 800862a:	4628      	mov	r0, r5
 800862c:	f001 fe24 	bl	800a278 <_fflush_r>
 8008630:	2800      	cmp	r0, #0
 8008632:	d0d9      	beq.n	80085e8 <__swbuf_r+0x2e>
 8008634:	e7d6      	b.n	80085e4 <__swbuf_r+0x2a>
	...

08008638 <__swsetup_r>:
 8008638:	b538      	push	{r3, r4, r5, lr}
 800863a:	4b29      	ldr	r3, [pc, #164]	@ (80086e0 <__swsetup_r+0xa8>)
 800863c:	4605      	mov	r5, r0
 800863e:	6818      	ldr	r0, [r3, #0]
 8008640:	460c      	mov	r4, r1
 8008642:	b118      	cbz	r0, 800864c <__swsetup_r+0x14>
 8008644:	6a03      	ldr	r3, [r0, #32]
 8008646:	b90b      	cbnz	r3, 800864c <__swsetup_r+0x14>
 8008648:	f7ff fe9a 	bl	8008380 <__sinit>
 800864c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008650:	0719      	lsls	r1, r3, #28
 8008652:	d422      	bmi.n	800869a <__swsetup_r+0x62>
 8008654:	06da      	lsls	r2, r3, #27
 8008656:	d407      	bmi.n	8008668 <__swsetup_r+0x30>
 8008658:	2209      	movs	r2, #9
 800865a:	602a      	str	r2, [r5, #0]
 800865c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008660:	81a3      	strh	r3, [r4, #12]
 8008662:	f04f 30ff 	mov.w	r0, #4294967295
 8008666:	e033      	b.n	80086d0 <__swsetup_r+0x98>
 8008668:	0758      	lsls	r0, r3, #29
 800866a:	d512      	bpl.n	8008692 <__swsetup_r+0x5a>
 800866c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800866e:	b141      	cbz	r1, 8008682 <__swsetup_r+0x4a>
 8008670:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008674:	4299      	cmp	r1, r3
 8008676:	d002      	beq.n	800867e <__swsetup_r+0x46>
 8008678:	4628      	mov	r0, r5
 800867a:	f000 ff0b 	bl	8009494 <_free_r>
 800867e:	2300      	movs	r3, #0
 8008680:	6363      	str	r3, [r4, #52]	@ 0x34
 8008682:	89a3      	ldrh	r3, [r4, #12]
 8008684:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008688:	81a3      	strh	r3, [r4, #12]
 800868a:	2300      	movs	r3, #0
 800868c:	6063      	str	r3, [r4, #4]
 800868e:	6923      	ldr	r3, [r4, #16]
 8008690:	6023      	str	r3, [r4, #0]
 8008692:	89a3      	ldrh	r3, [r4, #12]
 8008694:	f043 0308 	orr.w	r3, r3, #8
 8008698:	81a3      	strh	r3, [r4, #12]
 800869a:	6923      	ldr	r3, [r4, #16]
 800869c:	b94b      	cbnz	r3, 80086b2 <__swsetup_r+0x7a>
 800869e:	89a3      	ldrh	r3, [r4, #12]
 80086a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80086a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086a8:	d003      	beq.n	80086b2 <__swsetup_r+0x7a>
 80086aa:	4621      	mov	r1, r4
 80086ac:	4628      	mov	r0, r5
 80086ae:	f001 fe43 	bl	800a338 <__smakebuf_r>
 80086b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086b6:	f013 0201 	ands.w	r2, r3, #1
 80086ba:	d00a      	beq.n	80086d2 <__swsetup_r+0x9a>
 80086bc:	2200      	movs	r2, #0
 80086be:	60a2      	str	r2, [r4, #8]
 80086c0:	6962      	ldr	r2, [r4, #20]
 80086c2:	4252      	negs	r2, r2
 80086c4:	61a2      	str	r2, [r4, #24]
 80086c6:	6922      	ldr	r2, [r4, #16]
 80086c8:	b942      	cbnz	r2, 80086dc <__swsetup_r+0xa4>
 80086ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80086ce:	d1c5      	bne.n	800865c <__swsetup_r+0x24>
 80086d0:	bd38      	pop	{r3, r4, r5, pc}
 80086d2:	0799      	lsls	r1, r3, #30
 80086d4:	bf58      	it	pl
 80086d6:	6962      	ldrpl	r2, [r4, #20]
 80086d8:	60a2      	str	r2, [r4, #8]
 80086da:	e7f4      	b.n	80086c6 <__swsetup_r+0x8e>
 80086dc:	2000      	movs	r0, #0
 80086de:	e7f7      	b.n	80086d0 <__swsetup_r+0x98>
 80086e0:	240006a8 	.word	0x240006a8

080086e4 <memset>:
 80086e4:	4402      	add	r2, r0
 80086e6:	4603      	mov	r3, r0
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d100      	bne.n	80086ee <memset+0xa>
 80086ec:	4770      	bx	lr
 80086ee:	f803 1b01 	strb.w	r1, [r3], #1
 80086f2:	e7f9      	b.n	80086e8 <memset+0x4>

080086f4 <strcat>:
 80086f4:	b510      	push	{r4, lr}
 80086f6:	4602      	mov	r2, r0
 80086f8:	7814      	ldrb	r4, [r2, #0]
 80086fa:	4613      	mov	r3, r2
 80086fc:	3201      	adds	r2, #1
 80086fe:	2c00      	cmp	r4, #0
 8008700:	d1fa      	bne.n	80086f8 <strcat+0x4>
 8008702:	3b01      	subs	r3, #1
 8008704:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008708:	f803 2f01 	strb.w	r2, [r3, #1]!
 800870c:	2a00      	cmp	r2, #0
 800870e:	d1f9      	bne.n	8008704 <strcat+0x10>
 8008710:	bd10      	pop	{r4, pc}
	...

08008714 <time>:
 8008714:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8008716:	4b0c      	ldr	r3, [pc, #48]	@ (8008748 <time+0x34>)
 8008718:	f04f 36ff 	mov.w	r6, #4294967295
 800871c:	f04f 37ff 	mov.w	r7, #4294967295
 8008720:	4669      	mov	r1, sp
 8008722:	4604      	mov	r4, r0
 8008724:	2200      	movs	r2, #0
 8008726:	6818      	ldr	r0, [r3, #0]
 8008728:	e9cd 6700 	strd	r6, r7, [sp]
 800872c:	f000 f822 	bl	8008774 <_gettimeofday_r>
 8008730:	2800      	cmp	r0, #0
 8008732:	bfb8      	it	lt
 8008734:	e9cd 6700 	strdlt	r6, r7, [sp]
 8008738:	e9dd 0100 	ldrd	r0, r1, [sp]
 800873c:	b10c      	cbz	r4, 8008742 <time+0x2e>
 800873e:	e9c4 0100 	strd	r0, r1, [r4]
 8008742:	b004      	add	sp, #16
 8008744:	bdd0      	pop	{r4, r6, r7, pc}
 8008746:	bf00      	nop
 8008748:	240006a8 	.word	0x240006a8

0800874c <_localeconv_r>:
 800874c:	4800      	ldr	r0, [pc, #0]	@ (8008750 <_localeconv_r+0x4>)
 800874e:	4770      	bx	lr
 8008750:	240007e8 	.word	0x240007e8

08008754 <_close_r>:
 8008754:	b538      	push	{r3, r4, r5, lr}
 8008756:	4d06      	ldr	r5, [pc, #24]	@ (8008770 <_close_r+0x1c>)
 8008758:	2300      	movs	r3, #0
 800875a:	4604      	mov	r4, r0
 800875c:	4608      	mov	r0, r1
 800875e:	602b      	str	r3, [r5, #0]
 8008760:	f001 fee0 	bl	800a524 <_close>
 8008764:	1c43      	adds	r3, r0, #1
 8008766:	d102      	bne.n	800876e <_close_r+0x1a>
 8008768:	682b      	ldr	r3, [r5, #0]
 800876a:	b103      	cbz	r3, 800876e <_close_r+0x1a>
 800876c:	6023      	str	r3, [r4, #0]
 800876e:	bd38      	pop	{r3, r4, r5, pc}
 8008770:	24000bfc 	.word	0x24000bfc

08008774 <_gettimeofday_r>:
 8008774:	b538      	push	{r3, r4, r5, lr}
 8008776:	4d07      	ldr	r5, [pc, #28]	@ (8008794 <_gettimeofday_r+0x20>)
 8008778:	2300      	movs	r3, #0
 800877a:	4604      	mov	r4, r0
 800877c:	4608      	mov	r0, r1
 800877e:	4611      	mov	r1, r2
 8008780:	602b      	str	r3, [r5, #0]
 8008782:	f001 fee7 	bl	800a554 <_gettimeofday>
 8008786:	1c43      	adds	r3, r0, #1
 8008788:	d102      	bne.n	8008790 <_gettimeofday_r+0x1c>
 800878a:	682b      	ldr	r3, [r5, #0]
 800878c:	b103      	cbz	r3, 8008790 <_gettimeofday_r+0x1c>
 800878e:	6023      	str	r3, [r4, #0]
 8008790:	bd38      	pop	{r3, r4, r5, pc}
 8008792:	bf00      	nop
 8008794:	24000bfc 	.word	0x24000bfc

08008798 <_lseek_r>:
 8008798:	b538      	push	{r3, r4, r5, lr}
 800879a:	4d07      	ldr	r5, [pc, #28]	@ (80087b8 <_lseek_r+0x20>)
 800879c:	4604      	mov	r4, r0
 800879e:	4608      	mov	r0, r1
 80087a0:	4611      	mov	r1, r2
 80087a2:	2200      	movs	r2, #0
 80087a4:	602a      	str	r2, [r5, #0]
 80087a6:	461a      	mov	r2, r3
 80087a8:	f001 feec 	bl	800a584 <_lseek>
 80087ac:	1c43      	adds	r3, r0, #1
 80087ae:	d102      	bne.n	80087b6 <_lseek_r+0x1e>
 80087b0:	682b      	ldr	r3, [r5, #0]
 80087b2:	b103      	cbz	r3, 80087b6 <_lseek_r+0x1e>
 80087b4:	6023      	str	r3, [r4, #0]
 80087b6:	bd38      	pop	{r3, r4, r5, pc}
 80087b8:	24000bfc 	.word	0x24000bfc

080087bc <_read_r>:
 80087bc:	b538      	push	{r3, r4, r5, lr}
 80087be:	4d07      	ldr	r5, [pc, #28]	@ (80087dc <_read_r+0x20>)
 80087c0:	4604      	mov	r4, r0
 80087c2:	4608      	mov	r0, r1
 80087c4:	4611      	mov	r1, r2
 80087c6:	2200      	movs	r2, #0
 80087c8:	602a      	str	r2, [r5, #0]
 80087ca:	461a      	mov	r2, r3
 80087cc:	f001 fee2 	bl	800a594 <_read>
 80087d0:	1c43      	adds	r3, r0, #1
 80087d2:	d102      	bne.n	80087da <_read_r+0x1e>
 80087d4:	682b      	ldr	r3, [r5, #0]
 80087d6:	b103      	cbz	r3, 80087da <_read_r+0x1e>
 80087d8:	6023      	str	r3, [r4, #0]
 80087da:	bd38      	pop	{r3, r4, r5, pc}
 80087dc:	24000bfc 	.word	0x24000bfc

080087e0 <_sbrk_r>:
 80087e0:	b538      	push	{r3, r4, r5, lr}
 80087e2:	4d06      	ldr	r5, [pc, #24]	@ (80087fc <_sbrk_r+0x1c>)
 80087e4:	2300      	movs	r3, #0
 80087e6:	4604      	mov	r4, r0
 80087e8:	4608      	mov	r0, r1
 80087ea:	602b      	str	r3, [r5, #0]
 80087ec:	f7f8 f98c 	bl	8000b08 <_sbrk>
 80087f0:	1c43      	adds	r3, r0, #1
 80087f2:	d102      	bne.n	80087fa <_sbrk_r+0x1a>
 80087f4:	682b      	ldr	r3, [r5, #0]
 80087f6:	b103      	cbz	r3, 80087fa <_sbrk_r+0x1a>
 80087f8:	6023      	str	r3, [r4, #0]
 80087fa:	bd38      	pop	{r3, r4, r5, pc}
 80087fc:	24000bfc 	.word	0x24000bfc

08008800 <_write_r>:
 8008800:	b538      	push	{r3, r4, r5, lr}
 8008802:	4d07      	ldr	r5, [pc, #28]	@ (8008820 <_write_r+0x20>)
 8008804:	4604      	mov	r4, r0
 8008806:	4608      	mov	r0, r1
 8008808:	4611      	mov	r1, r2
 800880a:	2200      	movs	r2, #0
 800880c:	602a      	str	r2, [r5, #0]
 800880e:	461a      	mov	r2, r3
 8008810:	f001 fec8 	bl	800a5a4 <_write>
 8008814:	1c43      	adds	r3, r0, #1
 8008816:	d102      	bne.n	800881e <_write_r+0x1e>
 8008818:	682b      	ldr	r3, [r5, #0]
 800881a:	b103      	cbz	r3, 800881e <_write_r+0x1e>
 800881c:	6023      	str	r3, [r4, #0]
 800881e:	bd38      	pop	{r3, r4, r5, pc}
 8008820:	24000bfc 	.word	0x24000bfc

08008824 <__errno>:
 8008824:	4b01      	ldr	r3, [pc, #4]	@ (800882c <__errno+0x8>)
 8008826:	6818      	ldr	r0, [r3, #0]
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	240006a8 	.word	0x240006a8

08008830 <__libc_init_array>:
 8008830:	b570      	push	{r4, r5, r6, lr}
 8008832:	4d0d      	ldr	r5, [pc, #52]	@ (8008868 <__libc_init_array+0x38>)
 8008834:	4c0d      	ldr	r4, [pc, #52]	@ (800886c <__libc_init_array+0x3c>)
 8008836:	1b64      	subs	r4, r4, r5
 8008838:	10a4      	asrs	r4, r4, #2
 800883a:	2600      	movs	r6, #0
 800883c:	42a6      	cmp	r6, r4
 800883e:	d109      	bne.n	8008854 <__libc_init_array+0x24>
 8008840:	4d0b      	ldr	r5, [pc, #44]	@ (8008870 <__libc_init_array+0x40>)
 8008842:	4c0c      	ldr	r4, [pc, #48]	@ (8008874 <__libc_init_array+0x44>)
 8008844:	f001 feb8 	bl	800a5b8 <_init>
 8008848:	1b64      	subs	r4, r4, r5
 800884a:	10a4      	asrs	r4, r4, #2
 800884c:	2600      	movs	r6, #0
 800884e:	42a6      	cmp	r6, r4
 8008850:	d105      	bne.n	800885e <__libc_init_array+0x2e>
 8008852:	bd70      	pop	{r4, r5, r6, pc}
 8008854:	f855 3b04 	ldr.w	r3, [r5], #4
 8008858:	4798      	blx	r3
 800885a:	3601      	adds	r6, #1
 800885c:	e7ee      	b.n	800883c <__libc_init_array+0xc>
 800885e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008862:	4798      	blx	r3
 8008864:	3601      	adds	r6, #1
 8008866:	e7f2      	b.n	800884e <__libc_init_array+0x1e>
 8008868:	0800b0bc 	.word	0x0800b0bc
 800886c:	0800b0bc 	.word	0x0800b0bc
 8008870:	0800b0bc 	.word	0x0800b0bc
 8008874:	0800b0c0 	.word	0x0800b0c0

08008878 <__retarget_lock_init_recursive>:
 8008878:	4770      	bx	lr

0800887a <__retarget_lock_acquire_recursive>:
 800887a:	4770      	bx	lr

0800887c <__retarget_lock_release_recursive>:
 800887c:	4770      	bx	lr

0800887e <memcpy>:
 800887e:	440a      	add	r2, r1
 8008880:	4291      	cmp	r1, r2
 8008882:	f100 33ff 	add.w	r3, r0, #4294967295
 8008886:	d100      	bne.n	800888a <memcpy+0xc>
 8008888:	4770      	bx	lr
 800888a:	b510      	push	{r4, lr}
 800888c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008890:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008894:	4291      	cmp	r1, r2
 8008896:	d1f9      	bne.n	800888c <memcpy+0xe>
 8008898:	bd10      	pop	{r4, pc}
	...

0800889c <__assert_func>:
 800889c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800889e:	4614      	mov	r4, r2
 80088a0:	461a      	mov	r2, r3
 80088a2:	4b09      	ldr	r3, [pc, #36]	@ (80088c8 <__assert_func+0x2c>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4605      	mov	r5, r0
 80088a8:	68d8      	ldr	r0, [r3, #12]
 80088aa:	b954      	cbnz	r4, 80088c2 <__assert_func+0x26>
 80088ac:	4b07      	ldr	r3, [pc, #28]	@ (80088cc <__assert_func+0x30>)
 80088ae:	461c      	mov	r4, r3
 80088b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088b4:	9100      	str	r1, [sp, #0]
 80088b6:	462b      	mov	r3, r5
 80088b8:	4905      	ldr	r1, [pc, #20]	@ (80088d0 <__assert_func+0x34>)
 80088ba:	f001 fd05 	bl	800a2c8 <fiprintf>
 80088be:	f001 fdb3 	bl	800a428 <abort>
 80088c2:	4b04      	ldr	r3, [pc, #16]	@ (80088d4 <__assert_func+0x38>)
 80088c4:	e7f4      	b.n	80088b0 <__assert_func+0x14>
 80088c6:	bf00      	nop
 80088c8:	240006a8 	.word	0x240006a8
 80088cc:	0800adc6 	.word	0x0800adc6
 80088d0:	0800ad98 	.word	0x0800ad98
 80088d4:	0800ad8b 	.word	0x0800ad8b

080088d8 <quorem>:
 80088d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088dc:	6903      	ldr	r3, [r0, #16]
 80088de:	690c      	ldr	r4, [r1, #16]
 80088e0:	42a3      	cmp	r3, r4
 80088e2:	4607      	mov	r7, r0
 80088e4:	db7e      	blt.n	80089e4 <quorem+0x10c>
 80088e6:	3c01      	subs	r4, #1
 80088e8:	f101 0814 	add.w	r8, r1, #20
 80088ec:	00a3      	lsls	r3, r4, #2
 80088ee:	f100 0514 	add.w	r5, r0, #20
 80088f2:	9300      	str	r3, [sp, #0]
 80088f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088f8:	9301      	str	r3, [sp, #4]
 80088fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80088fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008902:	3301      	adds	r3, #1
 8008904:	429a      	cmp	r2, r3
 8008906:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800890a:	fbb2 f6f3 	udiv	r6, r2, r3
 800890e:	d32e      	bcc.n	800896e <quorem+0x96>
 8008910:	f04f 0a00 	mov.w	sl, #0
 8008914:	46c4      	mov	ip, r8
 8008916:	46ae      	mov	lr, r5
 8008918:	46d3      	mov	fp, sl
 800891a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800891e:	b298      	uxth	r0, r3
 8008920:	fb06 a000 	mla	r0, r6, r0, sl
 8008924:	0c02      	lsrs	r2, r0, #16
 8008926:	0c1b      	lsrs	r3, r3, #16
 8008928:	fb06 2303 	mla	r3, r6, r3, r2
 800892c:	f8de 2000 	ldr.w	r2, [lr]
 8008930:	b280      	uxth	r0, r0
 8008932:	b292      	uxth	r2, r2
 8008934:	1a12      	subs	r2, r2, r0
 8008936:	445a      	add	r2, fp
 8008938:	f8de 0000 	ldr.w	r0, [lr]
 800893c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008940:	b29b      	uxth	r3, r3
 8008942:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008946:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800894a:	b292      	uxth	r2, r2
 800894c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008950:	45e1      	cmp	r9, ip
 8008952:	f84e 2b04 	str.w	r2, [lr], #4
 8008956:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800895a:	d2de      	bcs.n	800891a <quorem+0x42>
 800895c:	9b00      	ldr	r3, [sp, #0]
 800895e:	58eb      	ldr	r3, [r5, r3]
 8008960:	b92b      	cbnz	r3, 800896e <quorem+0x96>
 8008962:	9b01      	ldr	r3, [sp, #4]
 8008964:	3b04      	subs	r3, #4
 8008966:	429d      	cmp	r5, r3
 8008968:	461a      	mov	r2, r3
 800896a:	d32f      	bcc.n	80089cc <quorem+0xf4>
 800896c:	613c      	str	r4, [r7, #16]
 800896e:	4638      	mov	r0, r7
 8008970:	f001 f854 	bl	8009a1c <__mcmp>
 8008974:	2800      	cmp	r0, #0
 8008976:	db25      	blt.n	80089c4 <quorem+0xec>
 8008978:	4629      	mov	r1, r5
 800897a:	2000      	movs	r0, #0
 800897c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008980:	f8d1 c000 	ldr.w	ip, [r1]
 8008984:	fa1f fe82 	uxth.w	lr, r2
 8008988:	fa1f f38c 	uxth.w	r3, ip
 800898c:	eba3 030e 	sub.w	r3, r3, lr
 8008990:	4403      	add	r3, r0
 8008992:	0c12      	lsrs	r2, r2, #16
 8008994:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008998:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800899c:	b29b      	uxth	r3, r3
 800899e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089a2:	45c1      	cmp	r9, r8
 80089a4:	f841 3b04 	str.w	r3, [r1], #4
 80089a8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80089ac:	d2e6      	bcs.n	800897c <quorem+0xa4>
 80089ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089b6:	b922      	cbnz	r2, 80089c2 <quorem+0xea>
 80089b8:	3b04      	subs	r3, #4
 80089ba:	429d      	cmp	r5, r3
 80089bc:	461a      	mov	r2, r3
 80089be:	d30b      	bcc.n	80089d8 <quorem+0x100>
 80089c0:	613c      	str	r4, [r7, #16]
 80089c2:	3601      	adds	r6, #1
 80089c4:	4630      	mov	r0, r6
 80089c6:	b003      	add	sp, #12
 80089c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089cc:	6812      	ldr	r2, [r2, #0]
 80089ce:	3b04      	subs	r3, #4
 80089d0:	2a00      	cmp	r2, #0
 80089d2:	d1cb      	bne.n	800896c <quorem+0x94>
 80089d4:	3c01      	subs	r4, #1
 80089d6:	e7c6      	b.n	8008966 <quorem+0x8e>
 80089d8:	6812      	ldr	r2, [r2, #0]
 80089da:	3b04      	subs	r3, #4
 80089dc:	2a00      	cmp	r2, #0
 80089de:	d1ef      	bne.n	80089c0 <quorem+0xe8>
 80089e0:	3c01      	subs	r4, #1
 80089e2:	e7ea      	b.n	80089ba <quorem+0xe2>
 80089e4:	2000      	movs	r0, #0
 80089e6:	e7ee      	b.n	80089c6 <quorem+0xee>

080089e8 <_dtoa_r>:
 80089e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ec:	ed2d 8b02 	vpush	{d8}
 80089f0:	69c7      	ldr	r7, [r0, #28]
 80089f2:	b091      	sub	sp, #68	@ 0x44
 80089f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80089f8:	ec55 4b10 	vmov	r4, r5, d0
 80089fc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80089fe:	9107      	str	r1, [sp, #28]
 8008a00:	4681      	mov	r9, r0
 8008a02:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a04:	930d      	str	r3, [sp, #52]	@ 0x34
 8008a06:	b97f      	cbnz	r7, 8008a28 <_dtoa_r+0x40>
 8008a08:	2010      	movs	r0, #16
 8008a0a:	f7fe fea5 	bl	8007758 <malloc>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	f8c9 001c 	str.w	r0, [r9, #28]
 8008a14:	b920      	cbnz	r0, 8008a20 <_dtoa_r+0x38>
 8008a16:	4ba0      	ldr	r3, [pc, #640]	@ (8008c98 <_dtoa_r+0x2b0>)
 8008a18:	21ef      	movs	r1, #239	@ 0xef
 8008a1a:	48a0      	ldr	r0, [pc, #640]	@ (8008c9c <_dtoa_r+0x2b4>)
 8008a1c:	f7ff ff3e 	bl	800889c <__assert_func>
 8008a20:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008a24:	6007      	str	r7, [r0, #0]
 8008a26:	60c7      	str	r7, [r0, #12]
 8008a28:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008a2c:	6819      	ldr	r1, [r3, #0]
 8008a2e:	b159      	cbz	r1, 8008a48 <_dtoa_r+0x60>
 8008a30:	685a      	ldr	r2, [r3, #4]
 8008a32:	604a      	str	r2, [r1, #4]
 8008a34:	2301      	movs	r3, #1
 8008a36:	4093      	lsls	r3, r2
 8008a38:	608b      	str	r3, [r1, #8]
 8008a3a:	4648      	mov	r0, r9
 8008a3c:	f000 fdb4 	bl	80095a8 <_Bfree>
 8008a40:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008a44:	2200      	movs	r2, #0
 8008a46:	601a      	str	r2, [r3, #0]
 8008a48:	1e2b      	subs	r3, r5, #0
 8008a4a:	bfbb      	ittet	lt
 8008a4c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008a50:	9303      	strlt	r3, [sp, #12]
 8008a52:	2300      	movge	r3, #0
 8008a54:	2201      	movlt	r2, #1
 8008a56:	bfac      	ite	ge
 8008a58:	6033      	strge	r3, [r6, #0]
 8008a5a:	6032      	strlt	r2, [r6, #0]
 8008a5c:	4b90      	ldr	r3, [pc, #576]	@ (8008ca0 <_dtoa_r+0x2b8>)
 8008a5e:	9e03      	ldr	r6, [sp, #12]
 8008a60:	43b3      	bics	r3, r6
 8008a62:	d110      	bne.n	8008a86 <_dtoa_r+0x9e>
 8008a64:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008a66:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008a6a:	6013      	str	r3, [r2, #0]
 8008a6c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8008a70:	4323      	orrs	r3, r4
 8008a72:	f000 84de 	beq.w	8009432 <_dtoa_r+0xa4a>
 8008a76:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008a78:	4f8a      	ldr	r7, [pc, #552]	@ (8008ca4 <_dtoa_r+0x2bc>)
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f000 84e0 	beq.w	8009440 <_dtoa_r+0xa58>
 8008a80:	1cfb      	adds	r3, r7, #3
 8008a82:	f000 bcdb 	b.w	800943c <_dtoa_r+0xa54>
 8008a86:	ed9d 8b02 	vldr	d8, [sp, #8]
 8008a8a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a92:	d10a      	bne.n	8008aaa <_dtoa_r+0xc2>
 8008a94:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008a96:	2301      	movs	r3, #1
 8008a98:	6013      	str	r3, [r2, #0]
 8008a9a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008a9c:	b113      	cbz	r3, 8008aa4 <_dtoa_r+0xbc>
 8008a9e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8008aa0:	4b81      	ldr	r3, [pc, #516]	@ (8008ca8 <_dtoa_r+0x2c0>)
 8008aa2:	6013      	str	r3, [r2, #0]
 8008aa4:	4f81      	ldr	r7, [pc, #516]	@ (8008cac <_dtoa_r+0x2c4>)
 8008aa6:	f000 bccb 	b.w	8009440 <_dtoa_r+0xa58>
 8008aaa:	aa0e      	add	r2, sp, #56	@ 0x38
 8008aac:	a90f      	add	r1, sp, #60	@ 0x3c
 8008aae:	4648      	mov	r0, r9
 8008ab0:	eeb0 0b48 	vmov.f64	d0, d8
 8008ab4:	f001 f862 	bl	8009b7c <__d2b>
 8008ab8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8008abc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008abe:	9001      	str	r0, [sp, #4]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d045      	beq.n	8008b50 <_dtoa_r+0x168>
 8008ac4:	eeb0 7b48 	vmov.f64	d7, d8
 8008ac8:	ee18 1a90 	vmov	r1, s17
 8008acc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008ad0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8008ad4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008ad8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8008adc:	2500      	movs	r5, #0
 8008ade:	ee07 1a90 	vmov	s15, r1
 8008ae2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8008ae6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8008c80 <_dtoa_r+0x298>
 8008aea:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008aee:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8008c88 <_dtoa_r+0x2a0>
 8008af2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008af6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8008c90 <_dtoa_r+0x2a8>
 8008afa:	ee07 3a90 	vmov	s15, r3
 8008afe:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008b02:	eeb0 7b46 	vmov.f64	d7, d6
 8008b06:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008b0a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008b0e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b16:	ee16 8a90 	vmov	r8, s13
 8008b1a:	d508      	bpl.n	8008b2e <_dtoa_r+0x146>
 8008b1c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008b20:	eeb4 6b47 	vcmp.f64	d6, d7
 8008b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b28:	bf18      	it	ne
 8008b2a:	f108 38ff 	addne.w	r8, r8, #4294967295
 8008b2e:	f1b8 0f16 	cmp.w	r8, #22
 8008b32:	d82b      	bhi.n	8008b8c <_dtoa_r+0x1a4>
 8008b34:	495e      	ldr	r1, [pc, #376]	@ (8008cb0 <_dtoa_r+0x2c8>)
 8008b36:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8008b3a:	ed91 7b00 	vldr	d7, [r1]
 8008b3e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b46:	d501      	bpl.n	8008b4c <_dtoa_r+0x164>
 8008b48:	f108 38ff 	add.w	r8, r8, #4294967295
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	e01e      	b.n	8008b8e <_dtoa_r+0x1a6>
 8008b50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b52:	4413      	add	r3, r2
 8008b54:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8008b58:	2920      	cmp	r1, #32
 8008b5a:	bfc1      	itttt	gt
 8008b5c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8008b60:	408e      	lslgt	r6, r1
 8008b62:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8008b66:	fa24 f101 	lsrgt.w	r1, r4, r1
 8008b6a:	bfd6      	itet	le
 8008b6c:	f1c1 0120 	rsble	r1, r1, #32
 8008b70:	4331      	orrgt	r1, r6
 8008b72:	fa04 f101 	lslle.w	r1, r4, r1
 8008b76:	ee07 1a90 	vmov	s15, r1
 8008b7a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	ee17 1a90 	vmov	r1, s15
 8008b84:	2501      	movs	r5, #1
 8008b86:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8008b8a:	e7a8      	b.n	8008ade <_dtoa_r+0xf6>
 8008b8c:	2101      	movs	r1, #1
 8008b8e:	1ad2      	subs	r2, r2, r3
 8008b90:	1e53      	subs	r3, r2, #1
 8008b92:	9306      	str	r3, [sp, #24]
 8008b94:	bf45      	ittet	mi
 8008b96:	f1c2 0301 	rsbmi	r3, r2, #1
 8008b9a:	9305      	strmi	r3, [sp, #20]
 8008b9c:	2300      	movpl	r3, #0
 8008b9e:	2300      	movmi	r3, #0
 8008ba0:	bf4c      	ite	mi
 8008ba2:	9306      	strmi	r3, [sp, #24]
 8008ba4:	9305      	strpl	r3, [sp, #20]
 8008ba6:	f1b8 0f00 	cmp.w	r8, #0
 8008baa:	910c      	str	r1, [sp, #48]	@ 0x30
 8008bac:	db18      	blt.n	8008be0 <_dtoa_r+0x1f8>
 8008bae:	9b06      	ldr	r3, [sp, #24]
 8008bb0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008bb4:	4443      	add	r3, r8
 8008bb6:	9306      	str	r3, [sp, #24]
 8008bb8:	2300      	movs	r3, #0
 8008bba:	9a07      	ldr	r2, [sp, #28]
 8008bbc:	2a09      	cmp	r2, #9
 8008bbe:	d849      	bhi.n	8008c54 <_dtoa_r+0x26c>
 8008bc0:	2a05      	cmp	r2, #5
 8008bc2:	bfc4      	itt	gt
 8008bc4:	3a04      	subgt	r2, #4
 8008bc6:	9207      	strgt	r2, [sp, #28]
 8008bc8:	9a07      	ldr	r2, [sp, #28]
 8008bca:	f1a2 0202 	sub.w	r2, r2, #2
 8008bce:	bfcc      	ite	gt
 8008bd0:	2400      	movgt	r4, #0
 8008bd2:	2401      	movle	r4, #1
 8008bd4:	2a03      	cmp	r2, #3
 8008bd6:	d848      	bhi.n	8008c6a <_dtoa_r+0x282>
 8008bd8:	e8df f002 	tbb	[pc, r2]
 8008bdc:	3a2c2e0b 	.word	0x3a2c2e0b
 8008be0:	9b05      	ldr	r3, [sp, #20]
 8008be2:	2200      	movs	r2, #0
 8008be4:	eba3 0308 	sub.w	r3, r3, r8
 8008be8:	9305      	str	r3, [sp, #20]
 8008bea:	920a      	str	r2, [sp, #40]	@ 0x28
 8008bec:	f1c8 0300 	rsb	r3, r8, #0
 8008bf0:	e7e3      	b.n	8008bba <_dtoa_r+0x1d2>
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	9208      	str	r2, [sp, #32]
 8008bf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bf8:	2a00      	cmp	r2, #0
 8008bfa:	dc39      	bgt.n	8008c70 <_dtoa_r+0x288>
 8008bfc:	f04f 0b01 	mov.w	fp, #1
 8008c00:	46da      	mov	sl, fp
 8008c02:	465a      	mov	r2, fp
 8008c04:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8008c08:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8008c0c:	2100      	movs	r1, #0
 8008c0e:	2004      	movs	r0, #4
 8008c10:	f100 0614 	add.w	r6, r0, #20
 8008c14:	4296      	cmp	r6, r2
 8008c16:	d930      	bls.n	8008c7a <_dtoa_r+0x292>
 8008c18:	6079      	str	r1, [r7, #4]
 8008c1a:	4648      	mov	r0, r9
 8008c1c:	9304      	str	r3, [sp, #16]
 8008c1e:	f000 fc83 	bl	8009528 <_Balloc>
 8008c22:	9b04      	ldr	r3, [sp, #16]
 8008c24:	4607      	mov	r7, r0
 8008c26:	2800      	cmp	r0, #0
 8008c28:	d146      	bne.n	8008cb8 <_dtoa_r+0x2d0>
 8008c2a:	4b22      	ldr	r3, [pc, #136]	@ (8008cb4 <_dtoa_r+0x2cc>)
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008c32:	e6f2      	b.n	8008a1a <_dtoa_r+0x32>
 8008c34:	2201      	movs	r2, #1
 8008c36:	e7dd      	b.n	8008bf4 <_dtoa_r+0x20c>
 8008c38:	2200      	movs	r2, #0
 8008c3a:	9208      	str	r2, [sp, #32]
 8008c3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c3e:	eb08 0b02 	add.w	fp, r8, r2
 8008c42:	f10b 0a01 	add.w	sl, fp, #1
 8008c46:	4652      	mov	r2, sl
 8008c48:	2a01      	cmp	r2, #1
 8008c4a:	bfb8      	it	lt
 8008c4c:	2201      	movlt	r2, #1
 8008c4e:	e7db      	b.n	8008c08 <_dtoa_r+0x220>
 8008c50:	2201      	movs	r2, #1
 8008c52:	e7f2      	b.n	8008c3a <_dtoa_r+0x252>
 8008c54:	2401      	movs	r4, #1
 8008c56:	2200      	movs	r2, #0
 8008c58:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8008c5c:	f04f 3bff 	mov.w	fp, #4294967295
 8008c60:	2100      	movs	r1, #0
 8008c62:	46da      	mov	sl, fp
 8008c64:	2212      	movs	r2, #18
 8008c66:	9109      	str	r1, [sp, #36]	@ 0x24
 8008c68:	e7ce      	b.n	8008c08 <_dtoa_r+0x220>
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	9208      	str	r2, [sp, #32]
 8008c6e:	e7f5      	b.n	8008c5c <_dtoa_r+0x274>
 8008c70:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8008c74:	46da      	mov	sl, fp
 8008c76:	465a      	mov	r2, fp
 8008c78:	e7c6      	b.n	8008c08 <_dtoa_r+0x220>
 8008c7a:	3101      	adds	r1, #1
 8008c7c:	0040      	lsls	r0, r0, #1
 8008c7e:	e7c7      	b.n	8008c10 <_dtoa_r+0x228>
 8008c80:	636f4361 	.word	0x636f4361
 8008c84:	3fd287a7 	.word	0x3fd287a7
 8008c88:	8b60c8b3 	.word	0x8b60c8b3
 8008c8c:	3fc68a28 	.word	0x3fc68a28
 8008c90:	509f79fb 	.word	0x509f79fb
 8008c94:	3fd34413 	.word	0x3fd34413
 8008c98:	0800ace8 	.word	0x0800ace8
 8008c9c:	0800add4 	.word	0x0800add4
 8008ca0:	7ff00000 	.word	0x7ff00000
 8008ca4:	0800add0 	.word	0x0800add0
 8008ca8:	0800ad68 	.word	0x0800ad68
 8008cac:	0800ad67 	.word	0x0800ad67
 8008cb0:	0800aed0 	.word	0x0800aed0
 8008cb4:	0800ae2c 	.word	0x0800ae2c
 8008cb8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8008cbc:	f1ba 0f0e 	cmp.w	sl, #14
 8008cc0:	6010      	str	r0, [r2, #0]
 8008cc2:	d86f      	bhi.n	8008da4 <_dtoa_r+0x3bc>
 8008cc4:	2c00      	cmp	r4, #0
 8008cc6:	d06d      	beq.n	8008da4 <_dtoa_r+0x3bc>
 8008cc8:	f1b8 0f00 	cmp.w	r8, #0
 8008ccc:	f340 80c2 	ble.w	8008e54 <_dtoa_r+0x46c>
 8008cd0:	4aca      	ldr	r2, [pc, #808]	@ (8008ffc <_dtoa_r+0x614>)
 8008cd2:	f008 010f 	and.w	r1, r8, #15
 8008cd6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008cda:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8008cde:	ed92 7b00 	vldr	d7, [r2]
 8008ce2:	ea4f 1128 	mov.w	r1, r8, asr #4
 8008ce6:	f000 80a9 	beq.w	8008e3c <_dtoa_r+0x454>
 8008cea:	4ac5      	ldr	r2, [pc, #788]	@ (8009000 <_dtoa_r+0x618>)
 8008cec:	ed92 6b08 	vldr	d6, [r2, #32]
 8008cf0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8008cf4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008cf8:	f001 010f 	and.w	r1, r1, #15
 8008cfc:	2203      	movs	r2, #3
 8008cfe:	48c0      	ldr	r0, [pc, #768]	@ (8009000 <_dtoa_r+0x618>)
 8008d00:	2900      	cmp	r1, #0
 8008d02:	f040 809d 	bne.w	8008e40 <_dtoa_r+0x458>
 8008d06:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008d0a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008d0e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008d12:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008d14:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d18:	2900      	cmp	r1, #0
 8008d1a:	f000 80c1 	beq.w	8008ea0 <_dtoa_r+0x4b8>
 8008d1e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8008d22:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d2a:	f140 80b9 	bpl.w	8008ea0 <_dtoa_r+0x4b8>
 8008d2e:	f1ba 0f00 	cmp.w	sl, #0
 8008d32:	f000 80b5 	beq.w	8008ea0 <_dtoa_r+0x4b8>
 8008d36:	f1bb 0f00 	cmp.w	fp, #0
 8008d3a:	dd31      	ble.n	8008da0 <_dtoa_r+0x3b8>
 8008d3c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8008d40:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008d44:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008d48:	f108 31ff 	add.w	r1, r8, #4294967295
 8008d4c:	9104      	str	r1, [sp, #16]
 8008d4e:	3201      	adds	r2, #1
 8008d50:	465c      	mov	r4, fp
 8008d52:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008d56:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8008d5a:	ee07 2a90 	vmov	s15, r2
 8008d5e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008d62:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008d66:	ee15 2a90 	vmov	r2, s11
 8008d6a:	ec51 0b15 	vmov	r0, r1, d5
 8008d6e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8008d72:	2c00      	cmp	r4, #0
 8008d74:	f040 8098 	bne.w	8008ea8 <_dtoa_r+0x4c0>
 8008d78:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8008d7c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008d80:	ec41 0b17 	vmov	d7, r0, r1
 8008d84:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d8c:	f300 8261 	bgt.w	8009252 <_dtoa_r+0x86a>
 8008d90:	eeb1 7b47 	vneg.f64	d7, d7
 8008d94:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d9c:	f100 80f5 	bmi.w	8008f8a <_dtoa_r+0x5a2>
 8008da0:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008da4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008da6:	2a00      	cmp	r2, #0
 8008da8:	f2c0 812c 	blt.w	8009004 <_dtoa_r+0x61c>
 8008dac:	f1b8 0f0e 	cmp.w	r8, #14
 8008db0:	f300 8128 	bgt.w	8009004 <_dtoa_r+0x61c>
 8008db4:	4b91      	ldr	r3, [pc, #580]	@ (8008ffc <_dtoa_r+0x614>)
 8008db6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008dba:	ed93 6b00 	vldr	d6, [r3]
 8008dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	da03      	bge.n	8008dcc <_dtoa_r+0x3e4>
 8008dc4:	f1ba 0f00 	cmp.w	sl, #0
 8008dc8:	f340 80d2 	ble.w	8008f70 <_dtoa_r+0x588>
 8008dcc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8008dd0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008dd4:	463e      	mov	r6, r7
 8008dd6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008dda:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008dde:	ee15 3a10 	vmov	r3, s10
 8008de2:	3330      	adds	r3, #48	@ 0x30
 8008de4:	f806 3b01 	strb.w	r3, [r6], #1
 8008de8:	1bf3      	subs	r3, r6, r7
 8008dea:	459a      	cmp	sl, r3
 8008dec:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008df0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008df4:	f040 80f8 	bne.w	8008fe8 <_dtoa_r+0x600>
 8008df8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008dfc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e04:	f300 80dd 	bgt.w	8008fc2 <_dtoa_r+0x5da>
 8008e08:	eeb4 7b46 	vcmp.f64	d7, d6
 8008e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e10:	d104      	bne.n	8008e1c <_dtoa_r+0x434>
 8008e12:	ee15 3a10 	vmov	r3, s10
 8008e16:	07db      	lsls	r3, r3, #31
 8008e18:	f100 80d3 	bmi.w	8008fc2 <_dtoa_r+0x5da>
 8008e1c:	9901      	ldr	r1, [sp, #4]
 8008e1e:	4648      	mov	r0, r9
 8008e20:	f000 fbc2 	bl	80095a8 <_Bfree>
 8008e24:	2300      	movs	r3, #0
 8008e26:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008e28:	7033      	strb	r3, [r6, #0]
 8008e2a:	f108 0301 	add.w	r3, r8, #1
 8008e2e:	6013      	str	r3, [r2, #0]
 8008e30:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	f000 8304 	beq.w	8009440 <_dtoa_r+0xa58>
 8008e38:	601e      	str	r6, [r3, #0]
 8008e3a:	e301      	b.n	8009440 <_dtoa_r+0xa58>
 8008e3c:	2202      	movs	r2, #2
 8008e3e:	e75e      	b.n	8008cfe <_dtoa_r+0x316>
 8008e40:	07cc      	lsls	r4, r1, #31
 8008e42:	d504      	bpl.n	8008e4e <_dtoa_r+0x466>
 8008e44:	ed90 6b00 	vldr	d6, [r0]
 8008e48:	3201      	adds	r2, #1
 8008e4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008e4e:	1049      	asrs	r1, r1, #1
 8008e50:	3008      	adds	r0, #8
 8008e52:	e755      	b.n	8008d00 <_dtoa_r+0x318>
 8008e54:	d022      	beq.n	8008e9c <_dtoa_r+0x4b4>
 8008e56:	f1c8 0100 	rsb	r1, r8, #0
 8008e5a:	4a68      	ldr	r2, [pc, #416]	@ (8008ffc <_dtoa_r+0x614>)
 8008e5c:	f001 000f 	and.w	r0, r1, #15
 8008e60:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008e64:	ed92 7b00 	vldr	d7, [r2]
 8008e68:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008e6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008e70:	4863      	ldr	r0, [pc, #396]	@ (8009000 <_dtoa_r+0x618>)
 8008e72:	1109      	asrs	r1, r1, #4
 8008e74:	2400      	movs	r4, #0
 8008e76:	2202      	movs	r2, #2
 8008e78:	b929      	cbnz	r1, 8008e86 <_dtoa_r+0x49e>
 8008e7a:	2c00      	cmp	r4, #0
 8008e7c:	f43f af49 	beq.w	8008d12 <_dtoa_r+0x32a>
 8008e80:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008e84:	e745      	b.n	8008d12 <_dtoa_r+0x32a>
 8008e86:	07ce      	lsls	r6, r1, #31
 8008e88:	d505      	bpl.n	8008e96 <_dtoa_r+0x4ae>
 8008e8a:	ed90 6b00 	vldr	d6, [r0]
 8008e8e:	3201      	adds	r2, #1
 8008e90:	2401      	movs	r4, #1
 8008e92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008e96:	1049      	asrs	r1, r1, #1
 8008e98:	3008      	adds	r0, #8
 8008e9a:	e7ed      	b.n	8008e78 <_dtoa_r+0x490>
 8008e9c:	2202      	movs	r2, #2
 8008e9e:	e738      	b.n	8008d12 <_dtoa_r+0x32a>
 8008ea0:	f8cd 8010 	str.w	r8, [sp, #16]
 8008ea4:	4654      	mov	r4, sl
 8008ea6:	e754      	b.n	8008d52 <_dtoa_r+0x36a>
 8008ea8:	4a54      	ldr	r2, [pc, #336]	@ (8008ffc <_dtoa_r+0x614>)
 8008eaa:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8008eae:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008eb2:	9a08      	ldr	r2, [sp, #32]
 8008eb4:	ec41 0b17 	vmov	d7, r0, r1
 8008eb8:	443c      	add	r4, r7
 8008eba:	b34a      	cbz	r2, 8008f10 <_dtoa_r+0x528>
 8008ebc:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8008ec0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8008ec4:	463e      	mov	r6, r7
 8008ec6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008eca:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8008ece:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008ed2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008ed6:	ee14 2a90 	vmov	r2, s9
 8008eda:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008ede:	3230      	adds	r2, #48	@ 0x30
 8008ee0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008ee4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eec:	f806 2b01 	strb.w	r2, [r6], #1
 8008ef0:	d438      	bmi.n	8008f64 <_dtoa_r+0x57c>
 8008ef2:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008ef6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008efe:	d462      	bmi.n	8008fc6 <_dtoa_r+0x5de>
 8008f00:	42a6      	cmp	r6, r4
 8008f02:	f43f af4d 	beq.w	8008da0 <_dtoa_r+0x3b8>
 8008f06:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008f0a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008f0e:	e7e0      	b.n	8008ed2 <_dtoa_r+0x4ea>
 8008f10:	4621      	mov	r1, r4
 8008f12:	463e      	mov	r6, r7
 8008f14:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008f18:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8008f1c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008f20:	ee14 2a90 	vmov	r2, s9
 8008f24:	3230      	adds	r2, #48	@ 0x30
 8008f26:	f806 2b01 	strb.w	r2, [r6], #1
 8008f2a:	42a6      	cmp	r6, r4
 8008f2c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008f30:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008f34:	d119      	bne.n	8008f6a <_dtoa_r+0x582>
 8008f36:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8008f3a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008f3e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f46:	dc3e      	bgt.n	8008fc6 <_dtoa_r+0x5de>
 8008f48:	ee35 5b47 	vsub.f64	d5, d5, d7
 8008f4c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8008f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f54:	f57f af24 	bpl.w	8008da0 <_dtoa_r+0x3b8>
 8008f58:	460e      	mov	r6, r1
 8008f5a:	3901      	subs	r1, #1
 8008f5c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008f60:	2b30      	cmp	r3, #48	@ 0x30
 8008f62:	d0f9      	beq.n	8008f58 <_dtoa_r+0x570>
 8008f64:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008f68:	e758      	b.n	8008e1c <_dtoa_r+0x434>
 8008f6a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008f6e:	e7d5      	b.n	8008f1c <_dtoa_r+0x534>
 8008f70:	d10b      	bne.n	8008f8a <_dtoa_r+0x5a2>
 8008f72:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8008f76:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008f7a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f7e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f86:	f2c0 8161 	blt.w	800924c <_dtoa_r+0x864>
 8008f8a:	2400      	movs	r4, #0
 8008f8c:	4625      	mov	r5, r4
 8008f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f90:	43db      	mvns	r3, r3
 8008f92:	9304      	str	r3, [sp, #16]
 8008f94:	463e      	mov	r6, r7
 8008f96:	f04f 0800 	mov.w	r8, #0
 8008f9a:	4621      	mov	r1, r4
 8008f9c:	4648      	mov	r0, r9
 8008f9e:	f000 fb03 	bl	80095a8 <_Bfree>
 8008fa2:	2d00      	cmp	r5, #0
 8008fa4:	d0de      	beq.n	8008f64 <_dtoa_r+0x57c>
 8008fa6:	f1b8 0f00 	cmp.w	r8, #0
 8008faa:	d005      	beq.n	8008fb8 <_dtoa_r+0x5d0>
 8008fac:	45a8      	cmp	r8, r5
 8008fae:	d003      	beq.n	8008fb8 <_dtoa_r+0x5d0>
 8008fb0:	4641      	mov	r1, r8
 8008fb2:	4648      	mov	r0, r9
 8008fb4:	f000 faf8 	bl	80095a8 <_Bfree>
 8008fb8:	4629      	mov	r1, r5
 8008fba:	4648      	mov	r0, r9
 8008fbc:	f000 faf4 	bl	80095a8 <_Bfree>
 8008fc0:	e7d0      	b.n	8008f64 <_dtoa_r+0x57c>
 8008fc2:	f8cd 8010 	str.w	r8, [sp, #16]
 8008fc6:	4633      	mov	r3, r6
 8008fc8:	461e      	mov	r6, r3
 8008fca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fce:	2a39      	cmp	r2, #57	@ 0x39
 8008fd0:	d106      	bne.n	8008fe0 <_dtoa_r+0x5f8>
 8008fd2:	429f      	cmp	r7, r3
 8008fd4:	d1f8      	bne.n	8008fc8 <_dtoa_r+0x5e0>
 8008fd6:	9a04      	ldr	r2, [sp, #16]
 8008fd8:	3201      	adds	r2, #1
 8008fda:	9204      	str	r2, [sp, #16]
 8008fdc:	2230      	movs	r2, #48	@ 0x30
 8008fde:	703a      	strb	r2, [r7, #0]
 8008fe0:	781a      	ldrb	r2, [r3, #0]
 8008fe2:	3201      	adds	r2, #1
 8008fe4:	701a      	strb	r2, [r3, #0]
 8008fe6:	e7bd      	b.n	8008f64 <_dtoa_r+0x57c>
 8008fe8:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008fec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ff4:	f47f aeef 	bne.w	8008dd6 <_dtoa_r+0x3ee>
 8008ff8:	e710      	b.n	8008e1c <_dtoa_r+0x434>
 8008ffa:	bf00      	nop
 8008ffc:	0800aed0 	.word	0x0800aed0
 8009000:	0800aea8 	.word	0x0800aea8
 8009004:	9908      	ldr	r1, [sp, #32]
 8009006:	2900      	cmp	r1, #0
 8009008:	f000 80e3 	beq.w	80091d2 <_dtoa_r+0x7ea>
 800900c:	9907      	ldr	r1, [sp, #28]
 800900e:	2901      	cmp	r1, #1
 8009010:	f300 80c8 	bgt.w	80091a4 <_dtoa_r+0x7bc>
 8009014:	2d00      	cmp	r5, #0
 8009016:	f000 80c1 	beq.w	800919c <_dtoa_r+0x7b4>
 800901a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800901e:	9e05      	ldr	r6, [sp, #20]
 8009020:	461c      	mov	r4, r3
 8009022:	9304      	str	r3, [sp, #16]
 8009024:	9b05      	ldr	r3, [sp, #20]
 8009026:	4413      	add	r3, r2
 8009028:	9305      	str	r3, [sp, #20]
 800902a:	9b06      	ldr	r3, [sp, #24]
 800902c:	2101      	movs	r1, #1
 800902e:	4413      	add	r3, r2
 8009030:	4648      	mov	r0, r9
 8009032:	9306      	str	r3, [sp, #24]
 8009034:	f000 fb6c 	bl	8009710 <__i2b>
 8009038:	9b04      	ldr	r3, [sp, #16]
 800903a:	4605      	mov	r5, r0
 800903c:	b166      	cbz	r6, 8009058 <_dtoa_r+0x670>
 800903e:	9a06      	ldr	r2, [sp, #24]
 8009040:	2a00      	cmp	r2, #0
 8009042:	dd09      	ble.n	8009058 <_dtoa_r+0x670>
 8009044:	42b2      	cmp	r2, r6
 8009046:	9905      	ldr	r1, [sp, #20]
 8009048:	bfa8      	it	ge
 800904a:	4632      	movge	r2, r6
 800904c:	1a89      	subs	r1, r1, r2
 800904e:	9105      	str	r1, [sp, #20]
 8009050:	9906      	ldr	r1, [sp, #24]
 8009052:	1ab6      	subs	r6, r6, r2
 8009054:	1a8a      	subs	r2, r1, r2
 8009056:	9206      	str	r2, [sp, #24]
 8009058:	b1fb      	cbz	r3, 800909a <_dtoa_r+0x6b2>
 800905a:	9a08      	ldr	r2, [sp, #32]
 800905c:	2a00      	cmp	r2, #0
 800905e:	f000 80bc 	beq.w	80091da <_dtoa_r+0x7f2>
 8009062:	b19c      	cbz	r4, 800908c <_dtoa_r+0x6a4>
 8009064:	4629      	mov	r1, r5
 8009066:	4622      	mov	r2, r4
 8009068:	4648      	mov	r0, r9
 800906a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800906c:	f000 fc10 	bl	8009890 <__pow5mult>
 8009070:	9a01      	ldr	r2, [sp, #4]
 8009072:	4601      	mov	r1, r0
 8009074:	4605      	mov	r5, r0
 8009076:	4648      	mov	r0, r9
 8009078:	f000 fb60 	bl	800973c <__multiply>
 800907c:	9901      	ldr	r1, [sp, #4]
 800907e:	9004      	str	r0, [sp, #16]
 8009080:	4648      	mov	r0, r9
 8009082:	f000 fa91 	bl	80095a8 <_Bfree>
 8009086:	9a04      	ldr	r2, [sp, #16]
 8009088:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800908a:	9201      	str	r2, [sp, #4]
 800908c:	1b1a      	subs	r2, r3, r4
 800908e:	d004      	beq.n	800909a <_dtoa_r+0x6b2>
 8009090:	9901      	ldr	r1, [sp, #4]
 8009092:	4648      	mov	r0, r9
 8009094:	f000 fbfc 	bl	8009890 <__pow5mult>
 8009098:	9001      	str	r0, [sp, #4]
 800909a:	2101      	movs	r1, #1
 800909c:	4648      	mov	r0, r9
 800909e:	f000 fb37 	bl	8009710 <__i2b>
 80090a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090a4:	4604      	mov	r4, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f000 81d0 	beq.w	800944c <_dtoa_r+0xa64>
 80090ac:	461a      	mov	r2, r3
 80090ae:	4601      	mov	r1, r0
 80090b0:	4648      	mov	r0, r9
 80090b2:	f000 fbed 	bl	8009890 <__pow5mult>
 80090b6:	9b07      	ldr	r3, [sp, #28]
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	4604      	mov	r4, r0
 80090bc:	f300 8095 	bgt.w	80091ea <_dtoa_r+0x802>
 80090c0:	9b02      	ldr	r3, [sp, #8]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	f040 808b 	bne.w	80091de <_dtoa_r+0x7f6>
 80090c8:	9b03      	ldr	r3, [sp, #12]
 80090ca:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80090ce:	2a00      	cmp	r2, #0
 80090d0:	f040 8087 	bne.w	80091e2 <_dtoa_r+0x7fa>
 80090d4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80090d8:	0d12      	lsrs	r2, r2, #20
 80090da:	0512      	lsls	r2, r2, #20
 80090dc:	2a00      	cmp	r2, #0
 80090de:	f000 8082 	beq.w	80091e6 <_dtoa_r+0x7fe>
 80090e2:	9b05      	ldr	r3, [sp, #20]
 80090e4:	3301      	adds	r3, #1
 80090e6:	9305      	str	r3, [sp, #20]
 80090e8:	9b06      	ldr	r3, [sp, #24]
 80090ea:	3301      	adds	r3, #1
 80090ec:	9306      	str	r3, [sp, #24]
 80090ee:	2301      	movs	r3, #1
 80090f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80090f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f000 81af 	beq.w	8009458 <_dtoa_r+0xa70>
 80090fa:	6922      	ldr	r2, [r4, #16]
 80090fc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009100:	6910      	ldr	r0, [r2, #16]
 8009102:	f000 fab9 	bl	8009678 <__hi0bits>
 8009106:	f1c0 0020 	rsb	r0, r0, #32
 800910a:	9b06      	ldr	r3, [sp, #24]
 800910c:	4418      	add	r0, r3
 800910e:	f010 001f 	ands.w	r0, r0, #31
 8009112:	d076      	beq.n	8009202 <_dtoa_r+0x81a>
 8009114:	f1c0 0220 	rsb	r2, r0, #32
 8009118:	2a04      	cmp	r2, #4
 800911a:	dd69      	ble.n	80091f0 <_dtoa_r+0x808>
 800911c:	9b05      	ldr	r3, [sp, #20]
 800911e:	f1c0 001c 	rsb	r0, r0, #28
 8009122:	4403      	add	r3, r0
 8009124:	9305      	str	r3, [sp, #20]
 8009126:	9b06      	ldr	r3, [sp, #24]
 8009128:	4406      	add	r6, r0
 800912a:	4403      	add	r3, r0
 800912c:	9306      	str	r3, [sp, #24]
 800912e:	9b05      	ldr	r3, [sp, #20]
 8009130:	2b00      	cmp	r3, #0
 8009132:	dd05      	ble.n	8009140 <_dtoa_r+0x758>
 8009134:	9901      	ldr	r1, [sp, #4]
 8009136:	461a      	mov	r2, r3
 8009138:	4648      	mov	r0, r9
 800913a:	f000 fc03 	bl	8009944 <__lshift>
 800913e:	9001      	str	r0, [sp, #4]
 8009140:	9b06      	ldr	r3, [sp, #24]
 8009142:	2b00      	cmp	r3, #0
 8009144:	dd05      	ble.n	8009152 <_dtoa_r+0x76a>
 8009146:	4621      	mov	r1, r4
 8009148:	461a      	mov	r2, r3
 800914a:	4648      	mov	r0, r9
 800914c:	f000 fbfa 	bl	8009944 <__lshift>
 8009150:	4604      	mov	r4, r0
 8009152:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009154:	2b00      	cmp	r3, #0
 8009156:	d056      	beq.n	8009206 <_dtoa_r+0x81e>
 8009158:	9801      	ldr	r0, [sp, #4]
 800915a:	4621      	mov	r1, r4
 800915c:	f000 fc5e 	bl	8009a1c <__mcmp>
 8009160:	2800      	cmp	r0, #0
 8009162:	da50      	bge.n	8009206 <_dtoa_r+0x81e>
 8009164:	f108 33ff 	add.w	r3, r8, #4294967295
 8009168:	9304      	str	r3, [sp, #16]
 800916a:	9901      	ldr	r1, [sp, #4]
 800916c:	2300      	movs	r3, #0
 800916e:	220a      	movs	r2, #10
 8009170:	4648      	mov	r0, r9
 8009172:	f000 fa3b 	bl	80095ec <__multadd>
 8009176:	9b08      	ldr	r3, [sp, #32]
 8009178:	9001      	str	r0, [sp, #4]
 800917a:	2b00      	cmp	r3, #0
 800917c:	f000 816e 	beq.w	800945c <_dtoa_r+0xa74>
 8009180:	4629      	mov	r1, r5
 8009182:	2300      	movs	r3, #0
 8009184:	220a      	movs	r2, #10
 8009186:	4648      	mov	r0, r9
 8009188:	f000 fa30 	bl	80095ec <__multadd>
 800918c:	f1bb 0f00 	cmp.w	fp, #0
 8009190:	4605      	mov	r5, r0
 8009192:	dc64      	bgt.n	800925e <_dtoa_r+0x876>
 8009194:	9b07      	ldr	r3, [sp, #28]
 8009196:	2b02      	cmp	r3, #2
 8009198:	dc3e      	bgt.n	8009218 <_dtoa_r+0x830>
 800919a:	e060      	b.n	800925e <_dtoa_r+0x876>
 800919c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800919e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80091a2:	e73c      	b.n	800901e <_dtoa_r+0x636>
 80091a4:	f10a 34ff 	add.w	r4, sl, #4294967295
 80091a8:	42a3      	cmp	r3, r4
 80091aa:	bfbf      	itttt	lt
 80091ac:	1ae2      	sublt	r2, r4, r3
 80091ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80091b0:	189b      	addlt	r3, r3, r2
 80091b2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80091b4:	bfae      	itee	ge
 80091b6:	1b1c      	subge	r4, r3, r4
 80091b8:	4623      	movlt	r3, r4
 80091ba:	2400      	movlt	r4, #0
 80091bc:	f1ba 0f00 	cmp.w	sl, #0
 80091c0:	bfb5      	itete	lt
 80091c2:	9a05      	ldrlt	r2, [sp, #20]
 80091c4:	9e05      	ldrge	r6, [sp, #20]
 80091c6:	eba2 060a 	sublt.w	r6, r2, sl
 80091ca:	4652      	movge	r2, sl
 80091cc:	bfb8      	it	lt
 80091ce:	2200      	movlt	r2, #0
 80091d0:	e727      	b.n	8009022 <_dtoa_r+0x63a>
 80091d2:	9e05      	ldr	r6, [sp, #20]
 80091d4:	9d08      	ldr	r5, [sp, #32]
 80091d6:	461c      	mov	r4, r3
 80091d8:	e730      	b.n	800903c <_dtoa_r+0x654>
 80091da:	461a      	mov	r2, r3
 80091dc:	e758      	b.n	8009090 <_dtoa_r+0x6a8>
 80091de:	2300      	movs	r3, #0
 80091e0:	e786      	b.n	80090f0 <_dtoa_r+0x708>
 80091e2:	9b02      	ldr	r3, [sp, #8]
 80091e4:	e784      	b.n	80090f0 <_dtoa_r+0x708>
 80091e6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80091e8:	e783      	b.n	80090f2 <_dtoa_r+0x70a>
 80091ea:	2300      	movs	r3, #0
 80091ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091ee:	e784      	b.n	80090fa <_dtoa_r+0x712>
 80091f0:	d09d      	beq.n	800912e <_dtoa_r+0x746>
 80091f2:	9b05      	ldr	r3, [sp, #20]
 80091f4:	321c      	adds	r2, #28
 80091f6:	4413      	add	r3, r2
 80091f8:	9305      	str	r3, [sp, #20]
 80091fa:	9b06      	ldr	r3, [sp, #24]
 80091fc:	4416      	add	r6, r2
 80091fe:	4413      	add	r3, r2
 8009200:	e794      	b.n	800912c <_dtoa_r+0x744>
 8009202:	4602      	mov	r2, r0
 8009204:	e7f5      	b.n	80091f2 <_dtoa_r+0x80a>
 8009206:	f1ba 0f00 	cmp.w	sl, #0
 800920a:	f8cd 8010 	str.w	r8, [sp, #16]
 800920e:	46d3      	mov	fp, sl
 8009210:	dc21      	bgt.n	8009256 <_dtoa_r+0x86e>
 8009212:	9b07      	ldr	r3, [sp, #28]
 8009214:	2b02      	cmp	r3, #2
 8009216:	dd1e      	ble.n	8009256 <_dtoa_r+0x86e>
 8009218:	f1bb 0f00 	cmp.w	fp, #0
 800921c:	f47f aeb7 	bne.w	8008f8e <_dtoa_r+0x5a6>
 8009220:	4621      	mov	r1, r4
 8009222:	465b      	mov	r3, fp
 8009224:	2205      	movs	r2, #5
 8009226:	4648      	mov	r0, r9
 8009228:	f000 f9e0 	bl	80095ec <__multadd>
 800922c:	4601      	mov	r1, r0
 800922e:	4604      	mov	r4, r0
 8009230:	9801      	ldr	r0, [sp, #4]
 8009232:	f000 fbf3 	bl	8009a1c <__mcmp>
 8009236:	2800      	cmp	r0, #0
 8009238:	f77f aea9 	ble.w	8008f8e <_dtoa_r+0x5a6>
 800923c:	463e      	mov	r6, r7
 800923e:	2331      	movs	r3, #49	@ 0x31
 8009240:	f806 3b01 	strb.w	r3, [r6], #1
 8009244:	9b04      	ldr	r3, [sp, #16]
 8009246:	3301      	adds	r3, #1
 8009248:	9304      	str	r3, [sp, #16]
 800924a:	e6a4      	b.n	8008f96 <_dtoa_r+0x5ae>
 800924c:	f8cd 8010 	str.w	r8, [sp, #16]
 8009250:	4654      	mov	r4, sl
 8009252:	4625      	mov	r5, r4
 8009254:	e7f2      	b.n	800923c <_dtoa_r+0x854>
 8009256:	9b08      	ldr	r3, [sp, #32]
 8009258:	2b00      	cmp	r3, #0
 800925a:	f000 8103 	beq.w	8009464 <_dtoa_r+0xa7c>
 800925e:	2e00      	cmp	r6, #0
 8009260:	dd05      	ble.n	800926e <_dtoa_r+0x886>
 8009262:	4629      	mov	r1, r5
 8009264:	4632      	mov	r2, r6
 8009266:	4648      	mov	r0, r9
 8009268:	f000 fb6c 	bl	8009944 <__lshift>
 800926c:	4605      	mov	r5, r0
 800926e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009270:	2b00      	cmp	r3, #0
 8009272:	d058      	beq.n	8009326 <_dtoa_r+0x93e>
 8009274:	6869      	ldr	r1, [r5, #4]
 8009276:	4648      	mov	r0, r9
 8009278:	f000 f956 	bl	8009528 <_Balloc>
 800927c:	4606      	mov	r6, r0
 800927e:	b928      	cbnz	r0, 800928c <_dtoa_r+0x8a4>
 8009280:	4b82      	ldr	r3, [pc, #520]	@ (800948c <_dtoa_r+0xaa4>)
 8009282:	4602      	mov	r2, r0
 8009284:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009288:	f7ff bbc7 	b.w	8008a1a <_dtoa_r+0x32>
 800928c:	692a      	ldr	r2, [r5, #16]
 800928e:	3202      	adds	r2, #2
 8009290:	0092      	lsls	r2, r2, #2
 8009292:	f105 010c 	add.w	r1, r5, #12
 8009296:	300c      	adds	r0, #12
 8009298:	f7ff faf1 	bl	800887e <memcpy>
 800929c:	2201      	movs	r2, #1
 800929e:	4631      	mov	r1, r6
 80092a0:	4648      	mov	r0, r9
 80092a2:	f000 fb4f 	bl	8009944 <__lshift>
 80092a6:	1c7b      	adds	r3, r7, #1
 80092a8:	9305      	str	r3, [sp, #20]
 80092aa:	eb07 030b 	add.w	r3, r7, fp
 80092ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80092b0:	9b02      	ldr	r3, [sp, #8]
 80092b2:	f003 0301 	and.w	r3, r3, #1
 80092b6:	46a8      	mov	r8, r5
 80092b8:	9308      	str	r3, [sp, #32]
 80092ba:	4605      	mov	r5, r0
 80092bc:	9b05      	ldr	r3, [sp, #20]
 80092be:	9801      	ldr	r0, [sp, #4]
 80092c0:	4621      	mov	r1, r4
 80092c2:	f103 3bff 	add.w	fp, r3, #4294967295
 80092c6:	f7ff fb07 	bl	80088d8 <quorem>
 80092ca:	4641      	mov	r1, r8
 80092cc:	9002      	str	r0, [sp, #8]
 80092ce:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80092d2:	9801      	ldr	r0, [sp, #4]
 80092d4:	f000 fba2 	bl	8009a1c <__mcmp>
 80092d8:	462a      	mov	r2, r5
 80092da:	9006      	str	r0, [sp, #24]
 80092dc:	4621      	mov	r1, r4
 80092de:	4648      	mov	r0, r9
 80092e0:	f000 fbb8 	bl	8009a54 <__mdiff>
 80092e4:	68c2      	ldr	r2, [r0, #12]
 80092e6:	4606      	mov	r6, r0
 80092e8:	b9fa      	cbnz	r2, 800932a <_dtoa_r+0x942>
 80092ea:	4601      	mov	r1, r0
 80092ec:	9801      	ldr	r0, [sp, #4]
 80092ee:	f000 fb95 	bl	8009a1c <__mcmp>
 80092f2:	4602      	mov	r2, r0
 80092f4:	4631      	mov	r1, r6
 80092f6:	4648      	mov	r0, r9
 80092f8:	920a      	str	r2, [sp, #40]	@ 0x28
 80092fa:	f000 f955 	bl	80095a8 <_Bfree>
 80092fe:	9b07      	ldr	r3, [sp, #28]
 8009300:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009302:	9e05      	ldr	r6, [sp, #20]
 8009304:	ea43 0102 	orr.w	r1, r3, r2
 8009308:	9b08      	ldr	r3, [sp, #32]
 800930a:	4319      	orrs	r1, r3
 800930c:	d10f      	bne.n	800932e <_dtoa_r+0x946>
 800930e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009312:	d028      	beq.n	8009366 <_dtoa_r+0x97e>
 8009314:	9b06      	ldr	r3, [sp, #24]
 8009316:	2b00      	cmp	r3, #0
 8009318:	dd02      	ble.n	8009320 <_dtoa_r+0x938>
 800931a:	9b02      	ldr	r3, [sp, #8]
 800931c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8009320:	f88b a000 	strb.w	sl, [fp]
 8009324:	e639      	b.n	8008f9a <_dtoa_r+0x5b2>
 8009326:	4628      	mov	r0, r5
 8009328:	e7bd      	b.n	80092a6 <_dtoa_r+0x8be>
 800932a:	2201      	movs	r2, #1
 800932c:	e7e2      	b.n	80092f4 <_dtoa_r+0x90c>
 800932e:	9b06      	ldr	r3, [sp, #24]
 8009330:	2b00      	cmp	r3, #0
 8009332:	db04      	blt.n	800933e <_dtoa_r+0x956>
 8009334:	9907      	ldr	r1, [sp, #28]
 8009336:	430b      	orrs	r3, r1
 8009338:	9908      	ldr	r1, [sp, #32]
 800933a:	430b      	orrs	r3, r1
 800933c:	d120      	bne.n	8009380 <_dtoa_r+0x998>
 800933e:	2a00      	cmp	r2, #0
 8009340:	ddee      	ble.n	8009320 <_dtoa_r+0x938>
 8009342:	9901      	ldr	r1, [sp, #4]
 8009344:	2201      	movs	r2, #1
 8009346:	4648      	mov	r0, r9
 8009348:	f000 fafc 	bl	8009944 <__lshift>
 800934c:	4621      	mov	r1, r4
 800934e:	9001      	str	r0, [sp, #4]
 8009350:	f000 fb64 	bl	8009a1c <__mcmp>
 8009354:	2800      	cmp	r0, #0
 8009356:	dc03      	bgt.n	8009360 <_dtoa_r+0x978>
 8009358:	d1e2      	bne.n	8009320 <_dtoa_r+0x938>
 800935a:	f01a 0f01 	tst.w	sl, #1
 800935e:	d0df      	beq.n	8009320 <_dtoa_r+0x938>
 8009360:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009364:	d1d9      	bne.n	800931a <_dtoa_r+0x932>
 8009366:	2339      	movs	r3, #57	@ 0x39
 8009368:	f88b 3000 	strb.w	r3, [fp]
 800936c:	4633      	mov	r3, r6
 800936e:	461e      	mov	r6, r3
 8009370:	3b01      	subs	r3, #1
 8009372:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009376:	2a39      	cmp	r2, #57	@ 0x39
 8009378:	d053      	beq.n	8009422 <_dtoa_r+0xa3a>
 800937a:	3201      	adds	r2, #1
 800937c:	701a      	strb	r2, [r3, #0]
 800937e:	e60c      	b.n	8008f9a <_dtoa_r+0x5b2>
 8009380:	2a00      	cmp	r2, #0
 8009382:	dd07      	ble.n	8009394 <_dtoa_r+0x9ac>
 8009384:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009388:	d0ed      	beq.n	8009366 <_dtoa_r+0x97e>
 800938a:	f10a 0301 	add.w	r3, sl, #1
 800938e:	f88b 3000 	strb.w	r3, [fp]
 8009392:	e602      	b.n	8008f9a <_dtoa_r+0x5b2>
 8009394:	9b05      	ldr	r3, [sp, #20]
 8009396:	9a05      	ldr	r2, [sp, #20]
 8009398:	f803 ac01 	strb.w	sl, [r3, #-1]
 800939c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800939e:	4293      	cmp	r3, r2
 80093a0:	d029      	beq.n	80093f6 <_dtoa_r+0xa0e>
 80093a2:	9901      	ldr	r1, [sp, #4]
 80093a4:	2300      	movs	r3, #0
 80093a6:	220a      	movs	r2, #10
 80093a8:	4648      	mov	r0, r9
 80093aa:	f000 f91f 	bl	80095ec <__multadd>
 80093ae:	45a8      	cmp	r8, r5
 80093b0:	9001      	str	r0, [sp, #4]
 80093b2:	f04f 0300 	mov.w	r3, #0
 80093b6:	f04f 020a 	mov.w	r2, #10
 80093ba:	4641      	mov	r1, r8
 80093bc:	4648      	mov	r0, r9
 80093be:	d107      	bne.n	80093d0 <_dtoa_r+0x9e8>
 80093c0:	f000 f914 	bl	80095ec <__multadd>
 80093c4:	4680      	mov	r8, r0
 80093c6:	4605      	mov	r5, r0
 80093c8:	9b05      	ldr	r3, [sp, #20]
 80093ca:	3301      	adds	r3, #1
 80093cc:	9305      	str	r3, [sp, #20]
 80093ce:	e775      	b.n	80092bc <_dtoa_r+0x8d4>
 80093d0:	f000 f90c 	bl	80095ec <__multadd>
 80093d4:	4629      	mov	r1, r5
 80093d6:	4680      	mov	r8, r0
 80093d8:	2300      	movs	r3, #0
 80093da:	220a      	movs	r2, #10
 80093dc:	4648      	mov	r0, r9
 80093de:	f000 f905 	bl	80095ec <__multadd>
 80093e2:	4605      	mov	r5, r0
 80093e4:	e7f0      	b.n	80093c8 <_dtoa_r+0x9e0>
 80093e6:	f1bb 0f00 	cmp.w	fp, #0
 80093ea:	bfcc      	ite	gt
 80093ec:	465e      	movgt	r6, fp
 80093ee:	2601      	movle	r6, #1
 80093f0:	443e      	add	r6, r7
 80093f2:	f04f 0800 	mov.w	r8, #0
 80093f6:	9901      	ldr	r1, [sp, #4]
 80093f8:	2201      	movs	r2, #1
 80093fa:	4648      	mov	r0, r9
 80093fc:	f000 faa2 	bl	8009944 <__lshift>
 8009400:	4621      	mov	r1, r4
 8009402:	9001      	str	r0, [sp, #4]
 8009404:	f000 fb0a 	bl	8009a1c <__mcmp>
 8009408:	2800      	cmp	r0, #0
 800940a:	dcaf      	bgt.n	800936c <_dtoa_r+0x984>
 800940c:	d102      	bne.n	8009414 <_dtoa_r+0xa2c>
 800940e:	f01a 0f01 	tst.w	sl, #1
 8009412:	d1ab      	bne.n	800936c <_dtoa_r+0x984>
 8009414:	4633      	mov	r3, r6
 8009416:	461e      	mov	r6, r3
 8009418:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800941c:	2a30      	cmp	r2, #48	@ 0x30
 800941e:	d0fa      	beq.n	8009416 <_dtoa_r+0xa2e>
 8009420:	e5bb      	b.n	8008f9a <_dtoa_r+0x5b2>
 8009422:	429f      	cmp	r7, r3
 8009424:	d1a3      	bne.n	800936e <_dtoa_r+0x986>
 8009426:	9b04      	ldr	r3, [sp, #16]
 8009428:	3301      	adds	r3, #1
 800942a:	9304      	str	r3, [sp, #16]
 800942c:	2331      	movs	r3, #49	@ 0x31
 800942e:	703b      	strb	r3, [r7, #0]
 8009430:	e5b3      	b.n	8008f9a <_dtoa_r+0x5b2>
 8009432:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009434:	4f16      	ldr	r7, [pc, #88]	@ (8009490 <_dtoa_r+0xaa8>)
 8009436:	b11b      	cbz	r3, 8009440 <_dtoa_r+0xa58>
 8009438:	f107 0308 	add.w	r3, r7, #8
 800943c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800943e:	6013      	str	r3, [r2, #0]
 8009440:	4638      	mov	r0, r7
 8009442:	b011      	add	sp, #68	@ 0x44
 8009444:	ecbd 8b02 	vpop	{d8}
 8009448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800944c:	9b07      	ldr	r3, [sp, #28]
 800944e:	2b01      	cmp	r3, #1
 8009450:	f77f ae36 	ble.w	80090c0 <_dtoa_r+0x6d8>
 8009454:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009456:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009458:	2001      	movs	r0, #1
 800945a:	e656      	b.n	800910a <_dtoa_r+0x722>
 800945c:	f1bb 0f00 	cmp.w	fp, #0
 8009460:	f77f aed7 	ble.w	8009212 <_dtoa_r+0x82a>
 8009464:	463e      	mov	r6, r7
 8009466:	9801      	ldr	r0, [sp, #4]
 8009468:	4621      	mov	r1, r4
 800946a:	f7ff fa35 	bl	80088d8 <quorem>
 800946e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8009472:	f806 ab01 	strb.w	sl, [r6], #1
 8009476:	1bf2      	subs	r2, r6, r7
 8009478:	4593      	cmp	fp, r2
 800947a:	ddb4      	ble.n	80093e6 <_dtoa_r+0x9fe>
 800947c:	9901      	ldr	r1, [sp, #4]
 800947e:	2300      	movs	r3, #0
 8009480:	220a      	movs	r2, #10
 8009482:	4648      	mov	r0, r9
 8009484:	f000 f8b2 	bl	80095ec <__multadd>
 8009488:	9001      	str	r0, [sp, #4]
 800948a:	e7ec      	b.n	8009466 <_dtoa_r+0xa7e>
 800948c:	0800ae2c 	.word	0x0800ae2c
 8009490:	0800adc7 	.word	0x0800adc7

08009494 <_free_r>:
 8009494:	b538      	push	{r3, r4, r5, lr}
 8009496:	4605      	mov	r5, r0
 8009498:	2900      	cmp	r1, #0
 800949a:	d041      	beq.n	8009520 <_free_r+0x8c>
 800949c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094a0:	1f0c      	subs	r4, r1, #4
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	bfb8      	it	lt
 80094a6:	18e4      	addlt	r4, r4, r3
 80094a8:	f7fe fa00 	bl	80078ac <__malloc_lock>
 80094ac:	4a1d      	ldr	r2, [pc, #116]	@ (8009524 <_free_r+0x90>)
 80094ae:	6813      	ldr	r3, [r2, #0]
 80094b0:	b933      	cbnz	r3, 80094c0 <_free_r+0x2c>
 80094b2:	6063      	str	r3, [r4, #4]
 80094b4:	6014      	str	r4, [r2, #0]
 80094b6:	4628      	mov	r0, r5
 80094b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094bc:	f7fe b9fc 	b.w	80078b8 <__malloc_unlock>
 80094c0:	42a3      	cmp	r3, r4
 80094c2:	d908      	bls.n	80094d6 <_free_r+0x42>
 80094c4:	6820      	ldr	r0, [r4, #0]
 80094c6:	1821      	adds	r1, r4, r0
 80094c8:	428b      	cmp	r3, r1
 80094ca:	bf01      	itttt	eq
 80094cc:	6819      	ldreq	r1, [r3, #0]
 80094ce:	685b      	ldreq	r3, [r3, #4]
 80094d0:	1809      	addeq	r1, r1, r0
 80094d2:	6021      	streq	r1, [r4, #0]
 80094d4:	e7ed      	b.n	80094b2 <_free_r+0x1e>
 80094d6:	461a      	mov	r2, r3
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	b10b      	cbz	r3, 80094e0 <_free_r+0x4c>
 80094dc:	42a3      	cmp	r3, r4
 80094de:	d9fa      	bls.n	80094d6 <_free_r+0x42>
 80094e0:	6811      	ldr	r1, [r2, #0]
 80094e2:	1850      	adds	r0, r2, r1
 80094e4:	42a0      	cmp	r0, r4
 80094e6:	d10b      	bne.n	8009500 <_free_r+0x6c>
 80094e8:	6820      	ldr	r0, [r4, #0]
 80094ea:	4401      	add	r1, r0
 80094ec:	1850      	adds	r0, r2, r1
 80094ee:	4283      	cmp	r3, r0
 80094f0:	6011      	str	r1, [r2, #0]
 80094f2:	d1e0      	bne.n	80094b6 <_free_r+0x22>
 80094f4:	6818      	ldr	r0, [r3, #0]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	6053      	str	r3, [r2, #4]
 80094fa:	4408      	add	r0, r1
 80094fc:	6010      	str	r0, [r2, #0]
 80094fe:	e7da      	b.n	80094b6 <_free_r+0x22>
 8009500:	d902      	bls.n	8009508 <_free_r+0x74>
 8009502:	230c      	movs	r3, #12
 8009504:	602b      	str	r3, [r5, #0]
 8009506:	e7d6      	b.n	80094b6 <_free_r+0x22>
 8009508:	6820      	ldr	r0, [r4, #0]
 800950a:	1821      	adds	r1, r4, r0
 800950c:	428b      	cmp	r3, r1
 800950e:	bf04      	itt	eq
 8009510:	6819      	ldreq	r1, [r3, #0]
 8009512:	685b      	ldreq	r3, [r3, #4]
 8009514:	6063      	str	r3, [r4, #4]
 8009516:	bf04      	itt	eq
 8009518:	1809      	addeq	r1, r1, r0
 800951a:	6021      	streq	r1, [r4, #0]
 800951c:	6054      	str	r4, [r2, #4]
 800951e:	e7ca      	b.n	80094b6 <_free_r+0x22>
 8009520:	bd38      	pop	{r3, r4, r5, pc}
 8009522:	bf00      	nop
 8009524:	24000abc 	.word	0x24000abc

08009528 <_Balloc>:
 8009528:	b570      	push	{r4, r5, r6, lr}
 800952a:	69c6      	ldr	r6, [r0, #28]
 800952c:	4604      	mov	r4, r0
 800952e:	460d      	mov	r5, r1
 8009530:	b976      	cbnz	r6, 8009550 <_Balloc+0x28>
 8009532:	2010      	movs	r0, #16
 8009534:	f7fe f910 	bl	8007758 <malloc>
 8009538:	4602      	mov	r2, r0
 800953a:	61e0      	str	r0, [r4, #28]
 800953c:	b920      	cbnz	r0, 8009548 <_Balloc+0x20>
 800953e:	4b18      	ldr	r3, [pc, #96]	@ (80095a0 <_Balloc+0x78>)
 8009540:	4818      	ldr	r0, [pc, #96]	@ (80095a4 <_Balloc+0x7c>)
 8009542:	216b      	movs	r1, #107	@ 0x6b
 8009544:	f7ff f9aa 	bl	800889c <__assert_func>
 8009548:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800954c:	6006      	str	r6, [r0, #0]
 800954e:	60c6      	str	r6, [r0, #12]
 8009550:	69e6      	ldr	r6, [r4, #28]
 8009552:	68f3      	ldr	r3, [r6, #12]
 8009554:	b183      	cbz	r3, 8009578 <_Balloc+0x50>
 8009556:	69e3      	ldr	r3, [r4, #28]
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800955e:	b9b8      	cbnz	r0, 8009590 <_Balloc+0x68>
 8009560:	2101      	movs	r1, #1
 8009562:	fa01 f605 	lsl.w	r6, r1, r5
 8009566:	1d72      	adds	r2, r6, #5
 8009568:	0092      	lsls	r2, r2, #2
 800956a:	4620      	mov	r0, r4
 800956c:	f000 ff63 	bl	800a436 <_calloc_r>
 8009570:	b160      	cbz	r0, 800958c <_Balloc+0x64>
 8009572:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009576:	e00e      	b.n	8009596 <_Balloc+0x6e>
 8009578:	2221      	movs	r2, #33	@ 0x21
 800957a:	2104      	movs	r1, #4
 800957c:	4620      	mov	r0, r4
 800957e:	f000 ff5a 	bl	800a436 <_calloc_r>
 8009582:	69e3      	ldr	r3, [r4, #28]
 8009584:	60f0      	str	r0, [r6, #12]
 8009586:	68db      	ldr	r3, [r3, #12]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1e4      	bne.n	8009556 <_Balloc+0x2e>
 800958c:	2000      	movs	r0, #0
 800958e:	bd70      	pop	{r4, r5, r6, pc}
 8009590:	6802      	ldr	r2, [r0, #0]
 8009592:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009596:	2300      	movs	r3, #0
 8009598:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800959c:	e7f7      	b.n	800958e <_Balloc+0x66>
 800959e:	bf00      	nop
 80095a0:	0800ace8 	.word	0x0800ace8
 80095a4:	0800ae3d 	.word	0x0800ae3d

080095a8 <_Bfree>:
 80095a8:	b570      	push	{r4, r5, r6, lr}
 80095aa:	69c6      	ldr	r6, [r0, #28]
 80095ac:	4605      	mov	r5, r0
 80095ae:	460c      	mov	r4, r1
 80095b0:	b976      	cbnz	r6, 80095d0 <_Bfree+0x28>
 80095b2:	2010      	movs	r0, #16
 80095b4:	f7fe f8d0 	bl	8007758 <malloc>
 80095b8:	4602      	mov	r2, r0
 80095ba:	61e8      	str	r0, [r5, #28]
 80095bc:	b920      	cbnz	r0, 80095c8 <_Bfree+0x20>
 80095be:	4b09      	ldr	r3, [pc, #36]	@ (80095e4 <_Bfree+0x3c>)
 80095c0:	4809      	ldr	r0, [pc, #36]	@ (80095e8 <_Bfree+0x40>)
 80095c2:	218f      	movs	r1, #143	@ 0x8f
 80095c4:	f7ff f96a 	bl	800889c <__assert_func>
 80095c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095cc:	6006      	str	r6, [r0, #0]
 80095ce:	60c6      	str	r6, [r0, #12]
 80095d0:	b13c      	cbz	r4, 80095e2 <_Bfree+0x3a>
 80095d2:	69eb      	ldr	r3, [r5, #28]
 80095d4:	6862      	ldr	r2, [r4, #4]
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80095dc:	6021      	str	r1, [r4, #0]
 80095de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80095e2:	bd70      	pop	{r4, r5, r6, pc}
 80095e4:	0800ace8 	.word	0x0800ace8
 80095e8:	0800ae3d 	.word	0x0800ae3d

080095ec <__multadd>:
 80095ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095f0:	690d      	ldr	r5, [r1, #16]
 80095f2:	4607      	mov	r7, r0
 80095f4:	460c      	mov	r4, r1
 80095f6:	461e      	mov	r6, r3
 80095f8:	f101 0c14 	add.w	ip, r1, #20
 80095fc:	2000      	movs	r0, #0
 80095fe:	f8dc 3000 	ldr.w	r3, [ip]
 8009602:	b299      	uxth	r1, r3
 8009604:	fb02 6101 	mla	r1, r2, r1, r6
 8009608:	0c1e      	lsrs	r6, r3, #16
 800960a:	0c0b      	lsrs	r3, r1, #16
 800960c:	fb02 3306 	mla	r3, r2, r6, r3
 8009610:	b289      	uxth	r1, r1
 8009612:	3001      	adds	r0, #1
 8009614:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009618:	4285      	cmp	r5, r0
 800961a:	f84c 1b04 	str.w	r1, [ip], #4
 800961e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009622:	dcec      	bgt.n	80095fe <__multadd+0x12>
 8009624:	b30e      	cbz	r6, 800966a <__multadd+0x7e>
 8009626:	68a3      	ldr	r3, [r4, #8]
 8009628:	42ab      	cmp	r3, r5
 800962a:	dc19      	bgt.n	8009660 <__multadd+0x74>
 800962c:	6861      	ldr	r1, [r4, #4]
 800962e:	4638      	mov	r0, r7
 8009630:	3101      	adds	r1, #1
 8009632:	f7ff ff79 	bl	8009528 <_Balloc>
 8009636:	4680      	mov	r8, r0
 8009638:	b928      	cbnz	r0, 8009646 <__multadd+0x5a>
 800963a:	4602      	mov	r2, r0
 800963c:	4b0c      	ldr	r3, [pc, #48]	@ (8009670 <__multadd+0x84>)
 800963e:	480d      	ldr	r0, [pc, #52]	@ (8009674 <__multadd+0x88>)
 8009640:	21ba      	movs	r1, #186	@ 0xba
 8009642:	f7ff f92b 	bl	800889c <__assert_func>
 8009646:	6922      	ldr	r2, [r4, #16]
 8009648:	3202      	adds	r2, #2
 800964a:	f104 010c 	add.w	r1, r4, #12
 800964e:	0092      	lsls	r2, r2, #2
 8009650:	300c      	adds	r0, #12
 8009652:	f7ff f914 	bl	800887e <memcpy>
 8009656:	4621      	mov	r1, r4
 8009658:	4638      	mov	r0, r7
 800965a:	f7ff ffa5 	bl	80095a8 <_Bfree>
 800965e:	4644      	mov	r4, r8
 8009660:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009664:	3501      	adds	r5, #1
 8009666:	615e      	str	r6, [r3, #20]
 8009668:	6125      	str	r5, [r4, #16]
 800966a:	4620      	mov	r0, r4
 800966c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009670:	0800ae2c 	.word	0x0800ae2c
 8009674:	0800ae3d 	.word	0x0800ae3d

08009678 <__hi0bits>:
 8009678:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800967c:	4603      	mov	r3, r0
 800967e:	bf36      	itet	cc
 8009680:	0403      	lslcc	r3, r0, #16
 8009682:	2000      	movcs	r0, #0
 8009684:	2010      	movcc	r0, #16
 8009686:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800968a:	bf3c      	itt	cc
 800968c:	021b      	lslcc	r3, r3, #8
 800968e:	3008      	addcc	r0, #8
 8009690:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009694:	bf3c      	itt	cc
 8009696:	011b      	lslcc	r3, r3, #4
 8009698:	3004      	addcc	r0, #4
 800969a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800969e:	bf3c      	itt	cc
 80096a0:	009b      	lslcc	r3, r3, #2
 80096a2:	3002      	addcc	r0, #2
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	db05      	blt.n	80096b4 <__hi0bits+0x3c>
 80096a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80096ac:	f100 0001 	add.w	r0, r0, #1
 80096b0:	bf08      	it	eq
 80096b2:	2020      	moveq	r0, #32
 80096b4:	4770      	bx	lr

080096b6 <__lo0bits>:
 80096b6:	6803      	ldr	r3, [r0, #0]
 80096b8:	4602      	mov	r2, r0
 80096ba:	f013 0007 	ands.w	r0, r3, #7
 80096be:	d00b      	beq.n	80096d8 <__lo0bits+0x22>
 80096c0:	07d9      	lsls	r1, r3, #31
 80096c2:	d421      	bmi.n	8009708 <__lo0bits+0x52>
 80096c4:	0798      	lsls	r0, r3, #30
 80096c6:	bf49      	itett	mi
 80096c8:	085b      	lsrmi	r3, r3, #1
 80096ca:	089b      	lsrpl	r3, r3, #2
 80096cc:	2001      	movmi	r0, #1
 80096ce:	6013      	strmi	r3, [r2, #0]
 80096d0:	bf5c      	itt	pl
 80096d2:	6013      	strpl	r3, [r2, #0]
 80096d4:	2002      	movpl	r0, #2
 80096d6:	4770      	bx	lr
 80096d8:	b299      	uxth	r1, r3
 80096da:	b909      	cbnz	r1, 80096e0 <__lo0bits+0x2a>
 80096dc:	0c1b      	lsrs	r3, r3, #16
 80096de:	2010      	movs	r0, #16
 80096e0:	b2d9      	uxtb	r1, r3
 80096e2:	b909      	cbnz	r1, 80096e8 <__lo0bits+0x32>
 80096e4:	3008      	adds	r0, #8
 80096e6:	0a1b      	lsrs	r3, r3, #8
 80096e8:	0719      	lsls	r1, r3, #28
 80096ea:	bf04      	itt	eq
 80096ec:	091b      	lsreq	r3, r3, #4
 80096ee:	3004      	addeq	r0, #4
 80096f0:	0799      	lsls	r1, r3, #30
 80096f2:	bf04      	itt	eq
 80096f4:	089b      	lsreq	r3, r3, #2
 80096f6:	3002      	addeq	r0, #2
 80096f8:	07d9      	lsls	r1, r3, #31
 80096fa:	d403      	bmi.n	8009704 <__lo0bits+0x4e>
 80096fc:	085b      	lsrs	r3, r3, #1
 80096fe:	f100 0001 	add.w	r0, r0, #1
 8009702:	d003      	beq.n	800970c <__lo0bits+0x56>
 8009704:	6013      	str	r3, [r2, #0]
 8009706:	4770      	bx	lr
 8009708:	2000      	movs	r0, #0
 800970a:	4770      	bx	lr
 800970c:	2020      	movs	r0, #32
 800970e:	4770      	bx	lr

08009710 <__i2b>:
 8009710:	b510      	push	{r4, lr}
 8009712:	460c      	mov	r4, r1
 8009714:	2101      	movs	r1, #1
 8009716:	f7ff ff07 	bl	8009528 <_Balloc>
 800971a:	4602      	mov	r2, r0
 800971c:	b928      	cbnz	r0, 800972a <__i2b+0x1a>
 800971e:	4b05      	ldr	r3, [pc, #20]	@ (8009734 <__i2b+0x24>)
 8009720:	4805      	ldr	r0, [pc, #20]	@ (8009738 <__i2b+0x28>)
 8009722:	f240 1145 	movw	r1, #325	@ 0x145
 8009726:	f7ff f8b9 	bl	800889c <__assert_func>
 800972a:	2301      	movs	r3, #1
 800972c:	6144      	str	r4, [r0, #20]
 800972e:	6103      	str	r3, [r0, #16]
 8009730:	bd10      	pop	{r4, pc}
 8009732:	bf00      	nop
 8009734:	0800ae2c 	.word	0x0800ae2c
 8009738:	0800ae3d 	.word	0x0800ae3d

0800973c <__multiply>:
 800973c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009740:	4614      	mov	r4, r2
 8009742:	690a      	ldr	r2, [r1, #16]
 8009744:	6923      	ldr	r3, [r4, #16]
 8009746:	429a      	cmp	r2, r3
 8009748:	bfa8      	it	ge
 800974a:	4623      	movge	r3, r4
 800974c:	460f      	mov	r7, r1
 800974e:	bfa4      	itt	ge
 8009750:	460c      	movge	r4, r1
 8009752:	461f      	movge	r7, r3
 8009754:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009758:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800975c:	68a3      	ldr	r3, [r4, #8]
 800975e:	6861      	ldr	r1, [r4, #4]
 8009760:	eb0a 0609 	add.w	r6, sl, r9
 8009764:	42b3      	cmp	r3, r6
 8009766:	b085      	sub	sp, #20
 8009768:	bfb8      	it	lt
 800976a:	3101      	addlt	r1, #1
 800976c:	f7ff fedc 	bl	8009528 <_Balloc>
 8009770:	b930      	cbnz	r0, 8009780 <__multiply+0x44>
 8009772:	4602      	mov	r2, r0
 8009774:	4b44      	ldr	r3, [pc, #272]	@ (8009888 <__multiply+0x14c>)
 8009776:	4845      	ldr	r0, [pc, #276]	@ (800988c <__multiply+0x150>)
 8009778:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800977c:	f7ff f88e 	bl	800889c <__assert_func>
 8009780:	f100 0514 	add.w	r5, r0, #20
 8009784:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009788:	462b      	mov	r3, r5
 800978a:	2200      	movs	r2, #0
 800978c:	4543      	cmp	r3, r8
 800978e:	d321      	bcc.n	80097d4 <__multiply+0x98>
 8009790:	f107 0114 	add.w	r1, r7, #20
 8009794:	f104 0214 	add.w	r2, r4, #20
 8009798:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800979c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80097a0:	9302      	str	r3, [sp, #8]
 80097a2:	1b13      	subs	r3, r2, r4
 80097a4:	3b15      	subs	r3, #21
 80097a6:	f023 0303 	bic.w	r3, r3, #3
 80097aa:	3304      	adds	r3, #4
 80097ac:	f104 0715 	add.w	r7, r4, #21
 80097b0:	42ba      	cmp	r2, r7
 80097b2:	bf38      	it	cc
 80097b4:	2304      	movcc	r3, #4
 80097b6:	9301      	str	r3, [sp, #4]
 80097b8:	9b02      	ldr	r3, [sp, #8]
 80097ba:	9103      	str	r1, [sp, #12]
 80097bc:	428b      	cmp	r3, r1
 80097be:	d80c      	bhi.n	80097da <__multiply+0x9e>
 80097c0:	2e00      	cmp	r6, #0
 80097c2:	dd03      	ble.n	80097cc <__multiply+0x90>
 80097c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d05b      	beq.n	8009884 <__multiply+0x148>
 80097cc:	6106      	str	r6, [r0, #16]
 80097ce:	b005      	add	sp, #20
 80097d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d4:	f843 2b04 	str.w	r2, [r3], #4
 80097d8:	e7d8      	b.n	800978c <__multiply+0x50>
 80097da:	f8b1 a000 	ldrh.w	sl, [r1]
 80097de:	f1ba 0f00 	cmp.w	sl, #0
 80097e2:	d024      	beq.n	800982e <__multiply+0xf2>
 80097e4:	f104 0e14 	add.w	lr, r4, #20
 80097e8:	46a9      	mov	r9, r5
 80097ea:	f04f 0c00 	mov.w	ip, #0
 80097ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 80097f2:	f8d9 3000 	ldr.w	r3, [r9]
 80097f6:	fa1f fb87 	uxth.w	fp, r7
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	fb0a 330b 	mla	r3, sl, fp, r3
 8009800:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009804:	f8d9 7000 	ldr.w	r7, [r9]
 8009808:	4463      	add	r3, ip
 800980a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800980e:	fb0a c70b 	mla	r7, sl, fp, ip
 8009812:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009816:	b29b      	uxth	r3, r3
 8009818:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800981c:	4572      	cmp	r2, lr
 800981e:	f849 3b04 	str.w	r3, [r9], #4
 8009822:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009826:	d8e2      	bhi.n	80097ee <__multiply+0xb2>
 8009828:	9b01      	ldr	r3, [sp, #4]
 800982a:	f845 c003 	str.w	ip, [r5, r3]
 800982e:	9b03      	ldr	r3, [sp, #12]
 8009830:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009834:	3104      	adds	r1, #4
 8009836:	f1b9 0f00 	cmp.w	r9, #0
 800983a:	d021      	beq.n	8009880 <__multiply+0x144>
 800983c:	682b      	ldr	r3, [r5, #0]
 800983e:	f104 0c14 	add.w	ip, r4, #20
 8009842:	46ae      	mov	lr, r5
 8009844:	f04f 0a00 	mov.w	sl, #0
 8009848:	f8bc b000 	ldrh.w	fp, [ip]
 800984c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009850:	fb09 770b 	mla	r7, r9, fp, r7
 8009854:	4457      	add	r7, sl
 8009856:	b29b      	uxth	r3, r3
 8009858:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800985c:	f84e 3b04 	str.w	r3, [lr], #4
 8009860:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009864:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009868:	f8be 3000 	ldrh.w	r3, [lr]
 800986c:	fb09 330a 	mla	r3, r9, sl, r3
 8009870:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009874:	4562      	cmp	r2, ip
 8009876:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800987a:	d8e5      	bhi.n	8009848 <__multiply+0x10c>
 800987c:	9f01      	ldr	r7, [sp, #4]
 800987e:	51eb      	str	r3, [r5, r7]
 8009880:	3504      	adds	r5, #4
 8009882:	e799      	b.n	80097b8 <__multiply+0x7c>
 8009884:	3e01      	subs	r6, #1
 8009886:	e79b      	b.n	80097c0 <__multiply+0x84>
 8009888:	0800ae2c 	.word	0x0800ae2c
 800988c:	0800ae3d 	.word	0x0800ae3d

08009890 <__pow5mult>:
 8009890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009894:	4615      	mov	r5, r2
 8009896:	f012 0203 	ands.w	r2, r2, #3
 800989a:	4607      	mov	r7, r0
 800989c:	460e      	mov	r6, r1
 800989e:	d007      	beq.n	80098b0 <__pow5mult+0x20>
 80098a0:	4c25      	ldr	r4, [pc, #148]	@ (8009938 <__pow5mult+0xa8>)
 80098a2:	3a01      	subs	r2, #1
 80098a4:	2300      	movs	r3, #0
 80098a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80098aa:	f7ff fe9f 	bl	80095ec <__multadd>
 80098ae:	4606      	mov	r6, r0
 80098b0:	10ad      	asrs	r5, r5, #2
 80098b2:	d03d      	beq.n	8009930 <__pow5mult+0xa0>
 80098b4:	69fc      	ldr	r4, [r7, #28]
 80098b6:	b97c      	cbnz	r4, 80098d8 <__pow5mult+0x48>
 80098b8:	2010      	movs	r0, #16
 80098ba:	f7fd ff4d 	bl	8007758 <malloc>
 80098be:	4602      	mov	r2, r0
 80098c0:	61f8      	str	r0, [r7, #28]
 80098c2:	b928      	cbnz	r0, 80098d0 <__pow5mult+0x40>
 80098c4:	4b1d      	ldr	r3, [pc, #116]	@ (800993c <__pow5mult+0xac>)
 80098c6:	481e      	ldr	r0, [pc, #120]	@ (8009940 <__pow5mult+0xb0>)
 80098c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80098cc:	f7fe ffe6 	bl	800889c <__assert_func>
 80098d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80098d4:	6004      	str	r4, [r0, #0]
 80098d6:	60c4      	str	r4, [r0, #12]
 80098d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80098dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80098e0:	b94c      	cbnz	r4, 80098f6 <__pow5mult+0x66>
 80098e2:	f240 2171 	movw	r1, #625	@ 0x271
 80098e6:	4638      	mov	r0, r7
 80098e8:	f7ff ff12 	bl	8009710 <__i2b>
 80098ec:	2300      	movs	r3, #0
 80098ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80098f2:	4604      	mov	r4, r0
 80098f4:	6003      	str	r3, [r0, #0]
 80098f6:	f04f 0900 	mov.w	r9, #0
 80098fa:	07eb      	lsls	r3, r5, #31
 80098fc:	d50a      	bpl.n	8009914 <__pow5mult+0x84>
 80098fe:	4631      	mov	r1, r6
 8009900:	4622      	mov	r2, r4
 8009902:	4638      	mov	r0, r7
 8009904:	f7ff ff1a 	bl	800973c <__multiply>
 8009908:	4631      	mov	r1, r6
 800990a:	4680      	mov	r8, r0
 800990c:	4638      	mov	r0, r7
 800990e:	f7ff fe4b 	bl	80095a8 <_Bfree>
 8009912:	4646      	mov	r6, r8
 8009914:	106d      	asrs	r5, r5, #1
 8009916:	d00b      	beq.n	8009930 <__pow5mult+0xa0>
 8009918:	6820      	ldr	r0, [r4, #0]
 800991a:	b938      	cbnz	r0, 800992c <__pow5mult+0x9c>
 800991c:	4622      	mov	r2, r4
 800991e:	4621      	mov	r1, r4
 8009920:	4638      	mov	r0, r7
 8009922:	f7ff ff0b 	bl	800973c <__multiply>
 8009926:	6020      	str	r0, [r4, #0]
 8009928:	f8c0 9000 	str.w	r9, [r0]
 800992c:	4604      	mov	r4, r0
 800992e:	e7e4      	b.n	80098fa <__pow5mult+0x6a>
 8009930:	4630      	mov	r0, r6
 8009932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009936:	bf00      	nop
 8009938:	0800ae98 	.word	0x0800ae98
 800993c:	0800ace8 	.word	0x0800ace8
 8009940:	0800ae3d 	.word	0x0800ae3d

08009944 <__lshift>:
 8009944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009948:	460c      	mov	r4, r1
 800994a:	6849      	ldr	r1, [r1, #4]
 800994c:	6923      	ldr	r3, [r4, #16]
 800994e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009952:	68a3      	ldr	r3, [r4, #8]
 8009954:	4607      	mov	r7, r0
 8009956:	4691      	mov	r9, r2
 8009958:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800995c:	f108 0601 	add.w	r6, r8, #1
 8009960:	42b3      	cmp	r3, r6
 8009962:	db0b      	blt.n	800997c <__lshift+0x38>
 8009964:	4638      	mov	r0, r7
 8009966:	f7ff fddf 	bl	8009528 <_Balloc>
 800996a:	4605      	mov	r5, r0
 800996c:	b948      	cbnz	r0, 8009982 <__lshift+0x3e>
 800996e:	4602      	mov	r2, r0
 8009970:	4b28      	ldr	r3, [pc, #160]	@ (8009a14 <__lshift+0xd0>)
 8009972:	4829      	ldr	r0, [pc, #164]	@ (8009a18 <__lshift+0xd4>)
 8009974:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009978:	f7fe ff90 	bl	800889c <__assert_func>
 800997c:	3101      	adds	r1, #1
 800997e:	005b      	lsls	r3, r3, #1
 8009980:	e7ee      	b.n	8009960 <__lshift+0x1c>
 8009982:	2300      	movs	r3, #0
 8009984:	f100 0114 	add.w	r1, r0, #20
 8009988:	f100 0210 	add.w	r2, r0, #16
 800998c:	4618      	mov	r0, r3
 800998e:	4553      	cmp	r3, sl
 8009990:	db33      	blt.n	80099fa <__lshift+0xb6>
 8009992:	6920      	ldr	r0, [r4, #16]
 8009994:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009998:	f104 0314 	add.w	r3, r4, #20
 800999c:	f019 091f 	ands.w	r9, r9, #31
 80099a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80099a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80099a8:	d02b      	beq.n	8009a02 <__lshift+0xbe>
 80099aa:	f1c9 0e20 	rsb	lr, r9, #32
 80099ae:	468a      	mov	sl, r1
 80099b0:	2200      	movs	r2, #0
 80099b2:	6818      	ldr	r0, [r3, #0]
 80099b4:	fa00 f009 	lsl.w	r0, r0, r9
 80099b8:	4310      	orrs	r0, r2
 80099ba:	f84a 0b04 	str.w	r0, [sl], #4
 80099be:	f853 2b04 	ldr.w	r2, [r3], #4
 80099c2:	459c      	cmp	ip, r3
 80099c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80099c8:	d8f3      	bhi.n	80099b2 <__lshift+0x6e>
 80099ca:	ebac 0304 	sub.w	r3, ip, r4
 80099ce:	3b15      	subs	r3, #21
 80099d0:	f023 0303 	bic.w	r3, r3, #3
 80099d4:	3304      	adds	r3, #4
 80099d6:	f104 0015 	add.w	r0, r4, #21
 80099da:	4584      	cmp	ip, r0
 80099dc:	bf38      	it	cc
 80099de:	2304      	movcc	r3, #4
 80099e0:	50ca      	str	r2, [r1, r3]
 80099e2:	b10a      	cbz	r2, 80099e8 <__lshift+0xa4>
 80099e4:	f108 0602 	add.w	r6, r8, #2
 80099e8:	3e01      	subs	r6, #1
 80099ea:	4638      	mov	r0, r7
 80099ec:	612e      	str	r6, [r5, #16]
 80099ee:	4621      	mov	r1, r4
 80099f0:	f7ff fdda 	bl	80095a8 <_Bfree>
 80099f4:	4628      	mov	r0, r5
 80099f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80099fe:	3301      	adds	r3, #1
 8009a00:	e7c5      	b.n	800998e <__lshift+0x4a>
 8009a02:	3904      	subs	r1, #4
 8009a04:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a08:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a0c:	459c      	cmp	ip, r3
 8009a0e:	d8f9      	bhi.n	8009a04 <__lshift+0xc0>
 8009a10:	e7ea      	b.n	80099e8 <__lshift+0xa4>
 8009a12:	bf00      	nop
 8009a14:	0800ae2c 	.word	0x0800ae2c
 8009a18:	0800ae3d 	.word	0x0800ae3d

08009a1c <__mcmp>:
 8009a1c:	690a      	ldr	r2, [r1, #16]
 8009a1e:	4603      	mov	r3, r0
 8009a20:	6900      	ldr	r0, [r0, #16]
 8009a22:	1a80      	subs	r0, r0, r2
 8009a24:	b530      	push	{r4, r5, lr}
 8009a26:	d10e      	bne.n	8009a46 <__mcmp+0x2a>
 8009a28:	3314      	adds	r3, #20
 8009a2a:	3114      	adds	r1, #20
 8009a2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009a30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009a34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009a38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009a3c:	4295      	cmp	r5, r2
 8009a3e:	d003      	beq.n	8009a48 <__mcmp+0x2c>
 8009a40:	d205      	bcs.n	8009a4e <__mcmp+0x32>
 8009a42:	f04f 30ff 	mov.w	r0, #4294967295
 8009a46:	bd30      	pop	{r4, r5, pc}
 8009a48:	42a3      	cmp	r3, r4
 8009a4a:	d3f3      	bcc.n	8009a34 <__mcmp+0x18>
 8009a4c:	e7fb      	b.n	8009a46 <__mcmp+0x2a>
 8009a4e:	2001      	movs	r0, #1
 8009a50:	e7f9      	b.n	8009a46 <__mcmp+0x2a>
	...

08009a54 <__mdiff>:
 8009a54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a58:	4689      	mov	r9, r1
 8009a5a:	4606      	mov	r6, r0
 8009a5c:	4611      	mov	r1, r2
 8009a5e:	4648      	mov	r0, r9
 8009a60:	4614      	mov	r4, r2
 8009a62:	f7ff ffdb 	bl	8009a1c <__mcmp>
 8009a66:	1e05      	subs	r5, r0, #0
 8009a68:	d112      	bne.n	8009a90 <__mdiff+0x3c>
 8009a6a:	4629      	mov	r1, r5
 8009a6c:	4630      	mov	r0, r6
 8009a6e:	f7ff fd5b 	bl	8009528 <_Balloc>
 8009a72:	4602      	mov	r2, r0
 8009a74:	b928      	cbnz	r0, 8009a82 <__mdiff+0x2e>
 8009a76:	4b3f      	ldr	r3, [pc, #252]	@ (8009b74 <__mdiff+0x120>)
 8009a78:	f240 2137 	movw	r1, #567	@ 0x237
 8009a7c:	483e      	ldr	r0, [pc, #248]	@ (8009b78 <__mdiff+0x124>)
 8009a7e:	f7fe ff0d 	bl	800889c <__assert_func>
 8009a82:	2301      	movs	r3, #1
 8009a84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a88:	4610      	mov	r0, r2
 8009a8a:	b003      	add	sp, #12
 8009a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a90:	bfbc      	itt	lt
 8009a92:	464b      	movlt	r3, r9
 8009a94:	46a1      	movlt	r9, r4
 8009a96:	4630      	mov	r0, r6
 8009a98:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009a9c:	bfba      	itte	lt
 8009a9e:	461c      	movlt	r4, r3
 8009aa0:	2501      	movlt	r5, #1
 8009aa2:	2500      	movge	r5, #0
 8009aa4:	f7ff fd40 	bl	8009528 <_Balloc>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	b918      	cbnz	r0, 8009ab4 <__mdiff+0x60>
 8009aac:	4b31      	ldr	r3, [pc, #196]	@ (8009b74 <__mdiff+0x120>)
 8009aae:	f240 2145 	movw	r1, #581	@ 0x245
 8009ab2:	e7e3      	b.n	8009a7c <__mdiff+0x28>
 8009ab4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009ab8:	6926      	ldr	r6, [r4, #16]
 8009aba:	60c5      	str	r5, [r0, #12]
 8009abc:	f109 0310 	add.w	r3, r9, #16
 8009ac0:	f109 0514 	add.w	r5, r9, #20
 8009ac4:	f104 0e14 	add.w	lr, r4, #20
 8009ac8:	f100 0b14 	add.w	fp, r0, #20
 8009acc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009ad0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009ad4:	9301      	str	r3, [sp, #4]
 8009ad6:	46d9      	mov	r9, fp
 8009ad8:	f04f 0c00 	mov.w	ip, #0
 8009adc:	9b01      	ldr	r3, [sp, #4]
 8009ade:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009ae2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009ae6:	9301      	str	r3, [sp, #4]
 8009ae8:	fa1f f38a 	uxth.w	r3, sl
 8009aec:	4619      	mov	r1, r3
 8009aee:	b283      	uxth	r3, r0
 8009af0:	1acb      	subs	r3, r1, r3
 8009af2:	0c00      	lsrs	r0, r0, #16
 8009af4:	4463      	add	r3, ip
 8009af6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009afa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009b04:	4576      	cmp	r6, lr
 8009b06:	f849 3b04 	str.w	r3, [r9], #4
 8009b0a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009b0e:	d8e5      	bhi.n	8009adc <__mdiff+0x88>
 8009b10:	1b33      	subs	r3, r6, r4
 8009b12:	3b15      	subs	r3, #21
 8009b14:	f023 0303 	bic.w	r3, r3, #3
 8009b18:	3415      	adds	r4, #21
 8009b1a:	3304      	adds	r3, #4
 8009b1c:	42a6      	cmp	r6, r4
 8009b1e:	bf38      	it	cc
 8009b20:	2304      	movcc	r3, #4
 8009b22:	441d      	add	r5, r3
 8009b24:	445b      	add	r3, fp
 8009b26:	461e      	mov	r6, r3
 8009b28:	462c      	mov	r4, r5
 8009b2a:	4544      	cmp	r4, r8
 8009b2c:	d30e      	bcc.n	8009b4c <__mdiff+0xf8>
 8009b2e:	f108 0103 	add.w	r1, r8, #3
 8009b32:	1b49      	subs	r1, r1, r5
 8009b34:	f021 0103 	bic.w	r1, r1, #3
 8009b38:	3d03      	subs	r5, #3
 8009b3a:	45a8      	cmp	r8, r5
 8009b3c:	bf38      	it	cc
 8009b3e:	2100      	movcc	r1, #0
 8009b40:	440b      	add	r3, r1
 8009b42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009b46:	b191      	cbz	r1, 8009b6e <__mdiff+0x11a>
 8009b48:	6117      	str	r7, [r2, #16]
 8009b4a:	e79d      	b.n	8009a88 <__mdiff+0x34>
 8009b4c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009b50:	46e6      	mov	lr, ip
 8009b52:	0c08      	lsrs	r0, r1, #16
 8009b54:	fa1c fc81 	uxtah	ip, ip, r1
 8009b58:	4471      	add	r1, lr
 8009b5a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009b5e:	b289      	uxth	r1, r1
 8009b60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009b64:	f846 1b04 	str.w	r1, [r6], #4
 8009b68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009b6c:	e7dd      	b.n	8009b2a <__mdiff+0xd6>
 8009b6e:	3f01      	subs	r7, #1
 8009b70:	e7e7      	b.n	8009b42 <__mdiff+0xee>
 8009b72:	bf00      	nop
 8009b74:	0800ae2c 	.word	0x0800ae2c
 8009b78:	0800ae3d 	.word	0x0800ae3d

08009b7c <__d2b>:
 8009b7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009b80:	460f      	mov	r7, r1
 8009b82:	2101      	movs	r1, #1
 8009b84:	ec59 8b10 	vmov	r8, r9, d0
 8009b88:	4616      	mov	r6, r2
 8009b8a:	f7ff fccd 	bl	8009528 <_Balloc>
 8009b8e:	4604      	mov	r4, r0
 8009b90:	b930      	cbnz	r0, 8009ba0 <__d2b+0x24>
 8009b92:	4602      	mov	r2, r0
 8009b94:	4b23      	ldr	r3, [pc, #140]	@ (8009c24 <__d2b+0xa8>)
 8009b96:	4824      	ldr	r0, [pc, #144]	@ (8009c28 <__d2b+0xac>)
 8009b98:	f240 310f 	movw	r1, #783	@ 0x30f
 8009b9c:	f7fe fe7e 	bl	800889c <__assert_func>
 8009ba0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009ba4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ba8:	b10d      	cbz	r5, 8009bae <__d2b+0x32>
 8009baa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009bae:	9301      	str	r3, [sp, #4]
 8009bb0:	f1b8 0300 	subs.w	r3, r8, #0
 8009bb4:	d023      	beq.n	8009bfe <__d2b+0x82>
 8009bb6:	4668      	mov	r0, sp
 8009bb8:	9300      	str	r3, [sp, #0]
 8009bba:	f7ff fd7c 	bl	80096b6 <__lo0bits>
 8009bbe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009bc2:	b1d0      	cbz	r0, 8009bfa <__d2b+0x7e>
 8009bc4:	f1c0 0320 	rsb	r3, r0, #32
 8009bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8009bcc:	430b      	orrs	r3, r1
 8009bce:	40c2      	lsrs	r2, r0
 8009bd0:	6163      	str	r3, [r4, #20]
 8009bd2:	9201      	str	r2, [sp, #4]
 8009bd4:	9b01      	ldr	r3, [sp, #4]
 8009bd6:	61a3      	str	r3, [r4, #24]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	bf0c      	ite	eq
 8009bdc:	2201      	moveq	r2, #1
 8009bde:	2202      	movne	r2, #2
 8009be0:	6122      	str	r2, [r4, #16]
 8009be2:	b1a5      	cbz	r5, 8009c0e <__d2b+0x92>
 8009be4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009be8:	4405      	add	r5, r0
 8009bea:	603d      	str	r5, [r7, #0]
 8009bec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009bf0:	6030      	str	r0, [r6, #0]
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	b003      	add	sp, #12
 8009bf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bfa:	6161      	str	r1, [r4, #20]
 8009bfc:	e7ea      	b.n	8009bd4 <__d2b+0x58>
 8009bfe:	a801      	add	r0, sp, #4
 8009c00:	f7ff fd59 	bl	80096b6 <__lo0bits>
 8009c04:	9b01      	ldr	r3, [sp, #4]
 8009c06:	6163      	str	r3, [r4, #20]
 8009c08:	3020      	adds	r0, #32
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	e7e8      	b.n	8009be0 <__d2b+0x64>
 8009c0e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c12:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009c16:	6038      	str	r0, [r7, #0]
 8009c18:	6918      	ldr	r0, [r3, #16]
 8009c1a:	f7ff fd2d 	bl	8009678 <__hi0bits>
 8009c1e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009c22:	e7e5      	b.n	8009bf0 <__d2b+0x74>
 8009c24:	0800ae2c 	.word	0x0800ae2c
 8009c28:	0800ae3d 	.word	0x0800ae3d

08009c2c <_malloc_usable_size_r>:
 8009c2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c30:	1f18      	subs	r0, r3, #4
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	bfbc      	itt	lt
 8009c36:	580b      	ldrlt	r3, [r1, r0]
 8009c38:	18c0      	addlt	r0, r0, r3
 8009c3a:	4770      	bx	lr

08009c3c <__ssputs_r>:
 8009c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c40:	688e      	ldr	r6, [r1, #8]
 8009c42:	461f      	mov	r7, r3
 8009c44:	42be      	cmp	r6, r7
 8009c46:	680b      	ldr	r3, [r1, #0]
 8009c48:	4682      	mov	sl, r0
 8009c4a:	460c      	mov	r4, r1
 8009c4c:	4690      	mov	r8, r2
 8009c4e:	d82d      	bhi.n	8009cac <__ssputs_r+0x70>
 8009c50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009c58:	d026      	beq.n	8009ca8 <__ssputs_r+0x6c>
 8009c5a:	6965      	ldr	r5, [r4, #20]
 8009c5c:	6909      	ldr	r1, [r1, #16]
 8009c5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c62:	eba3 0901 	sub.w	r9, r3, r1
 8009c66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c6a:	1c7b      	adds	r3, r7, #1
 8009c6c:	444b      	add	r3, r9
 8009c6e:	106d      	asrs	r5, r5, #1
 8009c70:	429d      	cmp	r5, r3
 8009c72:	bf38      	it	cc
 8009c74:	461d      	movcc	r5, r3
 8009c76:	0553      	lsls	r3, r2, #21
 8009c78:	d527      	bpl.n	8009cca <__ssputs_r+0x8e>
 8009c7a:	4629      	mov	r1, r5
 8009c7c:	f7fd fd96 	bl	80077ac <_malloc_r>
 8009c80:	4606      	mov	r6, r0
 8009c82:	b360      	cbz	r0, 8009cde <__ssputs_r+0xa2>
 8009c84:	6921      	ldr	r1, [r4, #16]
 8009c86:	464a      	mov	r2, r9
 8009c88:	f7fe fdf9 	bl	800887e <memcpy>
 8009c8c:	89a3      	ldrh	r3, [r4, #12]
 8009c8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009c92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c96:	81a3      	strh	r3, [r4, #12]
 8009c98:	6126      	str	r6, [r4, #16]
 8009c9a:	6165      	str	r5, [r4, #20]
 8009c9c:	444e      	add	r6, r9
 8009c9e:	eba5 0509 	sub.w	r5, r5, r9
 8009ca2:	6026      	str	r6, [r4, #0]
 8009ca4:	60a5      	str	r5, [r4, #8]
 8009ca6:	463e      	mov	r6, r7
 8009ca8:	42be      	cmp	r6, r7
 8009caa:	d900      	bls.n	8009cae <__ssputs_r+0x72>
 8009cac:	463e      	mov	r6, r7
 8009cae:	6820      	ldr	r0, [r4, #0]
 8009cb0:	4632      	mov	r2, r6
 8009cb2:	4641      	mov	r1, r8
 8009cb4:	f000 fb7c 	bl	800a3b0 <memmove>
 8009cb8:	68a3      	ldr	r3, [r4, #8]
 8009cba:	1b9b      	subs	r3, r3, r6
 8009cbc:	60a3      	str	r3, [r4, #8]
 8009cbe:	6823      	ldr	r3, [r4, #0]
 8009cc0:	4433      	add	r3, r6
 8009cc2:	6023      	str	r3, [r4, #0]
 8009cc4:	2000      	movs	r0, #0
 8009cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cca:	462a      	mov	r2, r5
 8009ccc:	f7fd fe66 	bl	800799c <_realloc_r>
 8009cd0:	4606      	mov	r6, r0
 8009cd2:	2800      	cmp	r0, #0
 8009cd4:	d1e0      	bne.n	8009c98 <__ssputs_r+0x5c>
 8009cd6:	6921      	ldr	r1, [r4, #16]
 8009cd8:	4650      	mov	r0, sl
 8009cda:	f7ff fbdb 	bl	8009494 <_free_r>
 8009cde:	230c      	movs	r3, #12
 8009ce0:	f8ca 3000 	str.w	r3, [sl]
 8009ce4:	89a3      	ldrh	r3, [r4, #12]
 8009ce6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cea:	81a3      	strh	r3, [r4, #12]
 8009cec:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf0:	e7e9      	b.n	8009cc6 <__ssputs_r+0x8a>
	...

08009cf4 <_svfiprintf_r>:
 8009cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf8:	4698      	mov	r8, r3
 8009cfa:	898b      	ldrh	r3, [r1, #12]
 8009cfc:	061b      	lsls	r3, r3, #24
 8009cfe:	b09d      	sub	sp, #116	@ 0x74
 8009d00:	4607      	mov	r7, r0
 8009d02:	460d      	mov	r5, r1
 8009d04:	4614      	mov	r4, r2
 8009d06:	d510      	bpl.n	8009d2a <_svfiprintf_r+0x36>
 8009d08:	690b      	ldr	r3, [r1, #16]
 8009d0a:	b973      	cbnz	r3, 8009d2a <_svfiprintf_r+0x36>
 8009d0c:	2140      	movs	r1, #64	@ 0x40
 8009d0e:	f7fd fd4d 	bl	80077ac <_malloc_r>
 8009d12:	6028      	str	r0, [r5, #0]
 8009d14:	6128      	str	r0, [r5, #16]
 8009d16:	b930      	cbnz	r0, 8009d26 <_svfiprintf_r+0x32>
 8009d18:	230c      	movs	r3, #12
 8009d1a:	603b      	str	r3, [r7, #0]
 8009d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d20:	b01d      	add	sp, #116	@ 0x74
 8009d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d26:	2340      	movs	r3, #64	@ 0x40
 8009d28:	616b      	str	r3, [r5, #20]
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d2e:	2320      	movs	r3, #32
 8009d30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d34:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d38:	2330      	movs	r3, #48	@ 0x30
 8009d3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009ed8 <_svfiprintf_r+0x1e4>
 8009d3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d42:	f04f 0901 	mov.w	r9, #1
 8009d46:	4623      	mov	r3, r4
 8009d48:	469a      	mov	sl, r3
 8009d4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d4e:	b10a      	cbz	r2, 8009d54 <_svfiprintf_r+0x60>
 8009d50:	2a25      	cmp	r2, #37	@ 0x25
 8009d52:	d1f9      	bne.n	8009d48 <_svfiprintf_r+0x54>
 8009d54:	ebba 0b04 	subs.w	fp, sl, r4
 8009d58:	d00b      	beq.n	8009d72 <_svfiprintf_r+0x7e>
 8009d5a:	465b      	mov	r3, fp
 8009d5c:	4622      	mov	r2, r4
 8009d5e:	4629      	mov	r1, r5
 8009d60:	4638      	mov	r0, r7
 8009d62:	f7ff ff6b 	bl	8009c3c <__ssputs_r>
 8009d66:	3001      	adds	r0, #1
 8009d68:	f000 80a7 	beq.w	8009eba <_svfiprintf_r+0x1c6>
 8009d6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d6e:	445a      	add	r2, fp
 8009d70:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d72:	f89a 3000 	ldrb.w	r3, [sl]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	f000 809f 	beq.w	8009eba <_svfiprintf_r+0x1c6>
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d86:	f10a 0a01 	add.w	sl, sl, #1
 8009d8a:	9304      	str	r3, [sp, #16]
 8009d8c:	9307      	str	r3, [sp, #28]
 8009d8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d92:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d94:	4654      	mov	r4, sl
 8009d96:	2205      	movs	r2, #5
 8009d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d9c:	484e      	ldr	r0, [pc, #312]	@ (8009ed8 <_svfiprintf_r+0x1e4>)
 8009d9e:	f7f6 fa9f 	bl	80002e0 <memchr>
 8009da2:	9a04      	ldr	r2, [sp, #16]
 8009da4:	b9d8      	cbnz	r0, 8009dde <_svfiprintf_r+0xea>
 8009da6:	06d0      	lsls	r0, r2, #27
 8009da8:	bf44      	itt	mi
 8009daa:	2320      	movmi	r3, #32
 8009dac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009db0:	0711      	lsls	r1, r2, #28
 8009db2:	bf44      	itt	mi
 8009db4:	232b      	movmi	r3, #43	@ 0x2b
 8009db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009dba:	f89a 3000 	ldrb.w	r3, [sl]
 8009dbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dc0:	d015      	beq.n	8009dee <_svfiprintf_r+0xfa>
 8009dc2:	9a07      	ldr	r2, [sp, #28]
 8009dc4:	4654      	mov	r4, sl
 8009dc6:	2000      	movs	r0, #0
 8009dc8:	f04f 0c0a 	mov.w	ip, #10
 8009dcc:	4621      	mov	r1, r4
 8009dce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dd2:	3b30      	subs	r3, #48	@ 0x30
 8009dd4:	2b09      	cmp	r3, #9
 8009dd6:	d94b      	bls.n	8009e70 <_svfiprintf_r+0x17c>
 8009dd8:	b1b0      	cbz	r0, 8009e08 <_svfiprintf_r+0x114>
 8009dda:	9207      	str	r2, [sp, #28]
 8009ddc:	e014      	b.n	8009e08 <_svfiprintf_r+0x114>
 8009dde:	eba0 0308 	sub.w	r3, r0, r8
 8009de2:	fa09 f303 	lsl.w	r3, r9, r3
 8009de6:	4313      	orrs	r3, r2
 8009de8:	9304      	str	r3, [sp, #16]
 8009dea:	46a2      	mov	sl, r4
 8009dec:	e7d2      	b.n	8009d94 <_svfiprintf_r+0xa0>
 8009dee:	9b03      	ldr	r3, [sp, #12]
 8009df0:	1d19      	adds	r1, r3, #4
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	9103      	str	r1, [sp, #12]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	bfbb      	ittet	lt
 8009dfa:	425b      	neglt	r3, r3
 8009dfc:	f042 0202 	orrlt.w	r2, r2, #2
 8009e00:	9307      	strge	r3, [sp, #28]
 8009e02:	9307      	strlt	r3, [sp, #28]
 8009e04:	bfb8      	it	lt
 8009e06:	9204      	strlt	r2, [sp, #16]
 8009e08:	7823      	ldrb	r3, [r4, #0]
 8009e0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e0c:	d10a      	bne.n	8009e24 <_svfiprintf_r+0x130>
 8009e0e:	7863      	ldrb	r3, [r4, #1]
 8009e10:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e12:	d132      	bne.n	8009e7a <_svfiprintf_r+0x186>
 8009e14:	9b03      	ldr	r3, [sp, #12]
 8009e16:	1d1a      	adds	r2, r3, #4
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	9203      	str	r2, [sp, #12]
 8009e1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e20:	3402      	adds	r4, #2
 8009e22:	9305      	str	r3, [sp, #20]
 8009e24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009ee8 <_svfiprintf_r+0x1f4>
 8009e28:	7821      	ldrb	r1, [r4, #0]
 8009e2a:	2203      	movs	r2, #3
 8009e2c:	4650      	mov	r0, sl
 8009e2e:	f7f6 fa57 	bl	80002e0 <memchr>
 8009e32:	b138      	cbz	r0, 8009e44 <_svfiprintf_r+0x150>
 8009e34:	9b04      	ldr	r3, [sp, #16]
 8009e36:	eba0 000a 	sub.w	r0, r0, sl
 8009e3a:	2240      	movs	r2, #64	@ 0x40
 8009e3c:	4082      	lsls	r2, r0
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	3401      	adds	r4, #1
 8009e42:	9304      	str	r3, [sp, #16]
 8009e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e48:	4824      	ldr	r0, [pc, #144]	@ (8009edc <_svfiprintf_r+0x1e8>)
 8009e4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e4e:	2206      	movs	r2, #6
 8009e50:	f7f6 fa46 	bl	80002e0 <memchr>
 8009e54:	2800      	cmp	r0, #0
 8009e56:	d036      	beq.n	8009ec6 <_svfiprintf_r+0x1d2>
 8009e58:	4b21      	ldr	r3, [pc, #132]	@ (8009ee0 <_svfiprintf_r+0x1ec>)
 8009e5a:	bb1b      	cbnz	r3, 8009ea4 <_svfiprintf_r+0x1b0>
 8009e5c:	9b03      	ldr	r3, [sp, #12]
 8009e5e:	3307      	adds	r3, #7
 8009e60:	f023 0307 	bic.w	r3, r3, #7
 8009e64:	3308      	adds	r3, #8
 8009e66:	9303      	str	r3, [sp, #12]
 8009e68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e6a:	4433      	add	r3, r6
 8009e6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e6e:	e76a      	b.n	8009d46 <_svfiprintf_r+0x52>
 8009e70:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e74:	460c      	mov	r4, r1
 8009e76:	2001      	movs	r0, #1
 8009e78:	e7a8      	b.n	8009dcc <_svfiprintf_r+0xd8>
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	3401      	adds	r4, #1
 8009e7e:	9305      	str	r3, [sp, #20]
 8009e80:	4619      	mov	r1, r3
 8009e82:	f04f 0c0a 	mov.w	ip, #10
 8009e86:	4620      	mov	r0, r4
 8009e88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e8c:	3a30      	subs	r2, #48	@ 0x30
 8009e8e:	2a09      	cmp	r2, #9
 8009e90:	d903      	bls.n	8009e9a <_svfiprintf_r+0x1a6>
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d0c6      	beq.n	8009e24 <_svfiprintf_r+0x130>
 8009e96:	9105      	str	r1, [sp, #20]
 8009e98:	e7c4      	b.n	8009e24 <_svfiprintf_r+0x130>
 8009e9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e9e:	4604      	mov	r4, r0
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e7f0      	b.n	8009e86 <_svfiprintf_r+0x192>
 8009ea4:	ab03      	add	r3, sp, #12
 8009ea6:	9300      	str	r3, [sp, #0]
 8009ea8:	462a      	mov	r2, r5
 8009eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8009ee4 <_svfiprintf_r+0x1f0>)
 8009eac:	a904      	add	r1, sp, #16
 8009eae:	4638      	mov	r0, r7
 8009eb0:	f7fd fe32 	bl	8007b18 <_printf_float>
 8009eb4:	1c42      	adds	r2, r0, #1
 8009eb6:	4606      	mov	r6, r0
 8009eb8:	d1d6      	bne.n	8009e68 <_svfiprintf_r+0x174>
 8009eba:	89ab      	ldrh	r3, [r5, #12]
 8009ebc:	065b      	lsls	r3, r3, #25
 8009ebe:	f53f af2d 	bmi.w	8009d1c <_svfiprintf_r+0x28>
 8009ec2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ec4:	e72c      	b.n	8009d20 <_svfiprintf_r+0x2c>
 8009ec6:	ab03      	add	r3, sp, #12
 8009ec8:	9300      	str	r3, [sp, #0]
 8009eca:	462a      	mov	r2, r5
 8009ecc:	4b05      	ldr	r3, [pc, #20]	@ (8009ee4 <_svfiprintf_r+0x1f0>)
 8009ece:	a904      	add	r1, sp, #16
 8009ed0:	4638      	mov	r0, r7
 8009ed2:	f7fe f8a9 	bl	8008028 <_printf_i>
 8009ed6:	e7ed      	b.n	8009eb4 <_svfiprintf_r+0x1c0>
 8009ed8:	0800af98 	.word	0x0800af98
 8009edc:	0800afa2 	.word	0x0800afa2
 8009ee0:	08007b19 	.word	0x08007b19
 8009ee4:	08009c3d 	.word	0x08009c3d
 8009ee8:	0800af9e 	.word	0x0800af9e

08009eec <__sfputc_r>:
 8009eec:	6893      	ldr	r3, [r2, #8]
 8009eee:	3b01      	subs	r3, #1
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	b410      	push	{r4}
 8009ef4:	6093      	str	r3, [r2, #8]
 8009ef6:	da08      	bge.n	8009f0a <__sfputc_r+0x1e>
 8009ef8:	6994      	ldr	r4, [r2, #24]
 8009efa:	42a3      	cmp	r3, r4
 8009efc:	db01      	blt.n	8009f02 <__sfputc_r+0x16>
 8009efe:	290a      	cmp	r1, #10
 8009f00:	d103      	bne.n	8009f0a <__sfputc_r+0x1e>
 8009f02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f06:	f7fe bb58 	b.w	80085ba <__swbuf_r>
 8009f0a:	6813      	ldr	r3, [r2, #0]
 8009f0c:	1c58      	adds	r0, r3, #1
 8009f0e:	6010      	str	r0, [r2, #0]
 8009f10:	7019      	strb	r1, [r3, #0]
 8009f12:	4608      	mov	r0, r1
 8009f14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f18:	4770      	bx	lr

08009f1a <__sfputs_r>:
 8009f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1c:	4606      	mov	r6, r0
 8009f1e:	460f      	mov	r7, r1
 8009f20:	4614      	mov	r4, r2
 8009f22:	18d5      	adds	r5, r2, r3
 8009f24:	42ac      	cmp	r4, r5
 8009f26:	d101      	bne.n	8009f2c <__sfputs_r+0x12>
 8009f28:	2000      	movs	r0, #0
 8009f2a:	e007      	b.n	8009f3c <__sfputs_r+0x22>
 8009f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f30:	463a      	mov	r2, r7
 8009f32:	4630      	mov	r0, r6
 8009f34:	f7ff ffda 	bl	8009eec <__sfputc_r>
 8009f38:	1c43      	adds	r3, r0, #1
 8009f3a:	d1f3      	bne.n	8009f24 <__sfputs_r+0xa>
 8009f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f40 <_vfiprintf_r>:
 8009f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f44:	460d      	mov	r5, r1
 8009f46:	b09d      	sub	sp, #116	@ 0x74
 8009f48:	4614      	mov	r4, r2
 8009f4a:	4698      	mov	r8, r3
 8009f4c:	4606      	mov	r6, r0
 8009f4e:	b118      	cbz	r0, 8009f58 <_vfiprintf_r+0x18>
 8009f50:	6a03      	ldr	r3, [r0, #32]
 8009f52:	b90b      	cbnz	r3, 8009f58 <_vfiprintf_r+0x18>
 8009f54:	f7fe fa14 	bl	8008380 <__sinit>
 8009f58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f5a:	07d9      	lsls	r1, r3, #31
 8009f5c:	d405      	bmi.n	8009f6a <_vfiprintf_r+0x2a>
 8009f5e:	89ab      	ldrh	r3, [r5, #12]
 8009f60:	059a      	lsls	r2, r3, #22
 8009f62:	d402      	bmi.n	8009f6a <_vfiprintf_r+0x2a>
 8009f64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f66:	f7fe fc88 	bl	800887a <__retarget_lock_acquire_recursive>
 8009f6a:	89ab      	ldrh	r3, [r5, #12]
 8009f6c:	071b      	lsls	r3, r3, #28
 8009f6e:	d501      	bpl.n	8009f74 <_vfiprintf_r+0x34>
 8009f70:	692b      	ldr	r3, [r5, #16]
 8009f72:	b99b      	cbnz	r3, 8009f9c <_vfiprintf_r+0x5c>
 8009f74:	4629      	mov	r1, r5
 8009f76:	4630      	mov	r0, r6
 8009f78:	f7fe fb5e 	bl	8008638 <__swsetup_r>
 8009f7c:	b170      	cbz	r0, 8009f9c <_vfiprintf_r+0x5c>
 8009f7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f80:	07dc      	lsls	r4, r3, #31
 8009f82:	d504      	bpl.n	8009f8e <_vfiprintf_r+0x4e>
 8009f84:	f04f 30ff 	mov.w	r0, #4294967295
 8009f88:	b01d      	add	sp, #116	@ 0x74
 8009f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f8e:	89ab      	ldrh	r3, [r5, #12]
 8009f90:	0598      	lsls	r0, r3, #22
 8009f92:	d4f7      	bmi.n	8009f84 <_vfiprintf_r+0x44>
 8009f94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f96:	f7fe fc71 	bl	800887c <__retarget_lock_release_recursive>
 8009f9a:	e7f3      	b.n	8009f84 <_vfiprintf_r+0x44>
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fa0:	2320      	movs	r3, #32
 8009fa2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009fa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009faa:	2330      	movs	r3, #48	@ 0x30
 8009fac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a15c <_vfiprintf_r+0x21c>
 8009fb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009fb4:	f04f 0901 	mov.w	r9, #1
 8009fb8:	4623      	mov	r3, r4
 8009fba:	469a      	mov	sl, r3
 8009fbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fc0:	b10a      	cbz	r2, 8009fc6 <_vfiprintf_r+0x86>
 8009fc2:	2a25      	cmp	r2, #37	@ 0x25
 8009fc4:	d1f9      	bne.n	8009fba <_vfiprintf_r+0x7a>
 8009fc6:	ebba 0b04 	subs.w	fp, sl, r4
 8009fca:	d00b      	beq.n	8009fe4 <_vfiprintf_r+0xa4>
 8009fcc:	465b      	mov	r3, fp
 8009fce:	4622      	mov	r2, r4
 8009fd0:	4629      	mov	r1, r5
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	f7ff ffa1 	bl	8009f1a <__sfputs_r>
 8009fd8:	3001      	adds	r0, #1
 8009fda:	f000 80a7 	beq.w	800a12c <_vfiprintf_r+0x1ec>
 8009fde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fe0:	445a      	add	r2, fp
 8009fe2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	f000 809f 	beq.w	800a12c <_vfiprintf_r+0x1ec>
 8009fee:	2300      	movs	r3, #0
 8009ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ff8:	f10a 0a01 	add.w	sl, sl, #1
 8009ffc:	9304      	str	r3, [sp, #16]
 8009ffe:	9307      	str	r3, [sp, #28]
 800a000:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a004:	931a      	str	r3, [sp, #104]	@ 0x68
 800a006:	4654      	mov	r4, sl
 800a008:	2205      	movs	r2, #5
 800a00a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a00e:	4853      	ldr	r0, [pc, #332]	@ (800a15c <_vfiprintf_r+0x21c>)
 800a010:	f7f6 f966 	bl	80002e0 <memchr>
 800a014:	9a04      	ldr	r2, [sp, #16]
 800a016:	b9d8      	cbnz	r0, 800a050 <_vfiprintf_r+0x110>
 800a018:	06d1      	lsls	r1, r2, #27
 800a01a:	bf44      	itt	mi
 800a01c:	2320      	movmi	r3, #32
 800a01e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a022:	0713      	lsls	r3, r2, #28
 800a024:	bf44      	itt	mi
 800a026:	232b      	movmi	r3, #43	@ 0x2b
 800a028:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a02c:	f89a 3000 	ldrb.w	r3, [sl]
 800a030:	2b2a      	cmp	r3, #42	@ 0x2a
 800a032:	d015      	beq.n	800a060 <_vfiprintf_r+0x120>
 800a034:	9a07      	ldr	r2, [sp, #28]
 800a036:	4654      	mov	r4, sl
 800a038:	2000      	movs	r0, #0
 800a03a:	f04f 0c0a 	mov.w	ip, #10
 800a03e:	4621      	mov	r1, r4
 800a040:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a044:	3b30      	subs	r3, #48	@ 0x30
 800a046:	2b09      	cmp	r3, #9
 800a048:	d94b      	bls.n	800a0e2 <_vfiprintf_r+0x1a2>
 800a04a:	b1b0      	cbz	r0, 800a07a <_vfiprintf_r+0x13a>
 800a04c:	9207      	str	r2, [sp, #28]
 800a04e:	e014      	b.n	800a07a <_vfiprintf_r+0x13a>
 800a050:	eba0 0308 	sub.w	r3, r0, r8
 800a054:	fa09 f303 	lsl.w	r3, r9, r3
 800a058:	4313      	orrs	r3, r2
 800a05a:	9304      	str	r3, [sp, #16]
 800a05c:	46a2      	mov	sl, r4
 800a05e:	e7d2      	b.n	800a006 <_vfiprintf_r+0xc6>
 800a060:	9b03      	ldr	r3, [sp, #12]
 800a062:	1d19      	adds	r1, r3, #4
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	9103      	str	r1, [sp, #12]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	bfbb      	ittet	lt
 800a06c:	425b      	neglt	r3, r3
 800a06e:	f042 0202 	orrlt.w	r2, r2, #2
 800a072:	9307      	strge	r3, [sp, #28]
 800a074:	9307      	strlt	r3, [sp, #28]
 800a076:	bfb8      	it	lt
 800a078:	9204      	strlt	r2, [sp, #16]
 800a07a:	7823      	ldrb	r3, [r4, #0]
 800a07c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a07e:	d10a      	bne.n	800a096 <_vfiprintf_r+0x156>
 800a080:	7863      	ldrb	r3, [r4, #1]
 800a082:	2b2a      	cmp	r3, #42	@ 0x2a
 800a084:	d132      	bne.n	800a0ec <_vfiprintf_r+0x1ac>
 800a086:	9b03      	ldr	r3, [sp, #12]
 800a088:	1d1a      	adds	r2, r3, #4
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	9203      	str	r2, [sp, #12]
 800a08e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a092:	3402      	adds	r4, #2
 800a094:	9305      	str	r3, [sp, #20]
 800a096:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a16c <_vfiprintf_r+0x22c>
 800a09a:	7821      	ldrb	r1, [r4, #0]
 800a09c:	2203      	movs	r2, #3
 800a09e:	4650      	mov	r0, sl
 800a0a0:	f7f6 f91e 	bl	80002e0 <memchr>
 800a0a4:	b138      	cbz	r0, 800a0b6 <_vfiprintf_r+0x176>
 800a0a6:	9b04      	ldr	r3, [sp, #16]
 800a0a8:	eba0 000a 	sub.w	r0, r0, sl
 800a0ac:	2240      	movs	r2, #64	@ 0x40
 800a0ae:	4082      	lsls	r2, r0
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	3401      	adds	r4, #1
 800a0b4:	9304      	str	r3, [sp, #16]
 800a0b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0ba:	4829      	ldr	r0, [pc, #164]	@ (800a160 <_vfiprintf_r+0x220>)
 800a0bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a0c0:	2206      	movs	r2, #6
 800a0c2:	f7f6 f90d 	bl	80002e0 <memchr>
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	d03f      	beq.n	800a14a <_vfiprintf_r+0x20a>
 800a0ca:	4b26      	ldr	r3, [pc, #152]	@ (800a164 <_vfiprintf_r+0x224>)
 800a0cc:	bb1b      	cbnz	r3, 800a116 <_vfiprintf_r+0x1d6>
 800a0ce:	9b03      	ldr	r3, [sp, #12]
 800a0d0:	3307      	adds	r3, #7
 800a0d2:	f023 0307 	bic.w	r3, r3, #7
 800a0d6:	3308      	adds	r3, #8
 800a0d8:	9303      	str	r3, [sp, #12]
 800a0da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0dc:	443b      	add	r3, r7
 800a0de:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0e0:	e76a      	b.n	8009fb8 <_vfiprintf_r+0x78>
 800a0e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0e6:	460c      	mov	r4, r1
 800a0e8:	2001      	movs	r0, #1
 800a0ea:	e7a8      	b.n	800a03e <_vfiprintf_r+0xfe>
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	3401      	adds	r4, #1
 800a0f0:	9305      	str	r3, [sp, #20]
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	f04f 0c0a 	mov.w	ip, #10
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0fe:	3a30      	subs	r2, #48	@ 0x30
 800a100:	2a09      	cmp	r2, #9
 800a102:	d903      	bls.n	800a10c <_vfiprintf_r+0x1cc>
 800a104:	2b00      	cmp	r3, #0
 800a106:	d0c6      	beq.n	800a096 <_vfiprintf_r+0x156>
 800a108:	9105      	str	r1, [sp, #20]
 800a10a:	e7c4      	b.n	800a096 <_vfiprintf_r+0x156>
 800a10c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a110:	4604      	mov	r4, r0
 800a112:	2301      	movs	r3, #1
 800a114:	e7f0      	b.n	800a0f8 <_vfiprintf_r+0x1b8>
 800a116:	ab03      	add	r3, sp, #12
 800a118:	9300      	str	r3, [sp, #0]
 800a11a:	462a      	mov	r2, r5
 800a11c:	4b12      	ldr	r3, [pc, #72]	@ (800a168 <_vfiprintf_r+0x228>)
 800a11e:	a904      	add	r1, sp, #16
 800a120:	4630      	mov	r0, r6
 800a122:	f7fd fcf9 	bl	8007b18 <_printf_float>
 800a126:	4607      	mov	r7, r0
 800a128:	1c78      	adds	r0, r7, #1
 800a12a:	d1d6      	bne.n	800a0da <_vfiprintf_r+0x19a>
 800a12c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a12e:	07d9      	lsls	r1, r3, #31
 800a130:	d405      	bmi.n	800a13e <_vfiprintf_r+0x1fe>
 800a132:	89ab      	ldrh	r3, [r5, #12]
 800a134:	059a      	lsls	r2, r3, #22
 800a136:	d402      	bmi.n	800a13e <_vfiprintf_r+0x1fe>
 800a138:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a13a:	f7fe fb9f 	bl	800887c <__retarget_lock_release_recursive>
 800a13e:	89ab      	ldrh	r3, [r5, #12]
 800a140:	065b      	lsls	r3, r3, #25
 800a142:	f53f af1f 	bmi.w	8009f84 <_vfiprintf_r+0x44>
 800a146:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a148:	e71e      	b.n	8009f88 <_vfiprintf_r+0x48>
 800a14a:	ab03      	add	r3, sp, #12
 800a14c:	9300      	str	r3, [sp, #0]
 800a14e:	462a      	mov	r2, r5
 800a150:	4b05      	ldr	r3, [pc, #20]	@ (800a168 <_vfiprintf_r+0x228>)
 800a152:	a904      	add	r1, sp, #16
 800a154:	4630      	mov	r0, r6
 800a156:	f7fd ff67 	bl	8008028 <_printf_i>
 800a15a:	e7e4      	b.n	800a126 <_vfiprintf_r+0x1e6>
 800a15c:	0800af98 	.word	0x0800af98
 800a160:	0800afa2 	.word	0x0800afa2
 800a164:	08007b19 	.word	0x08007b19
 800a168:	08009f1b 	.word	0x08009f1b
 800a16c:	0800af9e 	.word	0x0800af9e

0800a170 <__sflush_r>:
 800a170:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a178:	0716      	lsls	r6, r2, #28
 800a17a:	4605      	mov	r5, r0
 800a17c:	460c      	mov	r4, r1
 800a17e:	d454      	bmi.n	800a22a <__sflush_r+0xba>
 800a180:	684b      	ldr	r3, [r1, #4]
 800a182:	2b00      	cmp	r3, #0
 800a184:	dc02      	bgt.n	800a18c <__sflush_r+0x1c>
 800a186:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a188:	2b00      	cmp	r3, #0
 800a18a:	dd48      	ble.n	800a21e <__sflush_r+0xae>
 800a18c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a18e:	2e00      	cmp	r6, #0
 800a190:	d045      	beq.n	800a21e <__sflush_r+0xae>
 800a192:	2300      	movs	r3, #0
 800a194:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a198:	682f      	ldr	r7, [r5, #0]
 800a19a:	6a21      	ldr	r1, [r4, #32]
 800a19c:	602b      	str	r3, [r5, #0]
 800a19e:	d030      	beq.n	800a202 <__sflush_r+0x92>
 800a1a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a1a2:	89a3      	ldrh	r3, [r4, #12]
 800a1a4:	0759      	lsls	r1, r3, #29
 800a1a6:	d505      	bpl.n	800a1b4 <__sflush_r+0x44>
 800a1a8:	6863      	ldr	r3, [r4, #4]
 800a1aa:	1ad2      	subs	r2, r2, r3
 800a1ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a1ae:	b10b      	cbz	r3, 800a1b4 <__sflush_r+0x44>
 800a1b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a1b2:	1ad2      	subs	r2, r2, r3
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a1b8:	6a21      	ldr	r1, [r4, #32]
 800a1ba:	4628      	mov	r0, r5
 800a1bc:	47b0      	blx	r6
 800a1be:	1c43      	adds	r3, r0, #1
 800a1c0:	89a3      	ldrh	r3, [r4, #12]
 800a1c2:	d106      	bne.n	800a1d2 <__sflush_r+0x62>
 800a1c4:	6829      	ldr	r1, [r5, #0]
 800a1c6:	291d      	cmp	r1, #29
 800a1c8:	d82b      	bhi.n	800a222 <__sflush_r+0xb2>
 800a1ca:	4a2a      	ldr	r2, [pc, #168]	@ (800a274 <__sflush_r+0x104>)
 800a1cc:	410a      	asrs	r2, r1
 800a1ce:	07d6      	lsls	r6, r2, #31
 800a1d0:	d427      	bmi.n	800a222 <__sflush_r+0xb2>
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	6062      	str	r2, [r4, #4]
 800a1d6:	04d9      	lsls	r1, r3, #19
 800a1d8:	6922      	ldr	r2, [r4, #16]
 800a1da:	6022      	str	r2, [r4, #0]
 800a1dc:	d504      	bpl.n	800a1e8 <__sflush_r+0x78>
 800a1de:	1c42      	adds	r2, r0, #1
 800a1e0:	d101      	bne.n	800a1e6 <__sflush_r+0x76>
 800a1e2:	682b      	ldr	r3, [r5, #0]
 800a1e4:	b903      	cbnz	r3, 800a1e8 <__sflush_r+0x78>
 800a1e6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a1e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a1ea:	602f      	str	r7, [r5, #0]
 800a1ec:	b1b9      	cbz	r1, 800a21e <__sflush_r+0xae>
 800a1ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a1f2:	4299      	cmp	r1, r3
 800a1f4:	d002      	beq.n	800a1fc <__sflush_r+0x8c>
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	f7ff f94c 	bl	8009494 <_free_r>
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	6363      	str	r3, [r4, #52]	@ 0x34
 800a200:	e00d      	b.n	800a21e <__sflush_r+0xae>
 800a202:	2301      	movs	r3, #1
 800a204:	4628      	mov	r0, r5
 800a206:	47b0      	blx	r6
 800a208:	4602      	mov	r2, r0
 800a20a:	1c50      	adds	r0, r2, #1
 800a20c:	d1c9      	bne.n	800a1a2 <__sflush_r+0x32>
 800a20e:	682b      	ldr	r3, [r5, #0]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d0c6      	beq.n	800a1a2 <__sflush_r+0x32>
 800a214:	2b1d      	cmp	r3, #29
 800a216:	d001      	beq.n	800a21c <__sflush_r+0xac>
 800a218:	2b16      	cmp	r3, #22
 800a21a:	d11e      	bne.n	800a25a <__sflush_r+0xea>
 800a21c:	602f      	str	r7, [r5, #0]
 800a21e:	2000      	movs	r0, #0
 800a220:	e022      	b.n	800a268 <__sflush_r+0xf8>
 800a222:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a226:	b21b      	sxth	r3, r3
 800a228:	e01b      	b.n	800a262 <__sflush_r+0xf2>
 800a22a:	690f      	ldr	r7, [r1, #16]
 800a22c:	2f00      	cmp	r7, #0
 800a22e:	d0f6      	beq.n	800a21e <__sflush_r+0xae>
 800a230:	0793      	lsls	r3, r2, #30
 800a232:	680e      	ldr	r6, [r1, #0]
 800a234:	bf08      	it	eq
 800a236:	694b      	ldreq	r3, [r1, #20]
 800a238:	600f      	str	r7, [r1, #0]
 800a23a:	bf18      	it	ne
 800a23c:	2300      	movne	r3, #0
 800a23e:	eba6 0807 	sub.w	r8, r6, r7
 800a242:	608b      	str	r3, [r1, #8]
 800a244:	f1b8 0f00 	cmp.w	r8, #0
 800a248:	dde9      	ble.n	800a21e <__sflush_r+0xae>
 800a24a:	6a21      	ldr	r1, [r4, #32]
 800a24c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a24e:	4643      	mov	r3, r8
 800a250:	463a      	mov	r2, r7
 800a252:	4628      	mov	r0, r5
 800a254:	47b0      	blx	r6
 800a256:	2800      	cmp	r0, #0
 800a258:	dc08      	bgt.n	800a26c <__sflush_r+0xfc>
 800a25a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a25e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a262:	81a3      	strh	r3, [r4, #12]
 800a264:	f04f 30ff 	mov.w	r0, #4294967295
 800a268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a26c:	4407      	add	r7, r0
 800a26e:	eba8 0800 	sub.w	r8, r8, r0
 800a272:	e7e7      	b.n	800a244 <__sflush_r+0xd4>
 800a274:	dfbffffe 	.word	0xdfbffffe

0800a278 <_fflush_r>:
 800a278:	b538      	push	{r3, r4, r5, lr}
 800a27a:	690b      	ldr	r3, [r1, #16]
 800a27c:	4605      	mov	r5, r0
 800a27e:	460c      	mov	r4, r1
 800a280:	b913      	cbnz	r3, 800a288 <_fflush_r+0x10>
 800a282:	2500      	movs	r5, #0
 800a284:	4628      	mov	r0, r5
 800a286:	bd38      	pop	{r3, r4, r5, pc}
 800a288:	b118      	cbz	r0, 800a292 <_fflush_r+0x1a>
 800a28a:	6a03      	ldr	r3, [r0, #32]
 800a28c:	b90b      	cbnz	r3, 800a292 <_fflush_r+0x1a>
 800a28e:	f7fe f877 	bl	8008380 <__sinit>
 800a292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d0f3      	beq.n	800a282 <_fflush_r+0xa>
 800a29a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a29c:	07d0      	lsls	r0, r2, #31
 800a29e:	d404      	bmi.n	800a2aa <_fflush_r+0x32>
 800a2a0:	0599      	lsls	r1, r3, #22
 800a2a2:	d402      	bmi.n	800a2aa <_fflush_r+0x32>
 800a2a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a2a6:	f7fe fae8 	bl	800887a <__retarget_lock_acquire_recursive>
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	4621      	mov	r1, r4
 800a2ae:	f7ff ff5f 	bl	800a170 <__sflush_r>
 800a2b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a2b4:	07da      	lsls	r2, r3, #31
 800a2b6:	4605      	mov	r5, r0
 800a2b8:	d4e4      	bmi.n	800a284 <_fflush_r+0xc>
 800a2ba:	89a3      	ldrh	r3, [r4, #12]
 800a2bc:	059b      	lsls	r3, r3, #22
 800a2be:	d4e1      	bmi.n	800a284 <_fflush_r+0xc>
 800a2c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a2c2:	f7fe fadb 	bl	800887c <__retarget_lock_release_recursive>
 800a2c6:	e7dd      	b.n	800a284 <_fflush_r+0xc>

0800a2c8 <fiprintf>:
 800a2c8:	b40e      	push	{r1, r2, r3}
 800a2ca:	b503      	push	{r0, r1, lr}
 800a2cc:	4601      	mov	r1, r0
 800a2ce:	ab03      	add	r3, sp, #12
 800a2d0:	4805      	ldr	r0, [pc, #20]	@ (800a2e8 <fiprintf+0x20>)
 800a2d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2d6:	6800      	ldr	r0, [r0, #0]
 800a2d8:	9301      	str	r3, [sp, #4]
 800a2da:	f7ff fe31 	bl	8009f40 <_vfiprintf_r>
 800a2de:	b002      	add	sp, #8
 800a2e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2e4:	b003      	add	sp, #12
 800a2e6:	4770      	bx	lr
 800a2e8:	240006a8 	.word	0x240006a8

0800a2ec <__swhatbuf_r>:
 800a2ec:	b570      	push	{r4, r5, r6, lr}
 800a2ee:	460c      	mov	r4, r1
 800a2f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2f4:	2900      	cmp	r1, #0
 800a2f6:	b096      	sub	sp, #88	@ 0x58
 800a2f8:	4615      	mov	r5, r2
 800a2fa:	461e      	mov	r6, r3
 800a2fc:	da0d      	bge.n	800a31a <__swhatbuf_r+0x2e>
 800a2fe:	89a3      	ldrh	r3, [r4, #12]
 800a300:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a304:	f04f 0100 	mov.w	r1, #0
 800a308:	bf14      	ite	ne
 800a30a:	2340      	movne	r3, #64	@ 0x40
 800a30c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a310:	2000      	movs	r0, #0
 800a312:	6031      	str	r1, [r6, #0]
 800a314:	602b      	str	r3, [r5, #0]
 800a316:	b016      	add	sp, #88	@ 0x58
 800a318:	bd70      	pop	{r4, r5, r6, pc}
 800a31a:	466a      	mov	r2, sp
 800a31c:	f000 f862 	bl	800a3e4 <_fstat_r>
 800a320:	2800      	cmp	r0, #0
 800a322:	dbec      	blt.n	800a2fe <__swhatbuf_r+0x12>
 800a324:	9901      	ldr	r1, [sp, #4]
 800a326:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a32a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a32e:	4259      	negs	r1, r3
 800a330:	4159      	adcs	r1, r3
 800a332:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a336:	e7eb      	b.n	800a310 <__swhatbuf_r+0x24>

0800a338 <__smakebuf_r>:
 800a338:	898b      	ldrh	r3, [r1, #12]
 800a33a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a33c:	079d      	lsls	r5, r3, #30
 800a33e:	4606      	mov	r6, r0
 800a340:	460c      	mov	r4, r1
 800a342:	d507      	bpl.n	800a354 <__smakebuf_r+0x1c>
 800a344:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a348:	6023      	str	r3, [r4, #0]
 800a34a:	6123      	str	r3, [r4, #16]
 800a34c:	2301      	movs	r3, #1
 800a34e:	6163      	str	r3, [r4, #20]
 800a350:	b003      	add	sp, #12
 800a352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a354:	ab01      	add	r3, sp, #4
 800a356:	466a      	mov	r2, sp
 800a358:	f7ff ffc8 	bl	800a2ec <__swhatbuf_r>
 800a35c:	9f00      	ldr	r7, [sp, #0]
 800a35e:	4605      	mov	r5, r0
 800a360:	4639      	mov	r1, r7
 800a362:	4630      	mov	r0, r6
 800a364:	f7fd fa22 	bl	80077ac <_malloc_r>
 800a368:	b948      	cbnz	r0, 800a37e <__smakebuf_r+0x46>
 800a36a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a36e:	059a      	lsls	r2, r3, #22
 800a370:	d4ee      	bmi.n	800a350 <__smakebuf_r+0x18>
 800a372:	f023 0303 	bic.w	r3, r3, #3
 800a376:	f043 0302 	orr.w	r3, r3, #2
 800a37a:	81a3      	strh	r3, [r4, #12]
 800a37c:	e7e2      	b.n	800a344 <__smakebuf_r+0xc>
 800a37e:	89a3      	ldrh	r3, [r4, #12]
 800a380:	6020      	str	r0, [r4, #0]
 800a382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a386:	81a3      	strh	r3, [r4, #12]
 800a388:	9b01      	ldr	r3, [sp, #4]
 800a38a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a38e:	b15b      	cbz	r3, 800a3a8 <__smakebuf_r+0x70>
 800a390:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a394:	4630      	mov	r0, r6
 800a396:	f000 f837 	bl	800a408 <_isatty_r>
 800a39a:	b128      	cbz	r0, 800a3a8 <__smakebuf_r+0x70>
 800a39c:	89a3      	ldrh	r3, [r4, #12]
 800a39e:	f023 0303 	bic.w	r3, r3, #3
 800a3a2:	f043 0301 	orr.w	r3, r3, #1
 800a3a6:	81a3      	strh	r3, [r4, #12]
 800a3a8:	89a3      	ldrh	r3, [r4, #12]
 800a3aa:	431d      	orrs	r5, r3
 800a3ac:	81a5      	strh	r5, [r4, #12]
 800a3ae:	e7cf      	b.n	800a350 <__smakebuf_r+0x18>

0800a3b0 <memmove>:
 800a3b0:	4288      	cmp	r0, r1
 800a3b2:	b510      	push	{r4, lr}
 800a3b4:	eb01 0402 	add.w	r4, r1, r2
 800a3b8:	d902      	bls.n	800a3c0 <memmove+0x10>
 800a3ba:	4284      	cmp	r4, r0
 800a3bc:	4623      	mov	r3, r4
 800a3be:	d807      	bhi.n	800a3d0 <memmove+0x20>
 800a3c0:	1e43      	subs	r3, r0, #1
 800a3c2:	42a1      	cmp	r1, r4
 800a3c4:	d008      	beq.n	800a3d8 <memmove+0x28>
 800a3c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3ce:	e7f8      	b.n	800a3c2 <memmove+0x12>
 800a3d0:	4402      	add	r2, r0
 800a3d2:	4601      	mov	r1, r0
 800a3d4:	428a      	cmp	r2, r1
 800a3d6:	d100      	bne.n	800a3da <memmove+0x2a>
 800a3d8:	bd10      	pop	{r4, pc}
 800a3da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a3e2:	e7f7      	b.n	800a3d4 <memmove+0x24>

0800a3e4 <_fstat_r>:
 800a3e4:	b538      	push	{r3, r4, r5, lr}
 800a3e6:	4d07      	ldr	r5, [pc, #28]	@ (800a404 <_fstat_r+0x20>)
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	4608      	mov	r0, r1
 800a3ee:	4611      	mov	r1, r2
 800a3f0:	602b      	str	r3, [r5, #0]
 800a3f2:	f000 f89f 	bl	800a534 <_fstat>
 800a3f6:	1c43      	adds	r3, r0, #1
 800a3f8:	d102      	bne.n	800a400 <_fstat_r+0x1c>
 800a3fa:	682b      	ldr	r3, [r5, #0]
 800a3fc:	b103      	cbz	r3, 800a400 <_fstat_r+0x1c>
 800a3fe:	6023      	str	r3, [r4, #0]
 800a400:	bd38      	pop	{r3, r4, r5, pc}
 800a402:	bf00      	nop
 800a404:	24000bfc 	.word	0x24000bfc

0800a408 <_isatty_r>:
 800a408:	b538      	push	{r3, r4, r5, lr}
 800a40a:	4d06      	ldr	r5, [pc, #24]	@ (800a424 <_isatty_r+0x1c>)
 800a40c:	2300      	movs	r3, #0
 800a40e:	4604      	mov	r4, r0
 800a410:	4608      	mov	r0, r1
 800a412:	602b      	str	r3, [r5, #0]
 800a414:	f000 f8a6 	bl	800a564 <_isatty>
 800a418:	1c43      	adds	r3, r0, #1
 800a41a:	d102      	bne.n	800a422 <_isatty_r+0x1a>
 800a41c:	682b      	ldr	r3, [r5, #0]
 800a41e:	b103      	cbz	r3, 800a422 <_isatty_r+0x1a>
 800a420:	6023      	str	r3, [r4, #0]
 800a422:	bd38      	pop	{r3, r4, r5, pc}
 800a424:	24000bfc 	.word	0x24000bfc

0800a428 <abort>:
 800a428:	b508      	push	{r3, lr}
 800a42a:	2006      	movs	r0, #6
 800a42c:	f000 f85e 	bl	800a4ec <raise>
 800a430:	2001      	movs	r0, #1
 800a432:	f000 f8bf 	bl	800a5b4 <_exit>

0800a436 <_calloc_r>:
 800a436:	b570      	push	{r4, r5, r6, lr}
 800a438:	fba1 5402 	umull	r5, r4, r1, r2
 800a43c:	b93c      	cbnz	r4, 800a44e <_calloc_r+0x18>
 800a43e:	4629      	mov	r1, r5
 800a440:	f7fd f9b4 	bl	80077ac <_malloc_r>
 800a444:	4606      	mov	r6, r0
 800a446:	b928      	cbnz	r0, 800a454 <_calloc_r+0x1e>
 800a448:	2600      	movs	r6, #0
 800a44a:	4630      	mov	r0, r6
 800a44c:	bd70      	pop	{r4, r5, r6, pc}
 800a44e:	220c      	movs	r2, #12
 800a450:	6002      	str	r2, [r0, #0]
 800a452:	e7f9      	b.n	800a448 <_calloc_r+0x12>
 800a454:	462a      	mov	r2, r5
 800a456:	4621      	mov	r1, r4
 800a458:	f7fe f944 	bl	80086e4 <memset>
 800a45c:	e7f5      	b.n	800a44a <_calloc_r+0x14>

0800a45e <__ascii_mbtowc>:
 800a45e:	b082      	sub	sp, #8
 800a460:	b901      	cbnz	r1, 800a464 <__ascii_mbtowc+0x6>
 800a462:	a901      	add	r1, sp, #4
 800a464:	b142      	cbz	r2, 800a478 <__ascii_mbtowc+0x1a>
 800a466:	b14b      	cbz	r3, 800a47c <__ascii_mbtowc+0x1e>
 800a468:	7813      	ldrb	r3, [r2, #0]
 800a46a:	600b      	str	r3, [r1, #0]
 800a46c:	7812      	ldrb	r2, [r2, #0]
 800a46e:	1e10      	subs	r0, r2, #0
 800a470:	bf18      	it	ne
 800a472:	2001      	movne	r0, #1
 800a474:	b002      	add	sp, #8
 800a476:	4770      	bx	lr
 800a478:	4610      	mov	r0, r2
 800a47a:	e7fb      	b.n	800a474 <__ascii_mbtowc+0x16>
 800a47c:	f06f 0001 	mvn.w	r0, #1
 800a480:	e7f8      	b.n	800a474 <__ascii_mbtowc+0x16>

0800a482 <__ascii_wctomb>:
 800a482:	4603      	mov	r3, r0
 800a484:	4608      	mov	r0, r1
 800a486:	b141      	cbz	r1, 800a49a <__ascii_wctomb+0x18>
 800a488:	2aff      	cmp	r2, #255	@ 0xff
 800a48a:	d904      	bls.n	800a496 <__ascii_wctomb+0x14>
 800a48c:	228a      	movs	r2, #138	@ 0x8a
 800a48e:	601a      	str	r2, [r3, #0]
 800a490:	f04f 30ff 	mov.w	r0, #4294967295
 800a494:	4770      	bx	lr
 800a496:	700a      	strb	r2, [r1, #0]
 800a498:	2001      	movs	r0, #1
 800a49a:	4770      	bx	lr

0800a49c <_raise_r>:
 800a49c:	291f      	cmp	r1, #31
 800a49e:	b538      	push	{r3, r4, r5, lr}
 800a4a0:	4605      	mov	r5, r0
 800a4a2:	460c      	mov	r4, r1
 800a4a4:	d904      	bls.n	800a4b0 <_raise_r+0x14>
 800a4a6:	2316      	movs	r3, #22
 800a4a8:	6003      	str	r3, [r0, #0]
 800a4aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ae:	bd38      	pop	{r3, r4, r5, pc}
 800a4b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a4b2:	b112      	cbz	r2, 800a4ba <_raise_r+0x1e>
 800a4b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a4b8:	b94b      	cbnz	r3, 800a4ce <_raise_r+0x32>
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	f000 f830 	bl	800a520 <_getpid_r>
 800a4c0:	4622      	mov	r2, r4
 800a4c2:	4601      	mov	r1, r0
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4ca:	f000 b817 	b.w	800a4fc <_kill_r>
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d00a      	beq.n	800a4e8 <_raise_r+0x4c>
 800a4d2:	1c59      	adds	r1, r3, #1
 800a4d4:	d103      	bne.n	800a4de <_raise_r+0x42>
 800a4d6:	2316      	movs	r3, #22
 800a4d8:	6003      	str	r3, [r0, #0]
 800a4da:	2001      	movs	r0, #1
 800a4dc:	e7e7      	b.n	800a4ae <_raise_r+0x12>
 800a4de:	2100      	movs	r1, #0
 800a4e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	4798      	blx	r3
 800a4e8:	2000      	movs	r0, #0
 800a4ea:	e7e0      	b.n	800a4ae <_raise_r+0x12>

0800a4ec <raise>:
 800a4ec:	4b02      	ldr	r3, [pc, #8]	@ (800a4f8 <raise+0xc>)
 800a4ee:	4601      	mov	r1, r0
 800a4f0:	6818      	ldr	r0, [r3, #0]
 800a4f2:	f7ff bfd3 	b.w	800a49c <_raise_r>
 800a4f6:	bf00      	nop
 800a4f8:	240006a8 	.word	0x240006a8

0800a4fc <_kill_r>:
 800a4fc:	b538      	push	{r3, r4, r5, lr}
 800a4fe:	4d07      	ldr	r5, [pc, #28]	@ (800a51c <_kill_r+0x20>)
 800a500:	2300      	movs	r3, #0
 800a502:	4604      	mov	r4, r0
 800a504:	4608      	mov	r0, r1
 800a506:	4611      	mov	r1, r2
 800a508:	602b      	str	r3, [r5, #0]
 800a50a:	f000 f833 	bl	800a574 <_kill>
 800a50e:	1c43      	adds	r3, r0, #1
 800a510:	d102      	bne.n	800a518 <_kill_r+0x1c>
 800a512:	682b      	ldr	r3, [r5, #0]
 800a514:	b103      	cbz	r3, 800a518 <_kill_r+0x1c>
 800a516:	6023      	str	r3, [r4, #0]
 800a518:	bd38      	pop	{r3, r4, r5, pc}
 800a51a:	bf00      	nop
 800a51c:	24000bfc 	.word	0x24000bfc

0800a520 <_getpid_r>:
 800a520:	f000 b810 	b.w	800a544 <_getpid>

0800a524 <_close>:
 800a524:	4b02      	ldr	r3, [pc, #8]	@ (800a530 <_close+0xc>)
 800a526:	2258      	movs	r2, #88	@ 0x58
 800a528:	601a      	str	r2, [r3, #0]
 800a52a:	f04f 30ff 	mov.w	r0, #4294967295
 800a52e:	4770      	bx	lr
 800a530:	24000bfc 	.word	0x24000bfc

0800a534 <_fstat>:
 800a534:	4b02      	ldr	r3, [pc, #8]	@ (800a540 <_fstat+0xc>)
 800a536:	2258      	movs	r2, #88	@ 0x58
 800a538:	601a      	str	r2, [r3, #0]
 800a53a:	f04f 30ff 	mov.w	r0, #4294967295
 800a53e:	4770      	bx	lr
 800a540:	24000bfc 	.word	0x24000bfc

0800a544 <_getpid>:
 800a544:	4b02      	ldr	r3, [pc, #8]	@ (800a550 <_getpid+0xc>)
 800a546:	2258      	movs	r2, #88	@ 0x58
 800a548:	601a      	str	r2, [r3, #0]
 800a54a:	f04f 30ff 	mov.w	r0, #4294967295
 800a54e:	4770      	bx	lr
 800a550:	24000bfc 	.word	0x24000bfc

0800a554 <_gettimeofday>:
 800a554:	4b02      	ldr	r3, [pc, #8]	@ (800a560 <_gettimeofday+0xc>)
 800a556:	2258      	movs	r2, #88	@ 0x58
 800a558:	601a      	str	r2, [r3, #0]
 800a55a:	f04f 30ff 	mov.w	r0, #4294967295
 800a55e:	4770      	bx	lr
 800a560:	24000bfc 	.word	0x24000bfc

0800a564 <_isatty>:
 800a564:	4b02      	ldr	r3, [pc, #8]	@ (800a570 <_isatty+0xc>)
 800a566:	2258      	movs	r2, #88	@ 0x58
 800a568:	601a      	str	r2, [r3, #0]
 800a56a:	2000      	movs	r0, #0
 800a56c:	4770      	bx	lr
 800a56e:	bf00      	nop
 800a570:	24000bfc 	.word	0x24000bfc

0800a574 <_kill>:
 800a574:	4b02      	ldr	r3, [pc, #8]	@ (800a580 <_kill+0xc>)
 800a576:	2258      	movs	r2, #88	@ 0x58
 800a578:	601a      	str	r2, [r3, #0]
 800a57a:	f04f 30ff 	mov.w	r0, #4294967295
 800a57e:	4770      	bx	lr
 800a580:	24000bfc 	.word	0x24000bfc

0800a584 <_lseek>:
 800a584:	4b02      	ldr	r3, [pc, #8]	@ (800a590 <_lseek+0xc>)
 800a586:	2258      	movs	r2, #88	@ 0x58
 800a588:	601a      	str	r2, [r3, #0]
 800a58a:	f04f 30ff 	mov.w	r0, #4294967295
 800a58e:	4770      	bx	lr
 800a590:	24000bfc 	.word	0x24000bfc

0800a594 <_read>:
 800a594:	4b02      	ldr	r3, [pc, #8]	@ (800a5a0 <_read+0xc>)
 800a596:	2258      	movs	r2, #88	@ 0x58
 800a598:	601a      	str	r2, [r3, #0]
 800a59a:	f04f 30ff 	mov.w	r0, #4294967295
 800a59e:	4770      	bx	lr
 800a5a0:	24000bfc 	.word	0x24000bfc

0800a5a4 <_write>:
 800a5a4:	4b02      	ldr	r3, [pc, #8]	@ (800a5b0 <_write+0xc>)
 800a5a6:	2258      	movs	r2, #88	@ 0x58
 800a5a8:	601a      	str	r2, [r3, #0]
 800a5aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ae:	4770      	bx	lr
 800a5b0:	24000bfc 	.word	0x24000bfc

0800a5b4 <_exit>:
 800a5b4:	e7fe      	b.n	800a5b4 <_exit>
	...

0800a5b8 <_init>:
 800a5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ba:	bf00      	nop
 800a5bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5be:	bc08      	pop	{r3}
 800a5c0:	469e      	mov	lr, r3
 800a5c2:	4770      	bx	lr

0800a5c4 <_fini>:
 800a5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5c6:	bf00      	nop
 800a5c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ca:	bc08      	pop	{r3}
 800a5cc:	469e      	mov	lr, r3
 800a5ce:	4770      	bx	lr
