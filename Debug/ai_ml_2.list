
ai_ml_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084d0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006dc  08008780  08008780  00009780  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008e5c  08008e5c  00009e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008e64  08008e64  00009e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008e68  08008e68  00009e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000006f8  24000000  08008e6c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000344  24000700  08009564  0000a700  2**5
                  ALLOC
  8 ._user_heap_stack 00001000  20000000  20000000  0000b000  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a6f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012979  00000000  00000000  0000a726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000288e  00000000  00000000  0001d09f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b80  00000000  00000000  0001f930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000008ac  00000000  00000000  000204b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038340  00000000  00000000  00020d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00011e9e  00000000  00000000  0005909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001623b2  00000000  00000000  0006af3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000086  00000000  00000000  001cd2ec  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003744  00000000  00000000  001cd374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000063  00000000  00000000  001d0ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000700 	.word	0x24000700
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008758 	.word	0x08008758

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000704 	.word	0x24000704
 80002dc:	08008758 	.word	0x08008758

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	@ 0x28
 8000674:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000686:	4b29      	ldr	r3, [pc, #164]	@ (800072c <MX_GPIO_Init+0xbc>)
 8000688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800068c:	4a27      	ldr	r2, [pc, #156]	@ (800072c <MX_GPIO_Init+0xbc>)
 800068e:	f043 0304 	orr.w	r3, r3, #4
 8000692:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000696:	4b25      	ldr	r3, [pc, #148]	@ (800072c <MX_GPIO_Init+0xbc>)
 8000698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800069c:	f003 0304 	and.w	r3, r3, #4
 80006a0:	613b      	str	r3, [r7, #16]
 80006a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a4:	4b21      	ldr	r3, [pc, #132]	@ (800072c <MX_GPIO_Init+0xbc>)
 80006a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006aa:	4a20      	ldr	r2, [pc, #128]	@ (800072c <MX_GPIO_Init+0xbc>)
 80006ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006b4:	4b1d      	ldr	r3, [pc, #116]	@ (800072c <MX_GPIO_Init+0xbc>)
 80006b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c2:	4b1a      	ldr	r3, [pc, #104]	@ (800072c <MX_GPIO_Init+0xbc>)
 80006c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006c8:	4a18      	ldr	r2, [pc, #96]	@ (800072c <MX_GPIO_Init+0xbc>)
 80006ca:	f043 0308 	orr.w	r3, r3, #8
 80006ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006d2:	4b16      	ldr	r3, [pc, #88]	@ (800072c <MX_GPIO_Init+0xbc>)
 80006d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d8:	f003 0308 	and.w	r3, r3, #8
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006e0:	4b12      	ldr	r3, [pc, #72]	@ (800072c <MX_GPIO_Init+0xbc>)
 80006e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e6:	4a11      	ldr	r2, [pc, #68]	@ (800072c <MX_GPIO_Init+0xbc>)
 80006e8:	f043 0310 	orr.w	r3, r3, #16
 80006ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006f0:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <MX_GPIO_Init+0xbc>)
 80006f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f6:	f003 0310 	and.w	r3, r3, #16
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2102      	movs	r1, #2
 8000702:	480b      	ldr	r0, [pc, #44]	@ (8000730 <MX_GPIO_Init+0xc0>)
 8000704:	f000 ff2e 	bl	8001564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000708:	2302      	movs	r3, #2
 800070a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070c:	2301      	movs	r3, #1
 800070e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2300      	movs	r3, #0
 8000716:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	4619      	mov	r1, r3
 800071e:	4804      	ldr	r0, [pc, #16]	@ (8000730 <MX_GPIO_Init+0xc0>)
 8000720:	f000 fd70 	bl	8001204 <HAL_GPIO_Init>

}
 8000724:	bf00      	nop
 8000726:	3728      	adds	r7, #40	@ 0x28
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	58024400 	.word	0x58024400
 8000730:	58021000 	.word	0x58021000

08000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
	//uint32_t in_number = 0;
	//uint32_t out_number = 0;
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800073a:	f000 f92b 	bl	8000994 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800073e:	4b3b      	ldr	r3, [pc, #236]	@ (800082c <main+0xf8>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000746:	2b00      	cmp	r3, #0
 8000748:	d11b      	bne.n	8000782 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800074a:	f3bf 8f4f 	dsb	sy
}
 800074e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000750:	f3bf 8f6f 	isb	sy
}
 8000754:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000756:	4b35      	ldr	r3, [pc, #212]	@ (800082c <main+0xf8>)
 8000758:	2200      	movs	r2, #0
 800075a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800075e:	f3bf 8f4f 	dsb	sy
}
 8000762:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000764:	f3bf 8f6f 	isb	sy
}
 8000768:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800076a:	4b30      	ldr	r3, [pc, #192]	@ (800082c <main+0xf8>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	4a2f      	ldr	r2, [pc, #188]	@ (800082c <main+0xf8>)
 8000770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000774:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000776:	f3bf 8f4f 	dsb	sy
}
 800077a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800077c:	f3bf 8f6f 	isb	sy
}
 8000780:	e000      	b.n	8000784 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000782:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000784:	4b29      	ldr	r3, [pc, #164]	@ (800082c <main+0xf8>)
 8000786:	695b      	ldr	r3, [r3, #20]
 8000788:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800078c:	2b00      	cmp	r3, #0
 800078e:	d138      	bne.n	8000802 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000790:	4b26      	ldr	r3, [pc, #152]	@ (800082c <main+0xf8>)
 8000792:	2200      	movs	r2, #0
 8000794:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000798:	f3bf 8f4f 	dsb	sy
}
 800079c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800079e:	4b23      	ldr	r3, [pc, #140]	@ (800082c <main+0xf8>)
 80007a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80007a4:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	0b5b      	lsrs	r3, r3, #13
 80007aa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80007ae:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	08db      	lsrs	r3, r3, #3
 80007b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80007b8:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	015a      	lsls	r2, r3, #5
 80007be:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80007c2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007c8:	4918      	ldr	r1, [pc, #96]	@ (800082c <main+0xf8>)
 80007ca:	4313      	orrs	r3, r2
 80007cc:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	1e5a      	subs	r2, r3, #1
 80007d4:	607a      	str	r2, [r7, #4]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d1ef      	bne.n	80007ba <main+0x86>
    } while(sets-- != 0U);
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	1e5a      	subs	r2, r3, #1
 80007de:	60ba      	str	r2, [r7, #8]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d1e5      	bne.n	80007b0 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80007e4:	f3bf 8f4f 	dsb	sy
}
 80007e8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80007ea:	4b10      	ldr	r3, [pc, #64]	@ (800082c <main+0xf8>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	4a0f      	ldr	r2, [pc, #60]	@ (800082c <main+0xf8>)
 80007f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80007f4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007f6:	f3bf 8f4f 	dsb	sy
}
 80007fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007fc:	f3bf 8f6f 	isb	sy
}
 8000800:	e000      	b.n	8000804 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000802:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000804:	f000 fae0 	bl	8000dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000808:	f000 f814 	bl	8000834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080c:	f7ff ff30 	bl	8000670 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000810:	f000 f9fa 	bl	8000c08 <MX_USART3_UART_Init>
  MX_X_CUBE_AI_Init();
 8000814:	f004 ff8e 	bl	8005734 <MX_X_CUBE_AI_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_1,GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	2102      	movs	r1, #2
 800081c:	4804      	ldr	r0, [pc, #16]	@ (8000830 <main+0xfc>)
 800081e:	f000 fea1 	bl	8001564 <HAL_GPIO_WritePin>
  MX_X_CUBE_AI_Process();
 8000822:	f004 ff95 	bl	8005750 <MX_X_CUBE_AI_Process>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_1,GPIO_PIN_SET);
 8000826:	bf00      	nop
 8000828:	e7f6      	b.n	8000818 <main+0xe4>
 800082a:	bf00      	nop
 800082c:	e000ed00 	.word	0xe000ed00
 8000830:	58021000 	.word	0x58021000

08000834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b09e      	sub	sp, #120	@ 0x78
 8000838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800083e:	224c      	movs	r2, #76	@ 0x4c
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f007 f8fa 	bl	8007a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	2220      	movs	r2, #32
 800084e:	2100      	movs	r1, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f007 f8f3 	bl	8007a3c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000856:	2002      	movs	r0, #2
 8000858:	f000 fe9e 	bl	8001598 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	4b49      	ldr	r3, [pc, #292]	@ (8000988 <SystemClock_Config+0x154>)
 8000862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000864:	4a48      	ldr	r2, [pc, #288]	@ (8000988 <SystemClock_Config+0x154>)
 8000866:	f023 0301 	bic.w	r3, r3, #1
 800086a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800086c:	4b46      	ldr	r3, [pc, #280]	@ (8000988 <SystemClock_Config+0x154>)
 800086e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	4b45      	ldr	r3, [pc, #276]	@ (800098c <SystemClock_Config+0x158>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	4a44      	ldr	r2, [pc, #272]	@ (800098c <SystemClock_Config+0x158>)
 800087c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000880:	6193      	str	r3, [r2, #24]
 8000882:	4b42      	ldr	r3, [pc, #264]	@ (800098c <SystemClock_Config+0x158>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800088e:	bf00      	nop
 8000890:	4b3e      	ldr	r3, [pc, #248]	@ (800098c <SystemClock_Config+0x158>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000898:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800089c:	d1f8      	bne.n	8000890 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	4b3c      	ldr	r3, [pc, #240]	@ (8000990 <SystemClock_Config+0x15c>)
 80008a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80008a4:	4a3a      	ldr	r2, [pc, #232]	@ (8000990 <SystemClock_Config+0x15c>)
 80008a6:	f043 0302 	orr.w	r3, r3, #2
 80008aa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80008ae:	4b38      	ldr	r3, [pc, #224]	@ (8000990 <SystemClock_Config+0x15c>)
 80008b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80008b4:	f003 0302 	and.w	r3, r3, #2
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008bc:	2300      	movs	r3, #0
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	4b32      	ldr	r3, [pc, #200]	@ (800098c <SystemClock_Config+0x158>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a31      	ldr	r2, [pc, #196]	@ (800098c <SystemClock_Config+0x158>)
 80008c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b2f      	ldr	r3, [pc, #188]	@ (800098c <SystemClock_Config+0x158>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b2c      	ldr	r3, [pc, #176]	@ (8000988 <SystemClock_Config+0x154>)
 80008d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008da:	4a2b      	ldr	r2, [pc, #172]	@ (8000988 <SystemClock_Config+0x154>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008e2:	4b29      	ldr	r3, [pc, #164]	@ (8000988 <SystemClock_Config+0x154>)
 80008e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008ee:	bf00      	nop
 80008f0:	4b26      	ldr	r3, [pc, #152]	@ (800098c <SystemClock_Config+0x158>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008fc:	d1f8      	bne.n	80008f0 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008fe:	2302      	movs	r3, #2
 8000900:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000902:	2301      	movs	r3, #1
 8000904:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000906:	2340      	movs	r3, #64	@ 0x40
 8000908:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090a:	2302      	movs	r3, #2
 800090c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800090e:	2300      	movs	r3, #0
 8000910:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000912:	2304      	movs	r3, #4
 8000914:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000916:	233c      	movs	r3, #60	@ 0x3c
 8000918:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800091a:	2302      	movs	r3, #2
 800091c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800091e:	2302      	movs	r3, #2
 8000920:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000922:	2302      	movs	r3, #2
 8000924:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000926:	230c      	movs	r3, #12
 8000928:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800092a:	2300      	movs	r3, #0
 800092c:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000932:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000936:	4618      	mov	r0, r3
 8000938:	f000 fe68 	bl	800160c <HAL_RCC_OscConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0x112>
  {
    Error_Handler();
 8000942:	f000 f853 	bl	80009ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000946:	233f      	movs	r3, #63	@ 0x3f
 8000948:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094a:	2303      	movs	r3, #3
 800094c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000952:	2308      	movs	r3, #8
 8000954:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000956:	2340      	movs	r3, #64	@ 0x40
 8000958:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800095a:	2340      	movs	r3, #64	@ 0x40
 800095c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800095e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000962:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000964:	2340      	movs	r3, #64	@ 0x40
 8000966:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	2104      	movs	r1, #4
 800096e:	4618      	mov	r0, r3
 8000970:	f001 faa6 	bl	8001ec0 <HAL_RCC_ClockConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0x14a>
  {
    Error_Handler();
 800097a:	f000 f837 	bl	80009ec <Error_Handler>
  }
}
 800097e:	bf00      	nop
 8000980:	3778      	adds	r7, #120	@ 0x78
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	58000400 	.word	0x58000400
 800098c:	58024800 	.word	0x58024800
 8000990:	58024400 	.word	0x58024400

08000994 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800099a:	463b      	mov	r3, r7
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80009a6:	f000 fbb5 	bl	8001114 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80009aa:	2301      	movs	r3, #1
 80009ac:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80009b6:	231f      	movs	r3, #31
 80009b8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80009ba:	2387      	movs	r3, #135	@ 0x87
 80009bc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80009be:	2300      	movs	r3, #0
 80009c0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80009c2:	2300      	movs	r3, #0
 80009c4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80009c6:	2301      	movs	r3, #1
 80009c8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80009ca:	2301      	movs	r3, #1
 80009cc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80009d2:	2300      	movs	r3, #0
 80009d4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009d6:	463b      	mov	r3, r7
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 fbd3 	bl	8001184 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80009de:	2004      	movs	r0, #4
 80009e0:	f000 fbb0 	bl	8001144 <HAL_MPU_Enable>

}
 80009e4:	bf00      	nop
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80009f0:	b672      	cpsid	i
}
 80009f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <Error_Handler+0x8>

080009f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000a28 <HAL_MspInit+0x30>)
 8000a00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a04:	4a08      	ldr	r2, [pc, #32]	@ (8000a28 <HAL_MspInit+0x30>)
 8000a06:	f043 0302 	orr.w	r3, r3, #2
 8000a0a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a0e:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <HAL_MspInit+0x30>)
 8000a10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a14:	f003 0302 	and.w	r3, r3, #2
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	58024400 	.word	0x58024400

08000a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <NMI_Handler+0x4>

08000a34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <HardFault_Handler+0x4>

08000a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <MemManage_Handler+0x4>

08000a44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <BusFault_Handler+0x4>

08000a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <UsageFault_Handler+0x4>

08000a54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a82:	f000 fa13 	bl	8000eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a94:	4a14      	ldr	r2, [pc, #80]	@ (8000ae8 <_sbrk+0x5c>)
 8000a96:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <_sbrk+0x60>)
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa0:	4b13      	ldr	r3, [pc, #76]	@ (8000af0 <_sbrk+0x64>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d102      	bne.n	8000aae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <_sbrk+0x64>)
 8000aaa:	4a12      	ldr	r2, [pc, #72]	@ (8000af4 <_sbrk+0x68>)
 8000aac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aae:	4b10      	ldr	r3, [pc, #64]	@ (8000af0 <_sbrk+0x64>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d207      	bcs.n	8000acc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000abc:	f007 f81c 	bl	8007af8 <__errno>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aca:	e009      	b.n	8000ae0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000acc:	4b08      	ldr	r3, [pc, #32]	@ (8000af0 <_sbrk+0x64>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ad2:	4b07      	ldr	r3, [pc, #28]	@ (8000af0 <_sbrk+0x64>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4413      	add	r3, r2
 8000ada:	4a05      	ldr	r2, [pc, #20]	@ (8000af0 <_sbrk+0x64>)
 8000adc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ade:	68fb      	ldr	r3, [r7, #12]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3718      	adds	r7, #24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	24080000 	.word	0x24080000
 8000aec:	00000800 	.word	0x00000800
 8000af0:	2400071c 	.word	0x2400071c
 8000af4:	20000000 	.word	0x20000000

08000af8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000afc:	4b37      	ldr	r3, [pc, #220]	@ (8000bdc <SystemInit+0xe4>)
 8000afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b02:	4a36      	ldr	r2, [pc, #216]	@ (8000bdc <SystemInit+0xe4>)
 8000b04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b0c:	4b34      	ldr	r3, [pc, #208]	@ (8000be0 <SystemInit+0xe8>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f003 030f 	and.w	r3, r3, #15
 8000b14:	2b06      	cmp	r3, #6
 8000b16:	d807      	bhi.n	8000b28 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b18:	4b31      	ldr	r3, [pc, #196]	@ (8000be0 <SystemInit+0xe8>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f023 030f 	bic.w	r3, r3, #15
 8000b20:	4a2f      	ldr	r2, [pc, #188]	@ (8000be0 <SystemInit+0xe8>)
 8000b22:	f043 0307 	orr.w	r3, r3, #7
 8000b26:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b28:	4b2e      	ldr	r3, [pc, #184]	@ (8000be4 <SystemInit+0xec>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a2d      	ldr	r2, [pc, #180]	@ (8000be4 <SystemInit+0xec>)
 8000b2e:	f043 0301 	orr.w	r3, r3, #1
 8000b32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b34:	4b2b      	ldr	r3, [pc, #172]	@ (8000be4 <SystemInit+0xec>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000be4 <SystemInit+0xec>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	4929      	ldr	r1, [pc, #164]	@ (8000be4 <SystemInit+0xec>)
 8000b40:	4b29      	ldr	r3, [pc, #164]	@ (8000be8 <SystemInit+0xf0>)
 8000b42:	4013      	ands	r3, r2
 8000b44:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b46:	4b26      	ldr	r3, [pc, #152]	@ (8000be0 <SystemInit+0xe8>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f003 0308 	and.w	r3, r3, #8
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d007      	beq.n	8000b62 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b52:	4b23      	ldr	r3, [pc, #140]	@ (8000be0 <SystemInit+0xe8>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f023 030f 	bic.w	r3, r3, #15
 8000b5a:	4a21      	ldr	r2, [pc, #132]	@ (8000be0 <SystemInit+0xe8>)
 8000b5c:	f043 0307 	orr.w	r3, r3, #7
 8000b60:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b62:	4b20      	ldr	r3, [pc, #128]	@ (8000be4 <SystemInit+0xec>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b68:	4b1e      	ldr	r3, [pc, #120]	@ (8000be4 <SystemInit+0xec>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000be4 <SystemInit+0xec>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b74:	4b1b      	ldr	r3, [pc, #108]	@ (8000be4 <SystemInit+0xec>)
 8000b76:	4a1d      	ldr	r2, [pc, #116]	@ (8000bec <SystemInit+0xf4>)
 8000b78:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000be4 <SystemInit+0xec>)
 8000b7c:	4a1c      	ldr	r2, [pc, #112]	@ (8000bf0 <SystemInit+0xf8>)
 8000b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b80:	4b18      	ldr	r3, [pc, #96]	@ (8000be4 <SystemInit+0xec>)
 8000b82:	4a1c      	ldr	r2, [pc, #112]	@ (8000bf4 <SystemInit+0xfc>)
 8000b84:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b86:	4b17      	ldr	r3, [pc, #92]	@ (8000be4 <SystemInit+0xec>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b8c:	4b15      	ldr	r3, [pc, #84]	@ (8000be4 <SystemInit+0xec>)
 8000b8e:	4a19      	ldr	r2, [pc, #100]	@ (8000bf4 <SystemInit+0xfc>)
 8000b90:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b92:	4b14      	ldr	r3, [pc, #80]	@ (8000be4 <SystemInit+0xec>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b98:	4b12      	ldr	r3, [pc, #72]	@ (8000be4 <SystemInit+0xec>)
 8000b9a:	4a16      	ldr	r2, [pc, #88]	@ (8000bf4 <SystemInit+0xfc>)
 8000b9c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b9e:	4b11      	ldr	r3, [pc, #68]	@ (8000be4 <SystemInit+0xec>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8000be4 <SystemInit+0xec>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0e      	ldr	r2, [pc, #56]	@ (8000be4 <SystemInit+0xec>)
 8000baa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000be4 <SystemInit+0xec>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000bb6:	4b10      	ldr	r3, [pc, #64]	@ (8000bf8 <SystemInit+0x100>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	4b10      	ldr	r3, [pc, #64]	@ (8000bfc <SystemInit+0x104>)
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000bc2:	d202      	bcs.n	8000bca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <SystemInit+0x108>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000bca:	4b0e      	ldr	r3, [pc, #56]	@ (8000c04 <SystemInit+0x10c>)
 8000bcc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000bd0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00
 8000be0:	52002000 	.word	0x52002000
 8000be4:	58024400 	.word	0x58024400
 8000be8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000bec:	02020200 	.word	0x02020200
 8000bf0:	01ff0000 	.word	0x01ff0000
 8000bf4:	01010280 	.word	0x01010280
 8000bf8:	5c001000 	.word	0x5c001000
 8000bfc:	ffff0000 	.word	0xffff0000
 8000c00:	51008108 	.word	0x51008108
 8000c04:	52004000 	.word	0x52004000

08000c08 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c0c:	4b22      	ldr	r3, [pc, #136]	@ (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c0e:	4a23      	ldr	r2, [pc, #140]	@ (8000c9c <MX_USART3_UART_Init+0x94>)
 8000c10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c12:	4b21      	ldr	r3, [pc, #132]	@ (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c20:	4b1d      	ldr	r3, [pc, #116]	@ (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c26:	4b1c      	ldr	r3, [pc, #112]	@ (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c2e:	220c      	movs	r2, #12
 8000c30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c32:	4b19      	ldr	r3, [pc, #100]	@ (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c38:	4b17      	ldr	r3, [pc, #92]	@ (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3e:	4b16      	ldr	r3, [pc, #88]	@ (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c44:	4b14      	ldr	r3, [pc, #80]	@ (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c4a:	4b13      	ldr	r3, [pc, #76]	@ (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c50:	4811      	ldr	r0, [pc, #68]	@ (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c52:	f003 faed 	bl	8004230 <HAL_UART_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c5c:	f7ff fec6 	bl	80009ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c60:	2100      	movs	r1, #0
 8000c62:	480d      	ldr	r0, [pc, #52]	@ (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c64:	f004 fb83 	bl	800536e <HAL_UARTEx_SetTxFifoThreshold>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c6e:	f7ff febd 	bl	80009ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c72:	2100      	movs	r1, #0
 8000c74:	4808      	ldr	r0, [pc, #32]	@ (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c76:	f004 fbb8 	bl	80053ea <HAL_UARTEx_SetRxFifoThreshold>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c80:	f7ff feb4 	bl	80009ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c84:	4804      	ldr	r0, [pc, #16]	@ (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c86:	f004 fb39 	bl	80052fc <HAL_UARTEx_DisableFifoMode>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c90:	f7ff feac 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	24000720 	.word	0x24000720
 8000c9c:	40004800 	.word	0x40004800

08000ca0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b0ba      	sub	sp, #232	@ 0xe8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb8:	f107 0310 	add.w	r3, r7, #16
 8000cbc:	22c0      	movs	r2, #192	@ 0xc0
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f006 febb 	bl	8007a3c <memset>
  if(uartHandle->Instance==USART3)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a27      	ldr	r2, [pc, #156]	@ (8000d68 <HAL_UART_MspInit+0xc8>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d146      	bne.n	8000d5e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cd0:	f04f 0202 	mov.w	r2, #2
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ce2:	f107 0310 	add.w	r3, r7, #16
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f001 fc76 	bl	80025d8 <HAL_RCCEx_PeriphCLKConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000cf2:	f7ff fe7b 	bl	80009ec <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d6c <HAL_UART_MspInit+0xcc>)
 8000cf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cfc:	4a1b      	ldr	r2, [pc, #108]	@ (8000d6c <HAL_UART_MspInit+0xcc>)
 8000cfe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d02:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d06:	4b19      	ldr	r3, [pc, #100]	@ (8000d6c <HAL_UART_MspInit+0xcc>)
 8000d08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d14:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <HAL_UART_MspInit+0xcc>)
 8000d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d1a:	4a14      	ldr	r2, [pc, #80]	@ (8000d6c <HAL_UART_MspInit+0xcc>)
 8000d1c:	f043 0308 	orr.w	r3, r3, #8
 8000d20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d24:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <HAL_UART_MspInit+0xcc>)
 8000d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d2a:	f003 0308 	and.w	r3, r3, #8
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d32:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d4c:	2307      	movs	r3, #7
 8000d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d52:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d56:	4619      	mov	r1, r3
 8000d58:	4805      	ldr	r0, [pc, #20]	@ (8000d70 <HAL_UART_MspInit+0xd0>)
 8000d5a:	f000 fa53 	bl	8001204 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d5e:	bf00      	nop
 8000d60:	37e8      	adds	r7, #232	@ 0xe8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40004800 	.word	0x40004800
 8000d6c:	58024400 	.word	0x58024400
 8000d70:	58020c00 	.word	0x58020c00

08000d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d78:	f7ff febe 	bl	8000af8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d7c:	480c      	ldr	r0, [pc, #48]	@ (8000db0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d7e:	490d      	ldr	r1, [pc, #52]	@ (8000db4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d80:	4a0d      	ldr	r2, [pc, #52]	@ (8000db8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d84:	e002      	b.n	8000d8c <LoopCopyDataInit>

08000d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8a:	3304      	adds	r3, #4

08000d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d90:	d3f9      	bcc.n	8000d86 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d92:	4a0a      	ldr	r2, [pc, #40]	@ (8000dbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d94:	4c0a      	ldr	r4, [pc, #40]	@ (8000dc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d98:	e001      	b.n	8000d9e <LoopFillZerobss>

08000d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d9c:	3204      	adds	r2, #4

08000d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da0:	d3fb      	bcc.n	8000d9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000da2:	f006 feaf 	bl	8007b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000da6:	f7ff fcc5 	bl	8000734 <main>
  bx  lr
 8000daa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000db0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000db4:	240006f8 	.word	0x240006f8
  ldr r2, =_sidata
 8000db8:	08008e6c 	.word	0x08008e6c
  ldr r2, =_sbss
 8000dbc:	24000700 	.word	0x24000700
  ldr r4, =_ebss
 8000dc0:	24000a44 	.word	0x24000a44

08000dc4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc4:	e7fe      	b.n	8000dc4 <ADC3_IRQHandler>
	...

08000dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dce:	2003      	movs	r0, #3
 8000dd0:	f000 f96e 	bl	80010b0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000dd4:	f001 fa2a 	bl	800222c <HAL_RCC_GetSysClockFreq>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <HAL_Init+0x68>)
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	0a1b      	lsrs	r3, r3, #8
 8000de0:	f003 030f 	and.w	r3, r3, #15
 8000de4:	4913      	ldr	r1, [pc, #76]	@ (8000e34 <HAL_Init+0x6c>)
 8000de6:	5ccb      	ldrb	r3, [r1, r3]
 8000de8:	f003 031f 	and.w	r3, r3, #31
 8000dec:	fa22 f303 	lsr.w	r3, r2, r3
 8000df0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000df2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e30 <HAL_Init+0x68>)
 8000df4:	699b      	ldr	r3, [r3, #24]
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	4a0e      	ldr	r2, [pc, #56]	@ (8000e34 <HAL_Init+0x6c>)
 8000dfc:	5cd3      	ldrb	r3, [r2, r3]
 8000dfe:	f003 031f 	and.w	r3, r3, #31
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	fa22 f303 	lsr.w	r3, r2, r3
 8000e08:	4a0b      	ldr	r2, [pc, #44]	@ (8000e38 <HAL_Init+0x70>)
 8000e0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e0c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e3c <HAL_Init+0x74>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e12:	200f      	movs	r0, #15
 8000e14:	f000 f814 	bl	8000e40 <HAL_InitTick>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e002      	b.n	8000e28 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e22:	f7ff fde9 	bl	80009f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	58024400 	.word	0x58024400
 8000e34:	080088c0 	.word	0x080088c0
 8000e38:	24000004 	.word	0x24000004
 8000e3c:	24000000 	.word	0x24000000

08000e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e48:	4b15      	ldr	r3, [pc, #84]	@ (8000ea0 <HAL_InitTick+0x60>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d101      	bne.n	8000e54 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e021      	b.n	8000e98 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e54:	4b13      	ldr	r3, [pc, #76]	@ (8000ea4 <HAL_InitTick+0x64>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <HAL_InitTick+0x60>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f945 	bl	80010fa <HAL_SYSTICK_Config>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00e      	b.n	8000e98 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b0f      	cmp	r3, #15
 8000e7e:	d80a      	bhi.n	8000e96 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e80:	2200      	movs	r2, #0
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f000 f91d 	bl	80010c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e8c:	4a06      	ldr	r2, [pc, #24]	@ (8000ea8 <HAL_InitTick+0x68>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	e000      	b.n	8000e98 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	2400000c 	.word	0x2400000c
 8000ea4:	24000000 	.word	0x24000000
 8000ea8:	24000008 	.word	0x24000008

08000eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	@ (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	2400000c 	.word	0x2400000c
 8000ed0:	240007b4 	.word	0x240007b4

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	@ (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	240007b4 	.word	0x240007b4

08000eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef4:	f7ff ffee 	bl	8000ed4 <HAL_GetTick>
 8000ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f04:	d005      	beq.n	8000f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f06:	4b0a      	ldr	r3, [pc, #40]	@ (8000f30 <HAL_Delay+0x44>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4413      	add	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f12:	bf00      	nop
 8000f14:	f7ff ffde 	bl	8000ed4 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d8f7      	bhi.n	8000f14 <HAL_Delay+0x28>
  {
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	2400000c 	.word	0x2400000c

08000f34 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f38:	4b03      	ldr	r3, [pc, #12]	@ (8000f48 <HAL_GetREVID+0x14>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	0c1b      	lsrs	r3, r3, #16
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	5c001000 	.word	0x5c001000

08000f4c <__NVIC_SetPriorityGrouping>:
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <__NVIC_SetPriorityGrouping+0x40>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f76:	4313      	orrs	r3, r2
 8000f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7a:	4a04      	ldr	r2, [pc, #16]	@ (8000f8c <__NVIC_SetPriorityGrouping+0x40>)
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	60d3      	str	r3, [r2, #12]
}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00
 8000f90:	05fa0000 	.word	0x05fa0000

08000f94 <__NVIC_GetPriorityGrouping>:
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f98:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <__NVIC_GetPriorityGrouping+0x18>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	0a1b      	lsrs	r3, r3, #8
 8000f9e:	f003 0307 	and.w	r3, r3, #7
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_SetPriority>:
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	6039      	str	r1, [r7, #0]
 8000fba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	db0a      	blt.n	8000fda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	490c      	ldr	r1, [pc, #48]	@ (8000ffc <__NVIC_SetPriority+0x4c>)
 8000fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fce:	0112      	lsls	r2, r2, #4
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000fd8:	e00a      	b.n	8000ff0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4908      	ldr	r1, [pc, #32]	@ (8001000 <__NVIC_SetPriority+0x50>)
 8000fe0:	88fb      	ldrh	r3, [r7, #6]
 8000fe2:	f003 030f 	and.w	r3, r3, #15
 8000fe6:	3b04      	subs	r3, #4
 8000fe8:	0112      	lsls	r2, r2, #4
 8000fea:	b2d2      	uxtb	r2, r2
 8000fec:	440b      	add	r3, r1
 8000fee:	761a      	strb	r2, [r3, #24]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000e100 	.word	0xe000e100
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <NVIC_EncodePriority>:
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	@ 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	f1c3 0307 	rsb	r3, r3, #7
 800101e:	2b04      	cmp	r3, #4
 8001020:	bf28      	it	cs
 8001022:	2304      	movcs	r3, #4
 8001024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3304      	adds	r3, #4
 800102a:	2b06      	cmp	r3, #6
 800102c:	d902      	bls.n	8001034 <NVIC_EncodePriority+0x30>
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3b03      	subs	r3, #3
 8001032:	e000      	b.n	8001036 <NVIC_EncodePriority+0x32>
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	f04f 32ff 	mov.w	r2, #4294967295
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43da      	mvns	r2, r3
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	401a      	ands	r2, r3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800104c:	f04f 31ff 	mov.w	r1, #4294967295
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	fa01 f303 	lsl.w	r3, r1, r3
 8001056:	43d9      	mvns	r1, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	4313      	orrs	r3, r2
}
 800105e:	4618      	mov	r0, r3
 8001060:	3724      	adds	r7, #36	@ 0x24
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800107c:	d301      	bcc.n	8001082 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800107e:	2301      	movs	r3, #1
 8001080:	e00f      	b.n	80010a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001082:	4a0a      	ldr	r2, [pc, #40]	@ (80010ac <SysTick_Config+0x40>)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3b01      	subs	r3, #1
 8001088:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108a:	210f      	movs	r1, #15
 800108c:	f04f 30ff 	mov.w	r0, #4294967295
 8001090:	f7ff ff8e 	bl	8000fb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001094:	4b05      	ldr	r3, [pc, #20]	@ (80010ac <SysTick_Config+0x40>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109a:	4b04      	ldr	r3, [pc, #16]	@ (80010ac <SysTick_Config+0x40>)
 800109c:	2207      	movs	r2, #7
 800109e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	e000e010 	.word	0xe000e010

080010b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff ff47 	bl	8000f4c <__NVIC_SetPriorityGrouping>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b086      	sub	sp, #24
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	4603      	mov	r3, r0
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	607a      	str	r2, [r7, #4]
 80010d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010d4:	f7ff ff5e 	bl	8000f94 <__NVIC_GetPriorityGrouping>
 80010d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	6978      	ldr	r0, [r7, #20]
 80010e0:	f7ff ff90 	bl	8001004 <NVIC_EncodePriority>
 80010e4:	4602      	mov	r2, r0
 80010e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff5f 	bl	8000fb0 <__NVIC_SetPriority>
}
 80010f2:	bf00      	nop
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ffb2 	bl	800106c <SysTick_Config>
 8001108:	4603      	mov	r3, r0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001118:	f3bf 8f5f 	dmb	sy
}
 800111c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800111e:	4b07      	ldr	r3, [pc, #28]	@ (800113c <HAL_MPU_Disable+0x28>)
 8001120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001122:	4a06      	ldr	r2, [pc, #24]	@ (800113c <HAL_MPU_Disable+0x28>)
 8001124:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001128:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800112a:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <HAL_MPU_Disable+0x2c>)
 800112c:	2200      	movs	r2, #0
 800112e:	605a      	str	r2, [r3, #4]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000ed00 	.word	0xe000ed00
 8001140:	e000ed90 	.word	0xe000ed90

08001144 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800114c:	4a0b      	ldr	r2, [pc, #44]	@ (800117c <HAL_MPU_Enable+0x38>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001156:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <HAL_MPU_Enable+0x3c>)
 8001158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800115a:	4a09      	ldr	r2, [pc, #36]	@ (8001180 <HAL_MPU_Enable+0x3c>)
 800115c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001160:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001162:	f3bf 8f4f 	dsb	sy
}
 8001166:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001168:	f3bf 8f6f 	isb	sy
}
 800116c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000ed90 	.word	0xe000ed90
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	785a      	ldrb	r2, [r3, #1]
 8001190:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <HAL_MPU_ConfigRegion+0x7c>)
 8001192:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001194:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <HAL_MPU_ConfigRegion+0x7c>)
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	4a19      	ldr	r2, [pc, #100]	@ (8001200 <HAL_MPU_ConfigRegion+0x7c>)
 800119a:	f023 0301 	bic.w	r3, r3, #1
 800119e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80011a0:	4a17      	ldr	r2, [pc, #92]	@ (8001200 <HAL_MPU_ConfigRegion+0x7c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	7b1b      	ldrb	r3, [r3, #12]
 80011ac:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	7adb      	ldrb	r3, [r3, #11]
 80011b2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7a9b      	ldrb	r3, [r3, #10]
 80011ba:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	7b5b      	ldrb	r3, [r3, #13]
 80011c2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	7b9b      	ldrb	r3, [r3, #14]
 80011ca:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	7bdb      	ldrb	r3, [r3, #15]
 80011d2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	7a5b      	ldrb	r3, [r3, #9]
 80011da:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7a1b      	ldrb	r3, [r3, #8]
 80011e2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011e4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	7812      	ldrb	r2, [r2, #0]
 80011ea:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011ec:	4a04      	ldr	r2, [pc, #16]	@ (8001200 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011ee:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011f0:	6113      	str	r3, [r2, #16]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000ed90 	.word	0xe000ed90

08001204 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	@ 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001212:	4b89      	ldr	r3, [pc, #548]	@ (8001438 <HAL_GPIO_Init+0x234>)
 8001214:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001216:	e194      	b.n	8001542 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	2101      	movs	r1, #1
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	fa01 f303 	lsl.w	r3, r1, r3
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	2b00      	cmp	r3, #0
 800122c:	f000 8186 	beq.w	800153c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	2b01      	cmp	r3, #1
 800123a:	d005      	beq.n	8001248 <HAL_GPIO_Init+0x44>
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0303 	and.w	r3, r3, #3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d130      	bne.n	80012aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	68da      	ldr	r2, [r3, #12]
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800127e:	2201      	movs	r2, #1
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	091b      	lsrs	r3, r3, #4
 8001294:	f003 0201 	and.w	r2, r3, #1
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0303 	and.w	r3, r3, #3
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	d017      	beq.n	80012e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	2203      	movs	r2, #3
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	689a      	ldr	r2, [r3, #8]
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d123      	bne.n	800133a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	08da      	lsrs	r2, r3, #3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3208      	adds	r2, #8
 80012fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	220f      	movs	r2, #15
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	691a      	ldr	r2, [r3, #16]
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	08da      	lsrs	r2, r3, #3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3208      	adds	r2, #8
 8001334:	69b9      	ldr	r1, [r7, #24]
 8001336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 0203 	and.w	r2, r3, #3
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 80e0 	beq.w	800153c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137c:	4b2f      	ldr	r3, [pc, #188]	@ (800143c <HAL_GPIO_Init+0x238>)
 800137e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001382:	4a2e      	ldr	r2, [pc, #184]	@ (800143c <HAL_GPIO_Init+0x238>)
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800138c:	4b2b      	ldr	r3, [pc, #172]	@ (800143c <HAL_GPIO_Init+0x238>)
 800138e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800139a:	4a29      	ldr	r2, [pc, #164]	@ (8001440 <HAL_GPIO_Init+0x23c>)
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	089b      	lsrs	r3, r3, #2
 80013a0:	3302      	adds	r3, #2
 80013a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f003 0303 	and.w	r3, r3, #3
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	220f      	movs	r2, #15
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a20      	ldr	r2, [pc, #128]	@ (8001444 <HAL_GPIO_Init+0x240>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d052      	beq.n	800146c <HAL_GPIO_Init+0x268>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a1f      	ldr	r2, [pc, #124]	@ (8001448 <HAL_GPIO_Init+0x244>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d031      	beq.n	8001432 <HAL_GPIO_Init+0x22e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a1e      	ldr	r2, [pc, #120]	@ (800144c <HAL_GPIO_Init+0x248>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d02b      	beq.n	800142e <HAL_GPIO_Init+0x22a>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001450 <HAL_GPIO_Init+0x24c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d025      	beq.n	800142a <HAL_GPIO_Init+0x226>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001454 <HAL_GPIO_Init+0x250>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d01f      	beq.n	8001426 <HAL_GPIO_Init+0x222>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001458 <HAL_GPIO_Init+0x254>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d019      	beq.n	8001422 <HAL_GPIO_Init+0x21e>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a1a      	ldr	r2, [pc, #104]	@ (800145c <HAL_GPIO_Init+0x258>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d013      	beq.n	800141e <HAL_GPIO_Init+0x21a>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a19      	ldr	r2, [pc, #100]	@ (8001460 <HAL_GPIO_Init+0x25c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d00d      	beq.n	800141a <HAL_GPIO_Init+0x216>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a18      	ldr	r2, [pc, #96]	@ (8001464 <HAL_GPIO_Init+0x260>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d007      	beq.n	8001416 <HAL_GPIO_Init+0x212>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a17      	ldr	r2, [pc, #92]	@ (8001468 <HAL_GPIO_Init+0x264>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d101      	bne.n	8001412 <HAL_GPIO_Init+0x20e>
 800140e:	2309      	movs	r3, #9
 8001410:	e02d      	b.n	800146e <HAL_GPIO_Init+0x26a>
 8001412:	230a      	movs	r3, #10
 8001414:	e02b      	b.n	800146e <HAL_GPIO_Init+0x26a>
 8001416:	2308      	movs	r3, #8
 8001418:	e029      	b.n	800146e <HAL_GPIO_Init+0x26a>
 800141a:	2307      	movs	r3, #7
 800141c:	e027      	b.n	800146e <HAL_GPIO_Init+0x26a>
 800141e:	2306      	movs	r3, #6
 8001420:	e025      	b.n	800146e <HAL_GPIO_Init+0x26a>
 8001422:	2305      	movs	r3, #5
 8001424:	e023      	b.n	800146e <HAL_GPIO_Init+0x26a>
 8001426:	2304      	movs	r3, #4
 8001428:	e021      	b.n	800146e <HAL_GPIO_Init+0x26a>
 800142a:	2303      	movs	r3, #3
 800142c:	e01f      	b.n	800146e <HAL_GPIO_Init+0x26a>
 800142e:	2302      	movs	r3, #2
 8001430:	e01d      	b.n	800146e <HAL_GPIO_Init+0x26a>
 8001432:	2301      	movs	r3, #1
 8001434:	e01b      	b.n	800146e <HAL_GPIO_Init+0x26a>
 8001436:	bf00      	nop
 8001438:	58000080 	.word	0x58000080
 800143c:	58024400 	.word	0x58024400
 8001440:	58000400 	.word	0x58000400
 8001444:	58020000 	.word	0x58020000
 8001448:	58020400 	.word	0x58020400
 800144c:	58020800 	.word	0x58020800
 8001450:	58020c00 	.word	0x58020c00
 8001454:	58021000 	.word	0x58021000
 8001458:	58021400 	.word	0x58021400
 800145c:	58021800 	.word	0x58021800
 8001460:	58021c00 	.word	0x58021c00
 8001464:	58022000 	.word	0x58022000
 8001468:	58022400 	.word	0x58022400
 800146c:	2300      	movs	r3, #0
 800146e:	69fa      	ldr	r2, [r7, #28]
 8001470:	f002 0203 	and.w	r2, r2, #3
 8001474:	0092      	lsls	r2, r2, #2
 8001476:	4093      	lsls	r3, r2
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800147e:	4938      	ldr	r1, [pc, #224]	@ (8001560 <HAL_GPIO_Init+0x35c>)
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	089b      	lsrs	r3, r3, #2
 8001484:	3302      	adds	r3, #2
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800148c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80014b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80014ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80014e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	3301      	adds	r3, #1
 8001540:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	fa22 f303 	lsr.w	r3, r2, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	f47f ae63 	bne.w	8001218 <HAL_GPIO_Init+0x14>
  }
}
 8001552:	bf00      	nop
 8001554:	bf00      	nop
 8001556:	3724      	adds	r7, #36	@ 0x24
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	58000400 	.word	0x58000400

08001564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	807b      	strh	r3, [r7, #2]
 8001570:	4613      	mov	r3, r2
 8001572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001574:	787b      	ldrb	r3, [r7, #1]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800157a:	887a      	ldrh	r2, [r7, #2]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001580:	e003      	b.n	800158a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001582:	887b      	ldrh	r3, [r7, #2]
 8001584:	041a      	lsls	r2, r3, #16
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	619a      	str	r2, [r3, #24]
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80015a0:	4b19      	ldr	r3, [pc, #100]	@ (8001608 <HAL_PWREx_ConfigSupply+0x70>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b04      	cmp	r3, #4
 80015aa:	d00a      	beq.n	80015c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80015ac:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <HAL_PWREx_ConfigSupply+0x70>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d001      	beq.n	80015be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e01f      	b.n	80015fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	e01d      	b.n	80015fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80015c2:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <HAL_PWREx_ConfigSupply+0x70>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	f023 0207 	bic.w	r2, r3, #7
 80015ca:	490f      	ldr	r1, [pc, #60]	@ (8001608 <HAL_PWREx_ConfigSupply+0x70>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80015d2:	f7ff fc7f 	bl	8000ed4 <HAL_GetTick>
 80015d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015d8:	e009      	b.n	80015ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80015da:	f7ff fc7b 	bl	8000ed4 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015e8:	d901      	bls.n	80015ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e007      	b.n	80015fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015ee:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <HAL_PWREx_ConfigSupply+0x70>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015fa:	d1ee      	bne.n	80015da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	58024800 	.word	0x58024800

0800160c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08c      	sub	sp, #48	@ 0x30
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d102      	bne.n	8001620 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	f000 bc48 	b.w	8001eb0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 8088 	beq.w	800173e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800162e:	4b99      	ldr	r3, [pc, #612]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001636:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001638:	4b96      	ldr	r3, [pc, #600]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 800163a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800163c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800163e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001640:	2b10      	cmp	r3, #16
 8001642:	d007      	beq.n	8001654 <HAL_RCC_OscConfig+0x48>
 8001644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001646:	2b18      	cmp	r3, #24
 8001648:	d111      	bne.n	800166e <HAL_RCC_OscConfig+0x62>
 800164a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d10c      	bne.n	800166e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001654:	4b8f      	ldr	r3, [pc, #572]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d06d      	beq.n	800173c <HAL_RCC_OscConfig+0x130>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d169      	bne.n	800173c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	f000 bc21 	b.w	8001eb0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001676:	d106      	bne.n	8001686 <HAL_RCC_OscConfig+0x7a>
 8001678:	4b86      	ldr	r3, [pc, #536]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a85      	ldr	r2, [pc, #532]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 800167e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	e02e      	b.n	80016e4 <HAL_RCC_OscConfig+0xd8>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x9c>
 800168e:	4b81      	ldr	r3, [pc, #516]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a80      	ldr	r2, [pc, #512]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 8001694:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	4b7e      	ldr	r3, [pc, #504]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a7d      	ldr	r2, [pc, #500]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 80016a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	e01d      	b.n	80016e4 <HAL_RCC_OscConfig+0xd8>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016b0:	d10c      	bne.n	80016cc <HAL_RCC_OscConfig+0xc0>
 80016b2:	4b78      	ldr	r3, [pc, #480]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a77      	ldr	r2, [pc, #476]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 80016b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	4b75      	ldr	r3, [pc, #468]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a74      	ldr	r2, [pc, #464]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 80016c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	e00b      	b.n	80016e4 <HAL_RCC_OscConfig+0xd8>
 80016cc:	4b71      	ldr	r3, [pc, #452]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a70      	ldr	r2, [pc, #448]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 80016d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	4b6e      	ldr	r3, [pc, #440]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a6d      	ldr	r2, [pc, #436]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 80016de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d013      	beq.n	8001714 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ec:	f7ff fbf2 	bl	8000ed4 <HAL_GetTick>
 80016f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f4:	f7ff fbee 	bl	8000ed4 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b64      	cmp	r3, #100	@ 0x64
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e3d4      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001706:	4b63      	ldr	r3, [pc, #396]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCC_OscConfig+0xe8>
 8001712:	e014      	b.n	800173e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001714:	f7ff fbde 	bl	8000ed4 <HAL_GetTick>
 8001718:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800171c:	f7ff fbda 	bl	8000ed4 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b64      	cmp	r3, #100	@ 0x64
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e3c0      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800172e:	4b59      	ldr	r3, [pc, #356]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x110>
 800173a:	e000      	b.n	800173e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 80ca 	beq.w	80018e0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800174c:	4b51      	ldr	r3, [pc, #324]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001754:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001756:	4b4f      	ldr	r3, [pc, #316]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 8001758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800175a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d007      	beq.n	8001772 <HAL_RCC_OscConfig+0x166>
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	2b18      	cmp	r3, #24
 8001766:	d156      	bne.n	8001816 <HAL_RCC_OscConfig+0x20a>
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d151      	bne.n	8001816 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001772:	4b48      	ldr	r3, [pc, #288]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0304 	and.w	r3, r3, #4
 800177a:	2b00      	cmp	r3, #0
 800177c:	d005      	beq.n	800178a <HAL_RCC_OscConfig+0x17e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e392      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800178a:	4b42      	ldr	r3, [pc, #264]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f023 0219 	bic.w	r2, r3, #25
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	493f      	ldr	r1, [pc, #252]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 8001798:	4313      	orrs	r3, r2
 800179a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179c:	f7ff fb9a 	bl	8000ed4 <HAL_GetTick>
 80017a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a4:	f7ff fb96 	bl	8000ed4 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e37c      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017b6:	4b37      	ldr	r3, [pc, #220]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0f0      	beq.n	80017a4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c2:	f7ff fbb7 	bl	8000f34 <HAL_GetREVID>
 80017c6:	4603      	mov	r3, r0
 80017c8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d817      	bhi.n	8001800 <HAL_RCC_OscConfig+0x1f4>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	2b40      	cmp	r3, #64	@ 0x40
 80017d6:	d108      	bne.n	80017ea <HAL_RCC_OscConfig+0x1de>
 80017d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80017e0:	4a2c      	ldr	r2, [pc, #176]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 80017e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017e6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017e8:	e07a      	b.n	80018e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	031b      	lsls	r3, r3, #12
 80017f8:	4926      	ldr	r1, [pc, #152]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017fe:	e06f      	b.n	80018e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001800:	4b24      	ldr	r3, [pc, #144]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	061b      	lsls	r3, r3, #24
 800180e:	4921      	ldr	r1, [pc, #132]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 8001810:	4313      	orrs	r3, r2
 8001812:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001814:	e064      	b.n	80018e0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d047      	beq.n	80018ae <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800181e:	4b1d      	ldr	r3, [pc, #116]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 0219 	bic.w	r2, r3, #25
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	491a      	ldr	r1, [pc, #104]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 800182c:	4313      	orrs	r3, r2
 800182e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001830:	f7ff fb50 	bl	8000ed4 <HAL_GetTick>
 8001834:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001838:	f7ff fb4c 	bl	8000ed4 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e332      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800184a:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f0      	beq.n	8001838 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001856:	f7ff fb6d 	bl	8000f34 <HAL_GetREVID>
 800185a:	4603      	mov	r3, r0
 800185c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001860:	4293      	cmp	r3, r2
 8001862:	d819      	bhi.n	8001898 <HAL_RCC_OscConfig+0x28c>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	2b40      	cmp	r3, #64	@ 0x40
 800186a:	d108      	bne.n	800187e <HAL_RCC_OscConfig+0x272>
 800186c:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001874:	4a07      	ldr	r2, [pc, #28]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 8001876:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800187a:	6053      	str	r3, [r2, #4]
 800187c:	e030      	b.n	80018e0 <HAL_RCC_OscConfig+0x2d4>
 800187e:	4b05      	ldr	r3, [pc, #20]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	031b      	lsls	r3, r3, #12
 800188c:	4901      	ldr	r1, [pc, #4]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 800188e:	4313      	orrs	r3, r2
 8001890:	604b      	str	r3, [r1, #4]
 8001892:	e025      	b.n	80018e0 <HAL_RCC_OscConfig+0x2d4>
 8001894:	58024400 	.word	0x58024400
 8001898:	4b9a      	ldr	r3, [pc, #616]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	061b      	lsls	r3, r3, #24
 80018a6:	4997      	ldr	r1, [pc, #604]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	604b      	str	r3, [r1, #4]
 80018ac:	e018      	b.n	80018e0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ae:	4b95      	ldr	r3, [pc, #596]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a94      	ldr	r2, [pc, #592]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80018b4:	f023 0301 	bic.w	r3, r3, #1
 80018b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ba:	f7ff fb0b 	bl	8000ed4 <HAL_GetTick>
 80018be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c2:	f7ff fb07 	bl	8000ed4 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e2ed      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018d4:	4b8b      	ldr	r3, [pc, #556]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1f0      	bne.n	80018c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 80a9 	beq.w	8001a40 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ee:	4b85      	ldr	r3, [pc, #532]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018f8:	4b82      	ldr	r3, [pc, #520]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80018fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018fc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	2b08      	cmp	r3, #8
 8001902:	d007      	beq.n	8001914 <HAL_RCC_OscConfig+0x308>
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	2b18      	cmp	r3, #24
 8001908:	d13a      	bne.n	8001980 <HAL_RCC_OscConfig+0x374>
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	2b01      	cmp	r3, #1
 8001912:	d135      	bne.n	8001980 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001914:	4b7b      	ldr	r3, [pc, #492]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <HAL_RCC_OscConfig+0x320>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	2b80      	cmp	r3, #128	@ 0x80
 8001926:	d001      	beq.n	800192c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e2c1      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800192c:	f7ff fb02 	bl	8000f34 <HAL_GetREVID>
 8001930:	4603      	mov	r3, r0
 8001932:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001936:	4293      	cmp	r3, r2
 8001938:	d817      	bhi.n	800196a <HAL_RCC_OscConfig+0x35e>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	2b20      	cmp	r3, #32
 8001940:	d108      	bne.n	8001954 <HAL_RCC_OscConfig+0x348>
 8001942:	4b70      	ldr	r3, [pc, #448]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800194a:	4a6e      	ldr	r2, [pc, #440]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 800194c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001950:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001952:	e075      	b.n	8001a40 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001954:	4b6b      	ldr	r3, [pc, #428]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	069b      	lsls	r3, r3, #26
 8001962:	4968      	ldr	r1, [pc, #416]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001964:	4313      	orrs	r3, r2
 8001966:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001968:	e06a      	b.n	8001a40 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800196a:	4b66      	ldr	r3, [pc, #408]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	061b      	lsls	r3, r3, #24
 8001978:	4962      	ldr	r1, [pc, #392]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 800197a:	4313      	orrs	r3, r2
 800197c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800197e:	e05f      	b.n	8001a40 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d042      	beq.n	8001a0e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001988:	4b5e      	ldr	r3, [pc, #376]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a5d      	ldr	r2, [pc, #372]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 800198e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001994:	f7ff fa9e 	bl	8000ed4 <HAL_GetTick>
 8001998:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800199c:	f7ff fa9a 	bl	8000ed4 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e280      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019ae:	4b55      	ldr	r3, [pc, #340]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019ba:	f7ff fabb 	bl	8000f34 <HAL_GetREVID>
 80019be:	4603      	mov	r3, r0
 80019c0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d817      	bhi.n	80019f8 <HAL_RCC_OscConfig+0x3ec>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	2b20      	cmp	r3, #32
 80019ce:	d108      	bne.n	80019e2 <HAL_RCC_OscConfig+0x3d6>
 80019d0:	4b4c      	ldr	r3, [pc, #304]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80019d8:	4a4a      	ldr	r2, [pc, #296]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80019da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80019de:	6053      	str	r3, [r2, #4]
 80019e0:	e02e      	b.n	8001a40 <HAL_RCC_OscConfig+0x434>
 80019e2:	4b48      	ldr	r3, [pc, #288]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	069b      	lsls	r3, r3, #26
 80019f0:	4944      	ldr	r1, [pc, #272]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	604b      	str	r3, [r1, #4]
 80019f6:	e023      	b.n	8001a40 <HAL_RCC_OscConfig+0x434>
 80019f8:	4b42      	ldr	r3, [pc, #264]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	061b      	lsls	r3, r3, #24
 8001a06:	493f      	ldr	r1, [pc, #252]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	60cb      	str	r3, [r1, #12]
 8001a0c:	e018      	b.n	8001a40 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001a0e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a3c      	ldr	r2, [pc, #240]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001a14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1a:	f7ff fa5b 	bl	8000ed4 <HAL_GetTick>
 8001a1e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001a22:	f7ff fa57 	bl	8000ed4 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e23d      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a34:	4b33      	ldr	r3, [pc, #204]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f0      	bne.n	8001a22 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d036      	beq.n	8001aba <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d019      	beq.n	8001a88 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a54:	4b2b      	ldr	r3, [pc, #172]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001a56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a58:	4a2a      	ldr	r2, [pc, #168]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a60:	f7ff fa38 	bl	8000ed4 <HAL_GetTick>
 8001a64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a68:	f7ff fa34 	bl	8000ed4 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e21a      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a7a:	4b22      	ldr	r3, [pc, #136]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001a7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0x45c>
 8001a86:	e018      	b.n	8001aba <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a88:	4b1e      	ldr	r3, [pc, #120]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001a8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a8c:	4a1d      	ldr	r2, [pc, #116]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001a8e:	f023 0301 	bic.w	r3, r3, #1
 8001a92:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a94:	f7ff fa1e 	bl	8000ed4 <HAL_GetTick>
 8001a98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a9c:	f7ff fa1a 	bl	8000ed4 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e200      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001aae:	4b15      	ldr	r3, [pc, #84]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001ab0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0320 	and.w	r3, r3, #32
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d039      	beq.n	8001b3a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d01c      	beq.n	8001b08 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ace:	4b0d      	ldr	r3, [pc, #52]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a0c      	ldr	r2, [pc, #48]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001ad4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ad8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ada:	f7ff f9fb 	bl	8000ed4 <HAL_GetTick>
 8001ade:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ae2:	f7ff f9f7 	bl	8000ed4 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e1dd      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001af4:	4b03      	ldr	r3, [pc, #12]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x4d6>
 8001b00:	e01b      	b.n	8001b3a <HAL_RCC_OscConfig+0x52e>
 8001b02:	bf00      	nop
 8001b04:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b08:	4b9b      	ldr	r3, [pc, #620]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a9a      	ldr	r2, [pc, #616]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001b0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b12:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b14:	f7ff f9de 	bl	8000ed4 <HAL_GetTick>
 8001b18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b1c:	f7ff f9da 	bl	8000ed4 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e1c0      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b2e:	4b92      	ldr	r3, [pc, #584]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f0      	bne.n	8001b1c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 8081 	beq.w	8001c4a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b48:	4b8c      	ldr	r3, [pc, #560]	@ (8001d7c <HAL_RCC_OscConfig+0x770>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a8b      	ldr	r2, [pc, #556]	@ (8001d7c <HAL_RCC_OscConfig+0x770>)
 8001b4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b54:	f7ff f9be 	bl	8000ed4 <HAL_GetTick>
 8001b58:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b5c:	f7ff f9ba 	bl	8000ed4 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	@ 0x64
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e1a0      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b6e:	4b83      	ldr	r3, [pc, #524]	@ (8001d7c <HAL_RCC_OscConfig+0x770>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d106      	bne.n	8001b90 <HAL_RCC_OscConfig+0x584>
 8001b82:	4b7d      	ldr	r3, [pc, #500]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b86:	4a7c      	ldr	r2, [pc, #496]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b8e:	e02d      	b.n	8001bec <HAL_RCC_OscConfig+0x5e0>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10c      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x5a6>
 8001b98:	4b77      	ldr	r3, [pc, #476]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b9c:	4a76      	ldr	r2, [pc, #472]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001b9e:	f023 0301 	bic.w	r3, r3, #1
 8001ba2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ba4:	4b74      	ldr	r3, [pc, #464]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ba8:	4a73      	ldr	r2, [pc, #460]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001baa:	f023 0304 	bic.w	r3, r3, #4
 8001bae:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bb0:	e01c      	b.n	8001bec <HAL_RCC_OscConfig+0x5e0>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b05      	cmp	r3, #5
 8001bb8:	d10c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x5c8>
 8001bba:	4b6f      	ldr	r3, [pc, #444]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bbe:	4a6e      	ldr	r2, [pc, #440]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001bc0:	f043 0304 	orr.w	r3, r3, #4
 8001bc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bc6:	4b6c      	ldr	r3, [pc, #432]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bca:	4a6b      	ldr	r2, [pc, #428]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bd2:	e00b      	b.n	8001bec <HAL_RCC_OscConfig+0x5e0>
 8001bd4:	4b68      	ldr	r3, [pc, #416]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bd8:	4a67      	ldr	r2, [pc, #412]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001bda:	f023 0301 	bic.w	r3, r3, #1
 8001bde:	6713      	str	r3, [r2, #112]	@ 0x70
 8001be0:	4b65      	ldr	r3, [pc, #404]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001be4:	4a64      	ldr	r2, [pc, #400]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001be6:	f023 0304 	bic.w	r3, r3, #4
 8001bea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d015      	beq.n	8001c20 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf4:	f7ff f96e 	bl	8000ed4 <HAL_GetTick>
 8001bf8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bfa:	e00a      	b.n	8001c12 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfc:	f7ff f96a 	bl	8000ed4 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e14e      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c12:	4b59      	ldr	r3, [pc, #356]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0ee      	beq.n	8001bfc <HAL_RCC_OscConfig+0x5f0>
 8001c1e:	e014      	b.n	8001c4a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c20:	f7ff f958 	bl	8000ed4 <HAL_GetTick>
 8001c24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c26:	e00a      	b.n	8001c3e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c28:	f7ff f954 	bl	8000ed4 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e138      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c3e:	4b4e      	ldr	r3, [pc, #312]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1ee      	bne.n	8001c28 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 812d 	beq.w	8001eae <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001c54:	4b48      	ldr	r3, [pc, #288]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c5c:	2b18      	cmp	r3, #24
 8001c5e:	f000 80bd 	beq.w	8001ddc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	f040 809e 	bne.w	8001da8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6c:	4b42      	ldr	r3, [pc, #264]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a41      	ldr	r2, [pc, #260]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001c72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7ff f92c 	bl	8000ed4 <HAL_GetTick>
 8001c7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c80:	f7ff f928 	bl	8000ed4 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e10e      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c92:	4b39      	ldr	r3, [pc, #228]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c9e:	4b36      	ldr	r3, [pc, #216]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001ca0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ca2:	4b37      	ldr	r3, [pc, #220]	@ (8001d80 <HAL_RCC_OscConfig+0x774>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001cae:	0112      	lsls	r2, r2, #4
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	4931      	ldr	r1, [pc, #196]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	628b      	str	r3, [r1, #40]	@ 0x28
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	025b      	lsls	r3, r3, #9
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	041b      	lsls	r3, r3, #16
 8001cd6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	061b      	lsls	r3, r3, #24
 8001ce4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001ce8:	4923      	ldr	r1, [pc, #140]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001cee:	4b22      	ldr	r3, [pc, #136]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf2:	4a21      	ldr	r2, [pc, #132]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001cf4:	f023 0301 	bic.w	r3, r3, #1
 8001cf8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001cfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cfe:	4b21      	ldr	r3, [pc, #132]	@ (8001d84 <HAL_RCC_OscConfig+0x778>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d06:	00d2      	lsls	r2, r2, #3
 8001d08:	491b      	ldr	r1, [pc, #108]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d12:	f023 020c 	bic.w	r2, r3, #12
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1a:	4917      	ldr	r1, [pc, #92]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001d20:	4b15      	ldr	r3, [pc, #84]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d24:	f023 0202 	bic.w	r2, r3, #2
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2c:	4912      	ldr	r1, [pc, #72]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001d32:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d36:	4a10      	ldr	r2, [pc, #64]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d42:	4a0d      	ldr	r2, [pc, #52]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001d50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001d56:	4b08      	ldr	r3, [pc, #32]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d5a:	4a07      	ldr	r2, [pc, #28]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d62:	4b05      	ldr	r3, [pc, #20]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a04      	ldr	r2, [pc, #16]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001d68:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6e:	f7ff f8b1 	bl	8000ed4 <HAL_GetTick>
 8001d72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d74:	e011      	b.n	8001d9a <HAL_RCC_OscConfig+0x78e>
 8001d76:	bf00      	nop
 8001d78:	58024400 	.word	0x58024400
 8001d7c:	58024800 	.word	0x58024800
 8001d80:	fffffc0c 	.word	0xfffffc0c
 8001d84:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d88:	f7ff f8a4 	bl	8000ed4 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e08a      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d9a:	4b47      	ldr	r3, [pc, #284]	@ (8001eb8 <HAL_RCC_OscConfig+0x8ac>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0x77c>
 8001da6:	e082      	b.n	8001eae <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da8:	4b43      	ldr	r3, [pc, #268]	@ (8001eb8 <HAL_RCC_OscConfig+0x8ac>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a42      	ldr	r2, [pc, #264]	@ (8001eb8 <HAL_RCC_OscConfig+0x8ac>)
 8001dae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db4:	f7ff f88e 	bl	8000ed4 <HAL_GetTick>
 8001db8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dbc:	f7ff f88a 	bl	8000ed4 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e070      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dce:	4b3a      	ldr	r3, [pc, #232]	@ (8001eb8 <HAL_RCC_OscConfig+0x8ac>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x7b0>
 8001dda:	e068      	b.n	8001eae <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001ddc:	4b36      	ldr	r3, [pc, #216]	@ (8001eb8 <HAL_RCC_OscConfig+0x8ac>)
 8001dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001de2:	4b35      	ldr	r3, [pc, #212]	@ (8001eb8 <HAL_RCC_OscConfig+0x8ac>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d031      	beq.n	8001e54 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	f003 0203 	and.w	r2, r3, #3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d12a      	bne.n	8001e54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d122      	bne.n	8001e54 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e18:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d11a      	bne.n	8001e54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	0a5b      	lsrs	r3, r3, #9
 8001e22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e2a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d111      	bne.n	8001e54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	0c1b      	lsrs	r3, r3, #16
 8001e34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d108      	bne.n	8001e54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	0e1b      	lsrs	r3, r3, #24
 8001e46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e4e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e02b      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001e58:	4b17      	ldr	r3, [pc, #92]	@ (8001eb8 <HAL_RCC_OscConfig+0x8ac>)
 8001e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e5c:	08db      	lsrs	r3, r3, #3
 8001e5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e62:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d01f      	beq.n	8001eae <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001e6e:	4b12      	ldr	r3, [pc, #72]	@ (8001eb8 <HAL_RCC_OscConfig+0x8ac>)
 8001e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e72:	4a11      	ldr	r2, [pc, #68]	@ (8001eb8 <HAL_RCC_OscConfig+0x8ac>)
 8001e74:	f023 0301 	bic.w	r3, r3, #1
 8001e78:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e7a:	f7ff f82b 	bl	8000ed4 <HAL_GetTick>
 8001e7e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001e80:	bf00      	nop
 8001e82:	f7ff f827 	bl	8000ed4 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d0f9      	beq.n	8001e82 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb8 <HAL_RCC_OscConfig+0x8ac>)
 8001e90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e92:	4b0a      	ldr	r3, [pc, #40]	@ (8001ebc <HAL_RCC_OscConfig+0x8b0>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e9a:	00d2      	lsls	r2, r2, #3
 8001e9c:	4906      	ldr	r1, [pc, #24]	@ (8001eb8 <HAL_RCC_OscConfig+0x8ac>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001ea2:	4b05      	ldr	r3, [pc, #20]	@ (8001eb8 <HAL_RCC_OscConfig+0x8ac>)
 8001ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea6:	4a04      	ldr	r2, [pc, #16]	@ (8001eb8 <HAL_RCC_OscConfig+0x8ac>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3730      	adds	r7, #48	@ 0x30
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	58024400 	.word	0x58024400
 8001ebc:	ffff0007 	.word	0xffff0007

08001ec0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e19c      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed4:	4b8a      	ldr	r3, [pc, #552]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 030f 	and.w	r3, r3, #15
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d910      	bls.n	8001f04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee2:	4b87      	ldr	r3, [pc, #540]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 020f 	bic.w	r2, r3, #15
 8001eea:	4985      	ldr	r1, [pc, #532]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef2:	4b83      	ldr	r3, [pc, #524]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e184      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d010      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	4b7b      	ldr	r3, [pc, #492]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d908      	bls.n	8001f32 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f20:	4b78      	ldr	r3, [pc, #480]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	4975      	ldr	r1, [pc, #468]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d010      	beq.n	8001f60 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695a      	ldr	r2, [r3, #20]
 8001f42:	4b70      	ldr	r3, [pc, #448]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d908      	bls.n	8001f60 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f4e:	4b6d      	ldr	r3, [pc, #436]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	496a      	ldr	r1, [pc, #424]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0310 	and.w	r3, r3, #16
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d010      	beq.n	8001f8e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	699a      	ldr	r2, [r3, #24]
 8001f70:	4b64      	ldr	r3, [pc, #400]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d908      	bls.n	8001f8e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f7c:	4b61      	ldr	r3, [pc, #388]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	495e      	ldr	r1, [pc, #376]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0320 	and.w	r3, r3, #32
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d010      	beq.n	8001fbc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69da      	ldr	r2, [r3, #28]
 8001f9e:	4b59      	ldr	r3, [pc, #356]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d908      	bls.n	8001fbc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001faa:	4b56      	ldr	r3, [pc, #344]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	4953      	ldr	r1, [pc, #332]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d010      	beq.n	8001fea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	4b4d      	ldr	r3, [pc, #308]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	f003 030f 	and.w	r3, r3, #15
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d908      	bls.n	8001fea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd8:	4b4a      	ldr	r3, [pc, #296]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f023 020f 	bic.w	r2, r3, #15
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	4947      	ldr	r1, [pc, #284]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d055      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001ff6:	4b43      	ldr	r3, [pc, #268]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	4940      	ldr	r1, [pc, #256]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8002004:	4313      	orrs	r3, r2
 8002006:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b02      	cmp	r3, #2
 800200e:	d107      	bne.n	8002020 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002010:	4b3c      	ldr	r3, [pc, #240]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d121      	bne.n	8002060 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0f6      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b03      	cmp	r3, #3
 8002026:	d107      	bne.n	8002038 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002028:	4b36      	ldr	r3, [pc, #216]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d115      	bne.n	8002060 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0ea      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d107      	bne.n	8002050 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002040:	4b30      	ldr	r3, [pc, #192]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002048:	2b00      	cmp	r3, #0
 800204a:	d109      	bne.n	8002060 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0de      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002050:	4b2c      	ldr	r3, [pc, #176]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e0d6      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002060:	4b28      	ldr	r3, [pc, #160]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	f023 0207 	bic.w	r2, r3, #7
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4925      	ldr	r1, [pc, #148]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 800206e:	4313      	orrs	r3, r2
 8002070:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002072:	f7fe ff2f 	bl	8000ed4 <HAL_GetTick>
 8002076:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002078:	e00a      	b.n	8002090 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800207a:	f7fe ff2b 	bl	8000ed4 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002088:	4293      	cmp	r3, r2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e0be      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002090:	4b1c      	ldr	r3, [pc, #112]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	429a      	cmp	r2, r3
 80020a0:	d1eb      	bne.n	800207a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d010      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	4b14      	ldr	r3, [pc, #80]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d208      	bcs.n	80020d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020be:	4b11      	ldr	r3, [pc, #68]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	f023 020f 	bic.w	r2, r3, #15
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	490e      	ldr	r1, [pc, #56]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 030f 	and.w	r3, r3, #15
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d214      	bcs.n	8002108 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b08      	ldr	r3, [pc, #32]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 020f 	bic.w	r2, r3, #15
 80020e6:	4906      	ldr	r1, [pc, #24]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ee:	4b04      	ldr	r3, [pc, #16]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e086      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>
 8002100:	52002000 	.word	0x52002000
 8002104:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d010      	beq.n	8002136 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	4b3f      	ldr	r3, [pc, #252]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002120:	429a      	cmp	r2, r3
 8002122:	d208      	bcs.n	8002136 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002124:	4b3c      	ldr	r3, [pc, #240]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	4939      	ldr	r1, [pc, #228]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 8002132:	4313      	orrs	r3, r2
 8002134:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d010      	beq.n	8002164 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695a      	ldr	r2, [r3, #20]
 8002146:	4b34      	ldr	r3, [pc, #208]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800214e:	429a      	cmp	r2, r3
 8002150:	d208      	bcs.n	8002164 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002152:	4b31      	ldr	r3, [pc, #196]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	492e      	ldr	r1, [pc, #184]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 8002160:	4313      	orrs	r3, r2
 8002162:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0310 	and.w	r3, r3, #16
 800216c:	2b00      	cmp	r3, #0
 800216e:	d010      	beq.n	8002192 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	699a      	ldr	r2, [r3, #24]
 8002174:	4b28      	ldr	r3, [pc, #160]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800217c:	429a      	cmp	r2, r3
 800217e:	d208      	bcs.n	8002192 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002180:	4b25      	ldr	r3, [pc, #148]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	4922      	ldr	r1, [pc, #136]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 800218e:	4313      	orrs	r3, r2
 8002190:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0320 	and.w	r3, r3, #32
 800219a:	2b00      	cmp	r3, #0
 800219c:	d010      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69da      	ldr	r2, [r3, #28]
 80021a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d208      	bcs.n	80021c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80021ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	4917      	ldr	r1, [pc, #92]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021c0:	f000 f834 	bl	800222c <HAL_RCC_GetSysClockFreq>
 80021c4:	4602      	mov	r2, r0
 80021c6:	4b14      	ldr	r3, [pc, #80]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	0a1b      	lsrs	r3, r3, #8
 80021cc:	f003 030f 	and.w	r3, r3, #15
 80021d0:	4912      	ldr	r1, [pc, #72]	@ (800221c <HAL_RCC_ClockConfig+0x35c>)
 80021d2:	5ccb      	ldrb	r3, [r1, r3]
 80021d4:	f003 031f 	and.w	r3, r3, #31
 80021d8:	fa22 f303 	lsr.w	r3, r2, r3
 80021dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80021de:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	4a0d      	ldr	r2, [pc, #52]	@ (800221c <HAL_RCC_ClockConfig+0x35c>)
 80021e8:	5cd3      	ldrb	r3, [r2, r3]
 80021ea:	f003 031f 	and.w	r3, r3, #31
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	fa22 f303 	lsr.w	r3, r2, r3
 80021f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002220 <HAL_RCC_ClockConfig+0x360>)
 80021f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80021f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002224 <HAL_RCC_ClockConfig+0x364>)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80021fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002228 <HAL_RCC_ClockConfig+0x368>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe fe1c 	bl	8000e40 <HAL_InitTick>
 8002208:	4603      	mov	r3, r0
 800220a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800220c:	7bfb      	ldrb	r3, [r7, #15]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	58024400 	.word	0x58024400
 800221c:	080088c0 	.word	0x080088c0
 8002220:	24000004 	.word	0x24000004
 8002224:	24000000 	.word	0x24000000
 8002228:	24000008 	.word	0x24000008

0800222c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800222c:	b480      	push	{r7}
 800222e:	b089      	sub	sp, #36	@ 0x24
 8002230:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002232:	4bb3      	ldr	r3, [pc, #716]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800223a:	2b18      	cmp	r3, #24
 800223c:	f200 8155 	bhi.w	80024ea <HAL_RCC_GetSysClockFreq+0x2be>
 8002240:	a201      	add	r2, pc, #4	@ (adr r2, 8002248 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002246:	bf00      	nop
 8002248:	080022ad 	.word	0x080022ad
 800224c:	080024eb 	.word	0x080024eb
 8002250:	080024eb 	.word	0x080024eb
 8002254:	080024eb 	.word	0x080024eb
 8002258:	080024eb 	.word	0x080024eb
 800225c:	080024eb 	.word	0x080024eb
 8002260:	080024eb 	.word	0x080024eb
 8002264:	080024eb 	.word	0x080024eb
 8002268:	080022d3 	.word	0x080022d3
 800226c:	080024eb 	.word	0x080024eb
 8002270:	080024eb 	.word	0x080024eb
 8002274:	080024eb 	.word	0x080024eb
 8002278:	080024eb 	.word	0x080024eb
 800227c:	080024eb 	.word	0x080024eb
 8002280:	080024eb 	.word	0x080024eb
 8002284:	080024eb 	.word	0x080024eb
 8002288:	080022d9 	.word	0x080022d9
 800228c:	080024eb 	.word	0x080024eb
 8002290:	080024eb 	.word	0x080024eb
 8002294:	080024eb 	.word	0x080024eb
 8002298:	080024eb 	.word	0x080024eb
 800229c:	080024eb 	.word	0x080024eb
 80022a0:	080024eb 	.word	0x080024eb
 80022a4:	080024eb 	.word	0x080024eb
 80022a8:	080022df 	.word	0x080022df
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022ac:	4b94      	ldr	r3, [pc, #592]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0320 	and.w	r3, r3, #32
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d009      	beq.n	80022cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80022b8:	4b91      	ldr	r3, [pc, #580]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	08db      	lsrs	r3, r3, #3
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	4a90      	ldr	r2, [pc, #576]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022c4:	fa22 f303 	lsr.w	r3, r2, r3
 80022c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80022ca:	e111      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80022cc:	4b8d      	ldr	r3, [pc, #564]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022ce:	61bb      	str	r3, [r7, #24]
      break;
 80022d0:	e10e      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80022d2:	4b8d      	ldr	r3, [pc, #564]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80022d4:	61bb      	str	r3, [r7, #24]
      break;
 80022d6:	e10b      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80022d8:	4b8c      	ldr	r3, [pc, #560]	@ (800250c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80022da:	61bb      	str	r3, [r7, #24]
      break;
 80022dc:	e108      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80022de:	4b88      	ldr	r3, [pc, #544]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80022e8:	4b85      	ldr	r3, [pc, #532]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ec:	091b      	lsrs	r3, r3, #4
 80022ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022f2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80022f4:	4b82      	ldr	r3, [pc, #520]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80022fe:	4b80      	ldr	r3, [pc, #512]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002302:	08db      	lsrs	r3, r3, #3
 8002304:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	fb02 f303 	mul.w	r3, r2, r3
 800230e:	ee07 3a90 	vmov	s15, r3
 8002312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002316:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80e1 	beq.w	80024e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2b02      	cmp	r3, #2
 8002326:	f000 8083 	beq.w	8002430 <HAL_RCC_GetSysClockFreq+0x204>
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2b02      	cmp	r3, #2
 800232e:	f200 80a1 	bhi.w	8002474 <HAL_RCC_GetSysClockFreq+0x248>
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_RCC_GetSysClockFreq+0x114>
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d056      	beq.n	80023ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800233e:	e099      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002340:	4b6f      	ldr	r3, [pc, #444]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0320 	and.w	r3, r3, #32
 8002348:	2b00      	cmp	r3, #0
 800234a:	d02d      	beq.n	80023a8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800234c:	4b6c      	ldr	r3, [pc, #432]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	08db      	lsrs	r3, r3, #3
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	4a6b      	ldr	r2, [pc, #428]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002358:	fa22 f303 	lsr.w	r3, r2, r3
 800235c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	ee07 3a90 	vmov	s15, r3
 8002364:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	ee07 3a90 	vmov	s15, r3
 800236e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002376:	4b62      	ldr	r3, [pc, #392]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800237e:	ee07 3a90 	vmov	s15, r3
 8002382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002386:	ed97 6a02 	vldr	s12, [r7, #8]
 800238a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002510 <HAL_RCC_GetSysClockFreq+0x2e4>
 800238e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002396:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800239a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800239e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80023a6:	e087      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	ee07 3a90 	vmov	s15, r3
 80023ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023b2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002514 <HAL_RCC_GetSysClockFreq+0x2e8>
 80023b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023ba:	4b51      	ldr	r3, [pc, #324]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023c2:	ee07 3a90 	vmov	s15, r3
 80023c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80023ce:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002510 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80023de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023ea:	e065      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	ee07 3a90 	vmov	s15, r3
 80023f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023f6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002518 <HAL_RCC_GetSysClockFreq+0x2ec>
 80023fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023fe:	4b40      	ldr	r3, [pc, #256]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002406:	ee07 3a90 	vmov	s15, r3
 800240a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800240e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002412:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002510 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800241a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800241e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800242a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800242e:	e043      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	ee07 3a90 	vmov	s15, r3
 8002436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800243a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800251c <HAL_RCC_GetSysClockFreq+0x2f0>
 800243e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002442:	4b2f      	ldr	r3, [pc, #188]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800244a:	ee07 3a90 	vmov	s15, r3
 800244e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002452:	ed97 6a02 	vldr	s12, [r7, #8]
 8002456:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002510 <HAL_RCC_GetSysClockFreq+0x2e4>
 800245a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800245e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002462:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800246a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800246e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002472:	e021      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	ee07 3a90 	vmov	s15, r3
 800247a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800247e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002518 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002486:	4b1e      	ldr	r3, [pc, #120]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800248e:	ee07 3a90 	vmov	s15, r3
 8002492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002496:	ed97 6a02 	vldr	s12, [r7, #8]
 800249a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002510 <HAL_RCC_GetSysClockFreq+0x2e4>
 800249e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024b6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80024b8:	4b11      	ldr	r3, [pc, #68]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024bc:	0a5b      	lsrs	r3, r3, #9
 80024be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024c2:	3301      	adds	r3, #1
 80024c4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80024d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024dc:	ee17 3a90 	vmov	r3, s15
 80024e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80024e2:	e005      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	61bb      	str	r3, [r7, #24]
      break;
 80024e8:	e002      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80024ea:	4b07      	ldr	r3, [pc, #28]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80024ec:	61bb      	str	r3, [r7, #24]
      break;
 80024ee:	bf00      	nop
  }

  return sysclockfreq;
 80024f0:	69bb      	ldr	r3, [r7, #24]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3724      	adds	r7, #36	@ 0x24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	58024400 	.word	0x58024400
 8002504:	03d09000 	.word	0x03d09000
 8002508:	003d0900 	.word	0x003d0900
 800250c:	007a1200 	.word	0x007a1200
 8002510:	46000000 	.word	0x46000000
 8002514:	4c742400 	.word	0x4c742400
 8002518:	4a742400 	.word	0x4a742400
 800251c:	4af42400 	.word	0x4af42400

08002520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002526:	f7ff fe81 	bl	800222c <HAL_RCC_GetSysClockFreq>
 800252a:	4602      	mov	r2, r0
 800252c:	4b10      	ldr	r3, [pc, #64]	@ (8002570 <HAL_RCC_GetHCLKFreq+0x50>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	0a1b      	lsrs	r3, r3, #8
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	490f      	ldr	r1, [pc, #60]	@ (8002574 <HAL_RCC_GetHCLKFreq+0x54>)
 8002538:	5ccb      	ldrb	r3, [r1, r3]
 800253a:	f003 031f 	and.w	r3, r3, #31
 800253e:	fa22 f303 	lsr.w	r3, r2, r3
 8002542:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002544:	4b0a      	ldr	r3, [pc, #40]	@ (8002570 <HAL_RCC_GetHCLKFreq+0x50>)
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	4a09      	ldr	r2, [pc, #36]	@ (8002574 <HAL_RCC_GetHCLKFreq+0x54>)
 800254e:	5cd3      	ldrb	r3, [r2, r3]
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	fa22 f303 	lsr.w	r3, r2, r3
 800255a:	4a07      	ldr	r2, [pc, #28]	@ (8002578 <HAL_RCC_GetHCLKFreq+0x58>)
 800255c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800255e:	4a07      	ldr	r2, [pc, #28]	@ (800257c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002564:	4b04      	ldr	r3, [pc, #16]	@ (8002578 <HAL_RCC_GetHCLKFreq+0x58>)
 8002566:	681b      	ldr	r3, [r3, #0]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	58024400 	.word	0x58024400
 8002574:	080088c0 	.word	0x080088c0
 8002578:	24000004 	.word	0x24000004
 800257c:	24000000 	.word	0x24000000

08002580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002584:	f7ff ffcc 	bl	8002520 <HAL_RCC_GetHCLKFreq>
 8002588:	4602      	mov	r2, r0
 800258a:	4b06      	ldr	r3, [pc, #24]	@ (80025a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	091b      	lsrs	r3, r3, #4
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	4904      	ldr	r1, [pc, #16]	@ (80025a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002596:	5ccb      	ldrb	r3, [r1, r3]
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	58024400 	.word	0x58024400
 80025a8:	080088c0 	.word	0x080088c0

080025ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80025b0:	f7ff ffb6 	bl	8002520 <HAL_RCC_GetHCLKFreq>
 80025b4:	4602      	mov	r2, r0
 80025b6:	4b06      	ldr	r3, [pc, #24]	@ (80025d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	0a1b      	lsrs	r3, r3, #8
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	4904      	ldr	r1, [pc, #16]	@ (80025d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025c2:	5ccb      	ldrb	r3, [r1, r3]
 80025c4:	f003 031f 	and.w	r3, r3, #31
 80025c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	58024400 	.word	0x58024400
 80025d4:	080088c0 	.word	0x080088c0

080025d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025dc:	b0ca      	sub	sp, #296	@ 0x128
 80025de:	af00      	add	r7, sp, #0
 80025e0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025e4:	2300      	movs	r3, #0
 80025e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025ea:	2300      	movs	r3, #0
 80025ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80025fc:	2500      	movs	r5, #0
 80025fe:	ea54 0305 	orrs.w	r3, r4, r5
 8002602:	d049      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002608:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800260a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800260e:	d02f      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002610:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002614:	d828      	bhi.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002616:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800261a:	d01a      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800261c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002620:	d822      	bhi.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002626:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800262a:	d007      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800262c:	e01c      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800262e:	4bb8      	ldr	r3, [pc, #736]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002632:	4ab7      	ldr	r2, [pc, #732]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002638:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800263a:	e01a      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800263c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002640:	3308      	adds	r3, #8
 8002642:	2102      	movs	r1, #2
 8002644:	4618      	mov	r0, r3
 8002646:	f001 fc8f 	bl	8003f68 <RCCEx_PLL2_Config>
 800264a:	4603      	mov	r3, r0
 800264c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002650:	e00f      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002656:	3328      	adds	r3, #40	@ 0x28
 8002658:	2102      	movs	r1, #2
 800265a:	4618      	mov	r0, r3
 800265c:	f001 fd36 	bl	80040cc <RCCEx_PLL3_Config>
 8002660:	4603      	mov	r3, r0
 8002662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002666:	e004      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800266e:	e000      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002670:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10a      	bne.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800267a:	4ba5      	ldr	r3, [pc, #660]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800267c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800267e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002686:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002688:	4aa1      	ldr	r2, [pc, #644]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800268a:	430b      	orrs	r3, r1
 800268c:	6513      	str	r3, [r2, #80]	@ 0x50
 800268e:	e003      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002690:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002694:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80026a4:	f04f 0900 	mov.w	r9, #0
 80026a8:	ea58 0309 	orrs.w	r3, r8, r9
 80026ac:	d047      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80026ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d82a      	bhi.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80026b8:	a201      	add	r2, pc, #4	@ (adr r2, 80026c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80026ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026be:	bf00      	nop
 80026c0:	080026d5 	.word	0x080026d5
 80026c4:	080026e3 	.word	0x080026e3
 80026c8:	080026f9 	.word	0x080026f9
 80026cc:	08002717 	.word	0x08002717
 80026d0:	08002717 	.word	0x08002717
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026d4:	4b8e      	ldr	r3, [pc, #568]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d8:	4a8d      	ldr	r2, [pc, #564]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026e0:	e01a      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80026e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026e6:	3308      	adds	r3, #8
 80026e8:	2100      	movs	r1, #0
 80026ea:	4618      	mov	r0, r3
 80026ec:	f001 fc3c 	bl	8003f68 <RCCEx_PLL2_Config>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026f6:	e00f      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80026f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026fc:	3328      	adds	r3, #40	@ 0x28
 80026fe:	2100      	movs	r1, #0
 8002700:	4618      	mov	r0, r3
 8002702:	f001 fce3 	bl	80040cc <RCCEx_PLL3_Config>
 8002706:	4603      	mov	r3, r0
 8002708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800270c:	e004      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002714:	e000      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002716:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002718:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10a      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002720:	4b7b      	ldr	r3, [pc, #492]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002724:	f023 0107 	bic.w	r1, r3, #7
 8002728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800272c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272e:	4a78      	ldr	r2, [pc, #480]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002730:	430b      	orrs	r3, r1
 8002732:	6513      	str	r3, [r2, #80]	@ 0x50
 8002734:	e003      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002736:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800273a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800273e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002746:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800274a:	f04f 0b00 	mov.w	fp, #0
 800274e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002752:	d04c      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800275a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800275e:	d030      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002760:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002764:	d829      	bhi.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002766:	2bc0      	cmp	r3, #192	@ 0xc0
 8002768:	d02d      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800276a:	2bc0      	cmp	r3, #192	@ 0xc0
 800276c:	d825      	bhi.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800276e:	2b80      	cmp	r3, #128	@ 0x80
 8002770:	d018      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002772:	2b80      	cmp	r3, #128	@ 0x80
 8002774:	d821      	bhi.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800277a:	2b40      	cmp	r3, #64	@ 0x40
 800277c:	d007      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800277e:	e01c      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002780:	4b63      	ldr	r3, [pc, #396]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002784:	4a62      	ldr	r2, [pc, #392]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002786:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800278a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800278c:	e01c      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800278e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002792:	3308      	adds	r3, #8
 8002794:	2100      	movs	r1, #0
 8002796:	4618      	mov	r0, r3
 8002798:	f001 fbe6 	bl	8003f68 <RCCEx_PLL2_Config>
 800279c:	4603      	mov	r3, r0
 800279e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80027a2:	e011      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027a8:	3328      	adds	r3, #40	@ 0x28
 80027aa:	2100      	movs	r1, #0
 80027ac:	4618      	mov	r0, r3
 80027ae:	f001 fc8d 	bl	80040cc <RCCEx_PLL3_Config>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80027b8:	e006      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80027c0:	e002      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80027c2:	bf00      	nop
 80027c4:	e000      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80027c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10a      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80027d0:	4b4f      	ldr	r3, [pc, #316]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027d4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80027d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027de:	4a4c      	ldr	r2, [pc, #304]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027e0:	430b      	orrs	r3, r1
 80027e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80027e4:	e003      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80027ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80027fa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80027fe:	2300      	movs	r3, #0
 8002800:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002804:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002808:	460b      	mov	r3, r1
 800280a:	4313      	orrs	r3, r2
 800280c:	d053      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800280e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002812:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002816:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800281a:	d035      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800281c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002820:	d82e      	bhi.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002822:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002826:	d031      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002828:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800282c:	d828      	bhi.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800282e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002832:	d01a      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002834:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002838:	d822      	bhi.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800283e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002842:	d007      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002844:	e01c      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002846:	4b32      	ldr	r3, [pc, #200]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800284a:	4a31      	ldr	r2, [pc, #196]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800284c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002850:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002852:	e01c      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002858:	3308      	adds	r3, #8
 800285a:	2100      	movs	r1, #0
 800285c:	4618      	mov	r0, r3
 800285e:	f001 fb83 	bl	8003f68 <RCCEx_PLL2_Config>
 8002862:	4603      	mov	r3, r0
 8002864:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002868:	e011      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800286a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800286e:	3328      	adds	r3, #40	@ 0x28
 8002870:	2100      	movs	r1, #0
 8002872:	4618      	mov	r0, r3
 8002874:	f001 fc2a 	bl	80040cc <RCCEx_PLL3_Config>
 8002878:	4603      	mov	r3, r0
 800287a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800287e:	e006      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002886:	e002      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002888:	bf00      	nop
 800288a:	e000      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800288c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800288e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10b      	bne.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002896:	4b1e      	ldr	r3, [pc, #120]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800289a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800289e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80028a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028a8:	430b      	orrs	r3, r1
 80028aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80028ac:	e003      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80028b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028be:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80028c2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80028c6:	2300      	movs	r3, #0
 80028c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80028cc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80028d0:	460b      	mov	r3, r1
 80028d2:	4313      	orrs	r3, r2
 80028d4:	d056      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80028d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80028de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028e2:	d038      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80028e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028e8:	d831      	bhi.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80028ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80028ee:	d034      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80028f0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80028f4:	d82b      	bhi.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80028f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80028fa:	d01d      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80028fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002900:	d825      	bhi.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002902:	2b00      	cmp	r3, #0
 8002904:	d006      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002906:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800290a:	d00a      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800290c:	e01f      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800290e:	bf00      	nop
 8002910:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002914:	4ba2      	ldr	r3, [pc, #648]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002918:	4aa1      	ldr	r2, [pc, #644]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800291a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800291e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002920:	e01c      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002926:	3308      	adds	r3, #8
 8002928:	2100      	movs	r1, #0
 800292a:	4618      	mov	r0, r3
 800292c:	f001 fb1c 	bl	8003f68 <RCCEx_PLL2_Config>
 8002930:	4603      	mov	r3, r0
 8002932:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002936:	e011      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800293c:	3328      	adds	r3, #40	@ 0x28
 800293e:	2100      	movs	r1, #0
 8002940:	4618      	mov	r0, r3
 8002942:	f001 fbc3 	bl	80040cc <RCCEx_PLL3_Config>
 8002946:	4603      	mov	r3, r0
 8002948:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800294c:	e006      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002954:	e002      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002956:	bf00      	nop
 8002958:	e000      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800295a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800295c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10b      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002964:	4b8e      	ldr	r3, [pc, #568]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002968:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800296c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002970:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002974:	4a8a      	ldr	r2, [pc, #552]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002976:	430b      	orrs	r3, r1
 8002978:	6593      	str	r3, [r2, #88]	@ 0x58
 800297a:	e003      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800297c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002980:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002990:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002994:	2300      	movs	r3, #0
 8002996:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800299a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800299e:	460b      	mov	r3, r1
 80029a0:	4313      	orrs	r3, r2
 80029a2:	d03a      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80029a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029aa:	2b30      	cmp	r3, #48	@ 0x30
 80029ac:	d01f      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x416>
 80029ae:	2b30      	cmp	r3, #48	@ 0x30
 80029b0:	d819      	bhi.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80029b2:	2b20      	cmp	r3, #32
 80029b4:	d00c      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80029b6:	2b20      	cmp	r3, #32
 80029b8:	d815      	bhi.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d019      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80029be:	2b10      	cmp	r3, #16
 80029c0:	d111      	bne.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029c2:	4b77      	ldr	r3, [pc, #476]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c6:	4a76      	ldr	r2, [pc, #472]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80029ce:	e011      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80029d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029d4:	3308      	adds	r3, #8
 80029d6:	2102      	movs	r1, #2
 80029d8:	4618      	mov	r0, r3
 80029da:	f001 fac5 	bl	8003f68 <RCCEx_PLL2_Config>
 80029de:	4603      	mov	r3, r0
 80029e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80029e4:	e006      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80029ec:	e002      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80029ee:	bf00      	nop
 80029f0:	e000      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80029f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10a      	bne.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80029fc:	4b68      	ldr	r3, [pc, #416]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a00:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a0a:	4a65      	ldr	r2, [pc, #404]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a0c:	430b      	orrs	r3, r1
 8002a0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a10:	e003      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a22:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002a26:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002a30:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4313      	orrs	r3, r2
 8002a38:	d051      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a44:	d035      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002a46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a4a:	d82e      	bhi.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002a4c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002a50:	d031      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002a52:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002a56:	d828      	bhi.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002a58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a5c:	d01a      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002a5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a62:	d822      	bhi.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002a68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a6c:	d007      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002a6e:	e01c      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a70:	4b4b      	ldr	r3, [pc, #300]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a74:	4a4a      	ldr	r2, [pc, #296]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a7c:	e01c      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a82:	3308      	adds	r3, #8
 8002a84:	2100      	movs	r1, #0
 8002a86:	4618      	mov	r0, r3
 8002a88:	f001 fa6e 	bl	8003f68 <RCCEx_PLL2_Config>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a92:	e011      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a98:	3328      	adds	r3, #40	@ 0x28
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f001 fb15 	bl	80040cc <RCCEx_PLL3_Config>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002aa8:	e006      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ab0:	e002      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002ab2:	bf00      	nop
 8002ab4:	e000      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002ab6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ab8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10a      	bne.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002ac0:	4b37      	ldr	r3, [pc, #220]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ac4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ace:	4a34      	ldr	r2, [pc, #208]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ad4:	e003      	b.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ada:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002aea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002aee:	2300      	movs	r3, #0
 8002af0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002af4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002af8:	460b      	mov	r3, r1
 8002afa:	4313      	orrs	r3, r2
 8002afc:	d056      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b08:	d033      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002b0a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b0e:	d82c      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b14:	d02f      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002b16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b1a:	d826      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b1c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b20:	d02b      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002b22:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b26:	d820      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b2c:	d012      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002b2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b32:	d81a      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d022      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002b38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b3c:	d115      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b42:	3308      	adds	r3, #8
 8002b44:	2101      	movs	r1, #1
 8002b46:	4618      	mov	r0, r3
 8002b48:	f001 fa0e 	bl	8003f68 <RCCEx_PLL2_Config>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002b52:	e015      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b58:	3328      	adds	r3, #40	@ 0x28
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f001 fab5 	bl	80040cc <RCCEx_PLL3_Config>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002b68:	e00a      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b70:	e006      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b72:	bf00      	nop
 8002b74:	e004      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b76:	bf00      	nop
 8002b78:	e002      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b7a:	bf00      	nop
 8002b7c:	e000      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10d      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002b88:	4b05      	ldr	r3, [pc, #20]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b8c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b96:	4a02      	ldr	r2, [pc, #8]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b9c:	e006      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002b9e:	bf00      	nop
 8002ba0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ba8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002bc2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	d055      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002bd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bd8:	d033      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002bda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bde:	d82c      	bhi.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002be0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002be4:	d02f      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bea:	d826      	bhi.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002bec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002bf0:	d02b      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002bf2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002bf6:	d820      	bhi.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002bf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bfc:	d012      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002bfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c02:	d81a      	bhi.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d022      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002c08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c0c:	d115      	bne.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c12:	3308      	adds	r3, #8
 8002c14:	2101      	movs	r1, #1
 8002c16:	4618      	mov	r0, r3
 8002c18:	f001 f9a6 	bl	8003f68 <RCCEx_PLL2_Config>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002c22:	e015      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c28:	3328      	adds	r3, #40	@ 0x28
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f001 fa4d 	bl	80040cc <RCCEx_PLL3_Config>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002c38:	e00a      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c40:	e006      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c42:	bf00      	nop
 8002c44:	e004      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c46:	bf00      	nop
 8002c48:	e002      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c4a:	bf00      	nop
 8002c4c:	e000      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10b      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002c58:	4ba3      	ldr	r3, [pc, #652]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002c68:	4a9f      	ldr	r2, [pc, #636]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c6a:	430b      	orrs	r3, r1
 8002c6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c6e:	e003      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c80:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002c84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002c8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002c92:	460b      	mov	r3, r1
 8002c94:	4313      	orrs	r3, r2
 8002c96:	d037      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ca2:	d00e      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002ca4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ca8:	d816      	bhi.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d018      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002cae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cb2:	d111      	bne.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cb4:	4b8c      	ldr	r3, [pc, #560]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb8:	4a8b      	ldr	r2, [pc, #556]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002cc0:	e00f      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cc6:	3308      	adds	r3, #8
 8002cc8:	2101      	movs	r1, #1
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f001 f94c 	bl	8003f68 <RCCEx_PLL2_Config>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002cd6:	e004      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cde:	e000      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10a      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002cea:	4b7f      	ldr	r3, [pc, #508]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cee:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf8:	4a7b      	ldr	r2, [pc, #492]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cfa:	430b      	orrs	r3, r1
 8002cfc:	6513      	str	r3, [r2, #80]	@ 0x50
 8002cfe:	e003      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d10:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002d14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d18:	2300      	movs	r3, #0
 8002d1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002d1e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4313      	orrs	r3, r2
 8002d26:	d039      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d81c      	bhi.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002d32:	a201      	add	r2, pc, #4	@ (adr r2, 8002d38 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d38:	08002d75 	.word	0x08002d75
 8002d3c:	08002d49 	.word	0x08002d49
 8002d40:	08002d57 	.word	0x08002d57
 8002d44:	08002d75 	.word	0x08002d75
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d48:	4b67      	ldr	r3, [pc, #412]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4c:	4a66      	ldr	r2, [pc, #408]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002d54:	e00f      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d5a:	3308      	adds	r3, #8
 8002d5c:	2102      	movs	r1, #2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f001 f902 	bl	8003f68 <RCCEx_PLL2_Config>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002d6a:	e004      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d72:	e000      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002d74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10a      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002d7e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d82:	f023 0103 	bic.w	r1, r3, #3
 8002d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d8c:	4a56      	ldr	r2, [pc, #344]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d8e:	430b      	orrs	r3, r1
 8002d90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d92:	e003      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002da8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002dac:	2300      	movs	r3, #0
 8002dae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002db2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002db6:	460b      	mov	r3, r1
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f000 809f 	beq.w	8002efc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dbe:	4b4b      	ldr	r3, [pc, #300]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a4a      	ldr	r2, [pc, #296]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002dc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dc8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dca:	f7fe f883 	bl	8000ed4 <HAL_GetTick>
 8002dce:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dd2:	e00b      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd4:	f7fe f87e 	bl	8000ed4 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b64      	cmp	r3, #100	@ 0x64
 8002de2:	d903      	bls.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002dea:	e005      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dec:	4b3f      	ldr	r3, [pc, #252]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0ed      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002df8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d179      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002e00:	4b39      	ldr	r3, [pc, #228]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e02:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e0c:	4053      	eors	r3, r2
 8002e0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d015      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e16:	4b34      	ldr	r3, [pc, #208]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e1e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e22:	4b31      	ldr	r3, [pc, #196]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e26:	4a30      	ldr	r2, [pc, #192]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e2c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e2e:	4b2e      	ldr	r3, [pc, #184]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e32:	4a2d      	ldr	r2, [pc, #180]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e38:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002e3a:	4a2b      	ldr	r2, [pc, #172]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e40:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e4e:	d118      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e50:	f7fe f840 	bl	8000ed4 <HAL_GetTick>
 8002e54:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e58:	e00d      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e5a:	f7fe f83b 	bl	8000ed4 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002e64:	1ad2      	subs	r2, r2, r3
 8002e66:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d903      	bls.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8002e74:	e005      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e76:	4b1c      	ldr	r3, [pc, #112]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0eb      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002e82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d129      	bne.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e9a:	d10e      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002e9c:	4b12      	ldr	r3, [pc, #72]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ea8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002eac:	091a      	lsrs	r2, r3, #4
 8002eae:	4b10      	ldr	r3, [pc, #64]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	4a0d      	ldr	r2, [pc, #52]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	6113      	str	r3, [r2, #16]
 8002eb8:	e005      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002eba:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ec0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002ec4:	6113      	str	r3, [r2, #16]
 8002ec6:	4b08      	ldr	r3, [pc, #32]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ec8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ece:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed6:	4a04      	ldr	r2, [pc, #16]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	6713      	str	r3, [r2, #112]	@ 0x70
 8002edc:	e00e      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ee2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8002ee6:	e009      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002ee8:	58024400 	.word	0x58024400
 8002eec:	58024800 	.word	0x58024800
 8002ef0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ef8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f04:	f002 0301 	and.w	r3, r2, #1
 8002f08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f12:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	f000 8089 	beq.w	8003030 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f24:	2b28      	cmp	r3, #40	@ 0x28
 8002f26:	d86b      	bhi.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002f28:	a201      	add	r2, pc, #4	@ (adr r2, 8002f30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2e:	bf00      	nop
 8002f30:	08003009 	.word	0x08003009
 8002f34:	08003001 	.word	0x08003001
 8002f38:	08003001 	.word	0x08003001
 8002f3c:	08003001 	.word	0x08003001
 8002f40:	08003001 	.word	0x08003001
 8002f44:	08003001 	.word	0x08003001
 8002f48:	08003001 	.word	0x08003001
 8002f4c:	08003001 	.word	0x08003001
 8002f50:	08002fd5 	.word	0x08002fd5
 8002f54:	08003001 	.word	0x08003001
 8002f58:	08003001 	.word	0x08003001
 8002f5c:	08003001 	.word	0x08003001
 8002f60:	08003001 	.word	0x08003001
 8002f64:	08003001 	.word	0x08003001
 8002f68:	08003001 	.word	0x08003001
 8002f6c:	08003001 	.word	0x08003001
 8002f70:	08002feb 	.word	0x08002feb
 8002f74:	08003001 	.word	0x08003001
 8002f78:	08003001 	.word	0x08003001
 8002f7c:	08003001 	.word	0x08003001
 8002f80:	08003001 	.word	0x08003001
 8002f84:	08003001 	.word	0x08003001
 8002f88:	08003001 	.word	0x08003001
 8002f8c:	08003001 	.word	0x08003001
 8002f90:	08003009 	.word	0x08003009
 8002f94:	08003001 	.word	0x08003001
 8002f98:	08003001 	.word	0x08003001
 8002f9c:	08003001 	.word	0x08003001
 8002fa0:	08003001 	.word	0x08003001
 8002fa4:	08003001 	.word	0x08003001
 8002fa8:	08003001 	.word	0x08003001
 8002fac:	08003001 	.word	0x08003001
 8002fb0:	08003009 	.word	0x08003009
 8002fb4:	08003001 	.word	0x08003001
 8002fb8:	08003001 	.word	0x08003001
 8002fbc:	08003001 	.word	0x08003001
 8002fc0:	08003001 	.word	0x08003001
 8002fc4:	08003001 	.word	0x08003001
 8002fc8:	08003001 	.word	0x08003001
 8002fcc:	08003001 	.word	0x08003001
 8002fd0:	08003009 	.word	0x08003009
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fd8:	3308      	adds	r3, #8
 8002fda:	2101      	movs	r1, #1
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 ffc3 	bl	8003f68 <RCCEx_PLL2_Config>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002fe8:	e00f      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fee:	3328      	adds	r3, #40	@ 0x28
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f001 f86a 	bl	80040cc <RCCEx_PLL3_Config>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002ffe:	e004      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003006:	e000      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800300a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10a      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003012:	4bbf      	ldr	r3, [pc, #764]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003016:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800301a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800301e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003020:	4abb      	ldr	r2, [pc, #748]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003022:	430b      	orrs	r3, r1
 8003024:	6553      	str	r3, [r2, #84]	@ 0x54
 8003026:	e003      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003028:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800302c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003038:	f002 0302 	and.w	r3, r2, #2
 800303c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003040:	2300      	movs	r3, #0
 8003042:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003046:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800304a:	460b      	mov	r3, r1
 800304c:	4313      	orrs	r3, r2
 800304e:	d041      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003054:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003056:	2b05      	cmp	r3, #5
 8003058:	d824      	bhi.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800305a:	a201      	add	r2, pc, #4	@ (adr r2, 8003060 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800305c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003060:	080030ad 	.word	0x080030ad
 8003064:	08003079 	.word	0x08003079
 8003068:	0800308f 	.word	0x0800308f
 800306c:	080030ad 	.word	0x080030ad
 8003070:	080030ad 	.word	0x080030ad
 8003074:	080030ad 	.word	0x080030ad
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800307c:	3308      	adds	r3, #8
 800307e:	2101      	movs	r1, #1
 8003080:	4618      	mov	r0, r3
 8003082:	f000 ff71 	bl	8003f68 <RCCEx_PLL2_Config>
 8003086:	4603      	mov	r3, r0
 8003088:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800308c:	e00f      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800308e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003092:	3328      	adds	r3, #40	@ 0x28
 8003094:	2101      	movs	r1, #1
 8003096:	4618      	mov	r0, r3
 8003098:	f001 f818 	bl	80040cc <RCCEx_PLL3_Config>
 800309c:	4603      	mov	r3, r0
 800309e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80030a2:	e004      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030aa:	e000      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80030ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10a      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80030b6:	4b96      	ldr	r3, [pc, #600]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ba:	f023 0107 	bic.w	r1, r3, #7
 80030be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80030c4:	4a92      	ldr	r2, [pc, #584]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030c6:	430b      	orrs	r3, r1
 80030c8:	6553      	str	r3, [r2, #84]	@ 0x54
 80030ca:	e003      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030dc:	f002 0304 	and.w	r3, r2, #4
 80030e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030e4:	2300      	movs	r3, #0
 80030e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030ea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4313      	orrs	r3, r2
 80030f2:	d044      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80030f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030fc:	2b05      	cmp	r3, #5
 80030fe:	d825      	bhi.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003100:	a201      	add	r2, pc, #4	@ (adr r2, 8003108 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003106:	bf00      	nop
 8003108:	08003155 	.word	0x08003155
 800310c:	08003121 	.word	0x08003121
 8003110:	08003137 	.word	0x08003137
 8003114:	08003155 	.word	0x08003155
 8003118:	08003155 	.word	0x08003155
 800311c:	08003155 	.word	0x08003155
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003124:	3308      	adds	r3, #8
 8003126:	2101      	movs	r1, #1
 8003128:	4618      	mov	r0, r3
 800312a:	f000 ff1d 	bl	8003f68 <RCCEx_PLL2_Config>
 800312e:	4603      	mov	r3, r0
 8003130:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003134:	e00f      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800313a:	3328      	adds	r3, #40	@ 0x28
 800313c:	2101      	movs	r1, #1
 800313e:	4618      	mov	r0, r3
 8003140:	f000 ffc4 	bl	80040cc <RCCEx_PLL3_Config>
 8003144:	4603      	mov	r3, r0
 8003146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800314a:	e004      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003152:	e000      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003154:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003156:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10b      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800315e:	4b6c      	ldr	r3, [pc, #432]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003162:	f023 0107 	bic.w	r1, r3, #7
 8003166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800316a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800316e:	4a68      	ldr	r2, [pc, #416]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003170:	430b      	orrs	r3, r1
 8003172:	6593      	str	r3, [r2, #88]	@ 0x58
 8003174:	e003      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003176:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800317a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800317e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003186:	f002 0320 	and.w	r3, r2, #32
 800318a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800318e:	2300      	movs	r3, #0
 8003190:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003194:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003198:	460b      	mov	r3, r1
 800319a:	4313      	orrs	r3, r2
 800319c:	d055      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800319e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031aa:	d033      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80031ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031b0:	d82c      	bhi.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80031b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031b6:	d02f      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80031b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031bc:	d826      	bhi.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80031be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80031c2:	d02b      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80031c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80031c8:	d820      	bhi.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80031ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031ce:	d012      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80031d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031d4:	d81a      	bhi.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d022      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80031da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031de:	d115      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031e4:	3308      	adds	r3, #8
 80031e6:	2100      	movs	r1, #0
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 febd 	bl	8003f68 <RCCEx_PLL2_Config>
 80031ee:	4603      	mov	r3, r0
 80031f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80031f4:	e015      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031fa:	3328      	adds	r3, #40	@ 0x28
 80031fc:	2102      	movs	r1, #2
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 ff64 	bl	80040cc <RCCEx_PLL3_Config>
 8003204:	4603      	mov	r3, r0
 8003206:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800320a:	e00a      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003212:	e006      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003214:	bf00      	nop
 8003216:	e004      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003218:	bf00      	nop
 800321a:	e002      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800321c:	bf00      	nop
 800321e:	e000      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003220:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003222:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10b      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800322a:	4b39      	ldr	r3, [pc, #228]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800322c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800322e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800323a:	4a35      	ldr	r2, [pc, #212]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800323c:	430b      	orrs	r3, r1
 800323e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003240:	e003      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003246:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800324a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800324e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003252:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003256:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800325a:	2300      	movs	r3, #0
 800325c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003260:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003264:	460b      	mov	r3, r1
 8003266:	4313      	orrs	r3, r2
 8003268:	d058      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800326a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800326e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003272:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003276:	d033      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003278:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800327c:	d82c      	bhi.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800327e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003282:	d02f      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003284:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003288:	d826      	bhi.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800328a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800328e:	d02b      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003290:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003294:	d820      	bhi.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003296:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800329a:	d012      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800329c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032a0:	d81a      	bhi.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d022      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80032a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032aa:	d115      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b0:	3308      	adds	r3, #8
 80032b2:	2100      	movs	r1, #0
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 fe57 	bl	8003f68 <RCCEx_PLL2_Config>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80032c0:	e015      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032c6:	3328      	adds	r3, #40	@ 0x28
 80032c8:	2102      	movs	r1, #2
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fefe 	bl	80040cc <RCCEx_PLL3_Config>
 80032d0:	4603      	mov	r3, r0
 80032d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80032d6:	e00a      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032de:	e006      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80032e0:	bf00      	nop
 80032e2:	e004      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80032e4:	bf00      	nop
 80032e6:	e002      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80032e8:	bf00      	nop
 80032ea:	e000      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80032ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10e      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032f6:	4b06      	ldr	r3, [pc, #24]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80032fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003302:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003306:	4a02      	ldr	r2, [pc, #8]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003308:	430b      	orrs	r3, r1
 800330a:	6593      	str	r3, [r2, #88]	@ 0x58
 800330c:	e006      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800330e:	bf00      	nop
 8003310:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003314:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003318:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800331c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003324:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003328:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800332c:	2300      	movs	r3, #0
 800332e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003332:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003336:	460b      	mov	r3, r1
 8003338:	4313      	orrs	r3, r2
 800333a:	d055      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800333c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003340:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003344:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003348:	d033      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800334a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800334e:	d82c      	bhi.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003350:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003354:	d02f      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003356:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800335a:	d826      	bhi.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800335c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003360:	d02b      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003362:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003366:	d820      	bhi.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003368:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800336c:	d012      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800336e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003372:	d81a      	bhi.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003374:	2b00      	cmp	r3, #0
 8003376:	d022      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003378:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800337c:	d115      	bne.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800337e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003382:	3308      	adds	r3, #8
 8003384:	2100      	movs	r1, #0
 8003386:	4618      	mov	r0, r3
 8003388:	f000 fdee 	bl	8003f68 <RCCEx_PLL2_Config>
 800338c:	4603      	mov	r3, r0
 800338e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003392:	e015      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003398:	3328      	adds	r3, #40	@ 0x28
 800339a:	2102      	movs	r1, #2
 800339c:	4618      	mov	r0, r3
 800339e:	f000 fe95 	bl	80040cc <RCCEx_PLL3_Config>
 80033a2:	4603      	mov	r3, r0
 80033a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80033a8:	e00a      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033b0:	e006      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80033b2:	bf00      	nop
 80033b4:	e004      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80033b6:	bf00      	nop
 80033b8:	e002      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80033ba:	bf00      	nop
 80033bc:	e000      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80033be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10b      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80033c8:	4ba1      	ldr	r3, [pc, #644]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033cc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80033d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80033d8:	4a9d      	ldr	r2, [pc, #628]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033da:	430b      	orrs	r3, r1
 80033dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80033de:	e003      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80033e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f0:	f002 0308 	and.w	r3, r2, #8
 80033f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033f8:	2300      	movs	r3, #0
 80033fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80033fe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003402:	460b      	mov	r3, r1
 8003404:	4313      	orrs	r3, r2
 8003406:	d01e      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800340c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003410:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003414:	d10c      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800341a:	3328      	adds	r3, #40	@ 0x28
 800341c:	2102      	movs	r1, #2
 800341e:	4618      	mov	r0, r3
 8003420:	f000 fe54 	bl	80040cc <RCCEx_PLL3_Config>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003430:	4b87      	ldr	r3, [pc, #540]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003434:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800343c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003440:	4a83      	ldr	r2, [pc, #524]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003442:	430b      	orrs	r3, r1
 8003444:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800344a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344e:	f002 0310 	and.w	r3, r2, #16
 8003452:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003456:	2300      	movs	r3, #0
 8003458:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800345c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003460:	460b      	mov	r3, r1
 8003462:	4313      	orrs	r3, r2
 8003464:	d01e      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800346a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800346e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003472:	d10c      	bne.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003478:	3328      	adds	r3, #40	@ 0x28
 800347a:	2102      	movs	r1, #2
 800347c:	4618      	mov	r0, r3
 800347e:	f000 fe25 	bl	80040cc <RCCEx_PLL3_Config>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800348e:	4b70      	ldr	r3, [pc, #448]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003492:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800349a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800349e:	4a6c      	ldr	r2, [pc, #432]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034a0:	430b      	orrs	r3, r1
 80034a2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ac:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80034b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034b4:	2300      	movs	r3, #0
 80034b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034ba:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80034be:	460b      	mov	r3, r1
 80034c0:	4313      	orrs	r3, r2
 80034c2:	d03e      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80034c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80034cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034d0:	d022      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80034d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034d6:	d81b      	bhi.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80034dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034e0:	d00b      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80034e2:	e015      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e8:	3308      	adds	r3, #8
 80034ea:	2100      	movs	r1, #0
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 fd3b 	bl	8003f68 <RCCEx_PLL2_Config>
 80034f2:	4603      	mov	r3, r0
 80034f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80034f8:	e00f      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034fe:	3328      	adds	r3, #40	@ 0x28
 8003500:	2102      	movs	r1, #2
 8003502:	4618      	mov	r0, r3
 8003504:	f000 fde2 	bl	80040cc <RCCEx_PLL3_Config>
 8003508:	4603      	mov	r3, r0
 800350a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800350e:	e004      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003516:	e000      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800351a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10b      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003522:	4b4b      	ldr	r3, [pc, #300]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003526:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800352a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800352e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003532:	4a47      	ldr	r2, [pc, #284]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003534:	430b      	orrs	r3, r1
 8003536:	6593      	str	r3, [r2, #88]	@ 0x58
 8003538:	e003      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800353a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800353e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800354e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003550:	2300      	movs	r3, #0
 8003552:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003554:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003558:	460b      	mov	r3, r1
 800355a:	4313      	orrs	r3, r2
 800355c:	d03b      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800355e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003566:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800356a:	d01f      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800356c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003570:	d818      	bhi.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003572:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003576:	d003      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003578:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800357c:	d007      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800357e:	e011      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003580:	4b33      	ldr	r3, [pc, #204]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003584:	4a32      	ldr	r2, [pc, #200]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800358a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800358c:	e00f      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800358e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003592:	3328      	adds	r3, #40	@ 0x28
 8003594:	2101      	movs	r1, #1
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fd98 	bl	80040cc <RCCEx_PLL3_Config>
 800359c:	4603      	mov	r3, r0
 800359e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80035a2:	e004      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035aa:	e000      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80035ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10b      	bne.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035b6:	4b26      	ldr	r3, [pc, #152]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80035be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c6:	4a22      	ldr	r2, [pc, #136]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035c8:	430b      	orrs	r3, r1
 80035ca:	6553      	str	r3, [r2, #84]	@ 0x54
 80035cc:	e003      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80035d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035de:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80035e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80035e4:	2300      	movs	r3, #0
 80035e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80035e8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80035ec:	460b      	mov	r3, r1
 80035ee:	4313      	orrs	r3, r2
 80035f0:	d034      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80035f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80035fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003600:	d007      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003602:	e011      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003604:	4b12      	ldr	r3, [pc, #72]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003608:	4a11      	ldr	r2, [pc, #68]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800360a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800360e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003610:	e00e      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003616:	3308      	adds	r3, #8
 8003618:	2102      	movs	r1, #2
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fca4 	bl	8003f68 <RCCEx_PLL2_Config>
 8003620:	4603      	mov	r3, r0
 8003622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003626:	e003      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800362e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003630:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10d      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003638:	4b05      	ldr	r3, [pc, #20]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800363a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800363c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003646:	4a02      	ldr	r2, [pc, #8]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003648:	430b      	orrs	r3, r1
 800364a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800364c:	e006      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800364e:	bf00      	nop
 8003650:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003654:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003658:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800365c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003664:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003668:	66bb      	str	r3, [r7, #104]	@ 0x68
 800366a:	2300      	movs	r3, #0
 800366c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800366e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003672:	460b      	mov	r3, r1
 8003674:	4313      	orrs	r3, r2
 8003676:	d00c      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367c:	3328      	adds	r3, #40	@ 0x28
 800367e:	2102      	movs	r1, #2
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fd23 	bl	80040cc <RCCEx_PLL3_Config>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d002      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800369e:	663b      	str	r3, [r7, #96]	@ 0x60
 80036a0:	2300      	movs	r3, #0
 80036a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80036a4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80036a8:	460b      	mov	r3, r1
 80036aa:	4313      	orrs	r3, r2
 80036ac:	d038      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80036ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036ba:	d018      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80036bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036c0:	d811      	bhi.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80036c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036c6:	d014      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80036c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036cc:	d80b      	bhi.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d011      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80036d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036d6:	d106      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036d8:	4bc3      	ldr	r3, [pc, #780]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036dc:	4ac2      	ldr	r2, [pc, #776]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80036e4:	e008      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036ec:	e004      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80036ee:	bf00      	nop
 80036f0:	e002      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80036f2:	bf00      	nop
 80036f4:	e000      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80036f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10b      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003700:	4bb9      	ldr	r3, [pc, #740]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003704:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800370c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003710:	4ab5      	ldr	r2, [pc, #724]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003712:	430b      	orrs	r3, r1
 8003714:	6553      	str	r3, [r2, #84]	@ 0x54
 8003716:	e003      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003718:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800371c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003728:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800372c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800372e:	2300      	movs	r3, #0
 8003730:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003732:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003736:	460b      	mov	r3, r1
 8003738:	4313      	orrs	r3, r2
 800373a:	d009      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800373c:	4baa      	ldr	r3, [pc, #680]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800373e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003740:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800374a:	4aa7      	ldr	r2, [pc, #668]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800374c:	430b      	orrs	r3, r1
 800374e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003758:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800375c:	653b      	str	r3, [r7, #80]	@ 0x50
 800375e:	2300      	movs	r3, #0
 8003760:	657b      	str	r3, [r7, #84]	@ 0x54
 8003762:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003766:	460b      	mov	r3, r1
 8003768:	4313      	orrs	r3, r2
 800376a:	d00a      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800376c:	4b9e      	ldr	r3, [pc, #632]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003778:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800377c:	4a9a      	ldr	r2, [pc, #616]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800377e:	430b      	orrs	r3, r1
 8003780:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800378e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003790:	2300      	movs	r3, #0
 8003792:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003794:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003798:	460b      	mov	r3, r1
 800379a:	4313      	orrs	r3, r2
 800379c:	d009      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800379e:	4b92      	ldr	r3, [pc, #584]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037a2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80037a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037ac:	4a8e      	ldr	r2, [pc, #568]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037ae:	430b      	orrs	r3, r1
 80037b0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80037b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ba:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80037be:	643b      	str	r3, [r7, #64]	@ 0x40
 80037c0:	2300      	movs	r3, #0
 80037c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80037c4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80037c8:	460b      	mov	r3, r1
 80037ca:	4313      	orrs	r3, r2
 80037cc:	d00e      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037ce:	4b86      	ldr	r3, [pc, #536]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	4a85      	ldr	r2, [pc, #532]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037d4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80037d8:	6113      	str	r3, [r2, #16]
 80037da:	4b83      	ldr	r3, [pc, #524]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037dc:	6919      	ldr	r1, [r3, #16]
 80037de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80037e6:	4a80      	ldr	r2, [pc, #512]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037e8:	430b      	orrs	r3, r1
 80037ea:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80037ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80037f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037fa:	2300      	movs	r3, #0
 80037fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037fe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003802:	460b      	mov	r3, r1
 8003804:	4313      	orrs	r3, r2
 8003806:	d009      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003808:	4b77      	ldr	r3, [pc, #476]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800380a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800380c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003816:	4a74      	ldr	r2, [pc, #464]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003818:	430b      	orrs	r3, r1
 800381a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800381c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003824:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003828:	633b      	str	r3, [r7, #48]	@ 0x30
 800382a:	2300      	movs	r3, #0
 800382c:	637b      	str	r3, [r7, #52]	@ 0x34
 800382e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003832:	460b      	mov	r3, r1
 8003834:	4313      	orrs	r3, r2
 8003836:	d00a      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003838:	4b6b      	ldr	r3, [pc, #428]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800383a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800383c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003844:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003848:	4a67      	ldr	r2, [pc, #412]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800384a:	430b      	orrs	r3, r1
 800384c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800384e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003856:	2100      	movs	r1, #0
 8003858:	62b9      	str	r1, [r7, #40]	@ 0x28
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003860:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003864:	460b      	mov	r3, r1
 8003866:	4313      	orrs	r3, r2
 8003868:	d011      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800386a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800386e:	3308      	adds	r3, #8
 8003870:	2100      	movs	r1, #0
 8003872:	4618      	mov	r0, r3
 8003874:	f000 fb78 	bl	8003f68 <RCCEx_PLL2_Config>
 8003878:	4603      	mov	r3, r0
 800387a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800387e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003886:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800388a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800388e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003896:	2100      	movs	r1, #0
 8003898:	6239      	str	r1, [r7, #32]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	627b      	str	r3, [r7, #36]	@ 0x24
 80038a0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80038a4:	460b      	mov	r3, r1
 80038a6:	4313      	orrs	r3, r2
 80038a8:	d011      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ae:	3308      	adds	r3, #8
 80038b0:	2101      	movs	r1, #1
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 fb58 	bl	8003f68 <RCCEx_PLL2_Config>
 80038b8:	4603      	mov	r3, r0
 80038ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80038be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80038ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d6:	2100      	movs	r1, #0
 80038d8:	61b9      	str	r1, [r7, #24]
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	61fb      	str	r3, [r7, #28]
 80038e0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80038e4:	460b      	mov	r3, r1
 80038e6:	4313      	orrs	r3, r2
 80038e8:	d011      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ee:	3308      	adds	r3, #8
 80038f0:	2102      	movs	r1, #2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 fb38 	bl	8003f68 <RCCEx_PLL2_Config>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80038fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800390a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800390e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003916:	2100      	movs	r1, #0
 8003918:	6139      	str	r1, [r7, #16]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003924:	460b      	mov	r3, r1
 8003926:	4313      	orrs	r3, r2
 8003928:	d011      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800392a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392e:	3328      	adds	r3, #40	@ 0x28
 8003930:	2100      	movs	r1, #0
 8003932:	4618      	mov	r0, r3
 8003934:	f000 fbca 	bl	80040cc <RCCEx_PLL3_Config>
 8003938:	4603      	mov	r3, r0
 800393a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800393e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800394a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800394e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003956:	2100      	movs	r1, #0
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003964:	460b      	mov	r3, r1
 8003966:	4313      	orrs	r3, r2
 8003968:	d011      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800396a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800396e:	3328      	adds	r3, #40	@ 0x28
 8003970:	2101      	movs	r1, #1
 8003972:	4618      	mov	r0, r3
 8003974:	f000 fbaa 	bl	80040cc <RCCEx_PLL3_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800397e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800398a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800398e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003996:	2100      	movs	r1, #0
 8003998:	6039      	str	r1, [r7, #0]
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	607b      	str	r3, [r7, #4]
 80039a0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80039a4:	460b      	mov	r3, r1
 80039a6:	4313      	orrs	r3, r2
 80039a8:	d011      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ae:	3328      	adds	r3, #40	@ 0x28
 80039b0:	2102      	movs	r1, #2
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 fb8a 	bl	80040cc <RCCEx_PLL3_Config>
 80039b8:	4603      	mov	r3, r0
 80039ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80039be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80039ce:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	e000      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
}
 80039dc:	4618      	mov	r0, r3
 80039de:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80039e2:	46bd      	mov	sp, r7
 80039e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039e8:	58024400 	.word	0x58024400

080039ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80039f0:	f7fe fd96 	bl	8002520 <HAL_RCC_GetHCLKFreq>
 80039f4:	4602      	mov	r2, r0
 80039f6:	4b06      	ldr	r3, [pc, #24]	@ (8003a10 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	091b      	lsrs	r3, r3, #4
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	4904      	ldr	r1, [pc, #16]	@ (8003a14 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003a02:	5ccb      	ldrb	r3, [r1, r3]
 8003a04:	f003 031f 	and.w	r3, r3, #31
 8003a08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	58024400 	.word	0x58024400
 8003a14:	080088c0 	.word	0x080088c0

08003a18 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b089      	sub	sp, #36	@ 0x24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a20:	4ba1      	ldr	r3, [pc, #644]	@ (8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a24:	f003 0303 	and.w	r3, r3, #3
 8003a28:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003a2a:	4b9f      	ldr	r3, [pc, #636]	@ (8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a2e:	0b1b      	lsrs	r3, r3, #12
 8003a30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a34:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003a36:	4b9c      	ldr	r3, [pc, #624]	@ (8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3a:	091b      	lsrs	r3, r3, #4
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003a42:	4b99      	ldr	r3, [pc, #612]	@ (8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a46:	08db      	lsrs	r3, r3, #3
 8003a48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	fb02 f303 	mul.w	r3, r2, r3
 8003a52:	ee07 3a90 	vmov	s15, r3
 8003a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 8111 	beq.w	8003c88 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	f000 8083 	beq.w	8003b74 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	f200 80a1 	bhi.w	8003bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d056      	beq.n	8003b30 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003a82:	e099      	b.n	8003bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a84:	4b88      	ldr	r3, [pc, #544]	@ (8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0320 	and.w	r3, r3, #32
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d02d      	beq.n	8003aec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a90:	4b85      	ldr	r3, [pc, #532]	@ (8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	08db      	lsrs	r3, r3, #3
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	4a84      	ldr	r2, [pc, #528]	@ (8003cac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	ee07 3a90 	vmov	s15, r3
 8003aa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	ee07 3a90 	vmov	s15, r3
 8003ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aba:	4b7b      	ldr	r3, [pc, #492]	@ (8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ace:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ada:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003aea:	e087      	b.n	8003bfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	ee07 3a90 	vmov	s15, r3
 8003af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003afe:	4b6a      	ldr	r3, [pc, #424]	@ (8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b06:	ee07 3a90 	vmov	s15, r3
 8003b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b12:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b2e:	e065      	b.n	8003bfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	ee07 3a90 	vmov	s15, r3
 8003b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b3a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b42:	4b59      	ldr	r3, [pc, #356]	@ (8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b4a:	ee07 3a90 	vmov	s15, r3
 8003b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b56:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b72:	e043      	b.n	8003bfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	ee07 3a90 	vmov	s15, r3
 8003b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b7e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b86:	4b48      	ldr	r3, [pc, #288]	@ (8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b96:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b9a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bb6:	e021      	b.n	8003bfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	ee07 3a90 	vmov	s15, r3
 8003bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bca:	4b37      	ldr	r3, [pc, #220]	@ (8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd2:	ee07 3a90 	vmov	s15, r3
 8003bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bda:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bde:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bfa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c00:	0a5b      	lsrs	r3, r3, #9
 8003c02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c06:	ee07 3a90 	vmov	s15, r3
 8003c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c16:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c22:	ee17 2a90 	vmov	r2, s15
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c2e:	0c1b      	lsrs	r3, r3, #16
 8003c30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c34:	ee07 3a90 	vmov	s15, r3
 8003c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c44:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c50:	ee17 2a90 	vmov	r2, s15
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003c58:	4b13      	ldr	r3, [pc, #76]	@ (8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5c:	0e1b      	lsrs	r3, r3, #24
 8003c5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c62:	ee07 3a90 	vmov	s15, r3
 8003c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c72:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c7e:	ee17 2a90 	vmov	r2, s15
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003c86:	e008      	b.n	8003c9a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	609a      	str	r2, [r3, #8]
}
 8003c9a:	bf00      	nop
 8003c9c:	3724      	adds	r7, #36	@ 0x24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	58024400 	.word	0x58024400
 8003cac:	03d09000 	.word	0x03d09000
 8003cb0:	46000000 	.word	0x46000000
 8003cb4:	4c742400 	.word	0x4c742400
 8003cb8:	4a742400 	.word	0x4a742400
 8003cbc:	4af42400 	.word	0x4af42400

08003cc0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b089      	sub	sp, #36	@ 0x24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003cc8:	4ba1      	ldr	r3, [pc, #644]	@ (8003f50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003cd2:	4b9f      	ldr	r3, [pc, #636]	@ (8003f50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd6:	0d1b      	lsrs	r3, r3, #20
 8003cd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cdc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003cde:	4b9c      	ldr	r3, [pc, #624]	@ (8003f50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce2:	0a1b      	lsrs	r3, r3, #8
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003cea:	4b99      	ldr	r3, [pc, #612]	@ (8003f50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cee:	08db      	lsrs	r3, r3, #3
 8003cf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	fb02 f303 	mul.w	r3, r2, r3
 8003cfa:	ee07 3a90 	vmov	s15, r3
 8003cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 8111 	beq.w	8003f30 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	f000 8083 	beq.w	8003e1c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	f200 80a1 	bhi.w	8003e60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d056      	beq.n	8003dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003d2a:	e099      	b.n	8003e60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d2c:	4b88      	ldr	r3, [pc, #544]	@ (8003f50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0320 	and.w	r3, r3, #32
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d02d      	beq.n	8003d94 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d38:	4b85      	ldr	r3, [pc, #532]	@ (8003f50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	08db      	lsrs	r3, r3, #3
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	4a84      	ldr	r2, [pc, #528]	@ (8003f54 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003d44:	fa22 f303 	lsr.w	r3, r2, r3
 8003d48:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	ee07 3a90 	vmov	s15, r3
 8003d50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	ee07 3a90 	vmov	s15, r3
 8003d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d62:	4b7b      	ldr	r3, [pc, #492]	@ (8003f50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d6a:	ee07 3a90 	vmov	s15, r3
 8003d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d72:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d76:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003d92:	e087      	b.n	8003ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	ee07 3a90 	vmov	s15, r3
 8003d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d9e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003f5c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003da6:	4b6a      	ldr	r3, [pc, #424]	@ (8003f50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dae:	ee07 3a90 	vmov	s15, r3
 8003db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003db6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dd6:	e065      	b.n	8003ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	ee07 3a90 	vmov	s15, r3
 8003dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003de2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003f60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dea:	4b59      	ldr	r3, [pc, #356]	@ (8003f50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003df2:	ee07 3a90 	vmov	s15, r3
 8003df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dfe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e1a:	e043      	b.n	8003ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	ee07 3a90 	vmov	s15, r3
 8003e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e26:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003f64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e2e:	4b48      	ldr	r3, [pc, #288]	@ (8003f50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e36:	ee07 3a90 	vmov	s15, r3
 8003e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e42:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e5e:	e021      	b.n	8003ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	ee07 3a90 	vmov	s15, r3
 8003e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e6a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003f60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e72:	4b37      	ldr	r3, [pc, #220]	@ (8003f50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e7a:	ee07 3a90 	vmov	s15, r3
 8003e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e82:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e86:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ea2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003ea4:	4b2a      	ldr	r3, [pc, #168]	@ (8003f50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea8:	0a5b      	lsrs	r3, r3, #9
 8003eaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003eae:	ee07 3a90 	vmov	s15, r3
 8003eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003eba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ebe:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003eca:	ee17 2a90 	vmov	r2, s15
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003ed2:	4b1f      	ldr	r3, [pc, #124]	@ (8003f50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed6:	0c1b      	lsrs	r3, r3, #16
 8003ed8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003edc:	ee07 3a90 	vmov	s15, r3
 8003ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ee4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ee8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003eec:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ef4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ef8:	ee17 2a90 	vmov	r2, s15
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003f00:	4b13      	ldr	r3, [pc, #76]	@ (8003f50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f04:	0e1b      	lsrs	r3, r3, #24
 8003f06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f0a:	ee07 3a90 	vmov	s15, r3
 8003f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f26:	ee17 2a90 	vmov	r2, s15
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003f2e:	e008      	b.n	8003f42 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	609a      	str	r2, [r3, #8]
}
 8003f42:	bf00      	nop
 8003f44:	3724      	adds	r7, #36	@ 0x24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	58024400 	.word	0x58024400
 8003f54:	03d09000 	.word	0x03d09000
 8003f58:	46000000 	.word	0x46000000
 8003f5c:	4c742400 	.word	0x4c742400
 8003f60:	4a742400 	.word	0x4a742400
 8003f64:	4af42400 	.word	0x4af42400

08003f68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f76:	4b53      	ldr	r3, [pc, #332]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8003f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	2b03      	cmp	r3, #3
 8003f80:	d101      	bne.n	8003f86 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e099      	b.n	80040ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003f86:	4b4f      	ldr	r3, [pc, #316]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a4e      	ldr	r2, [pc, #312]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8003f8c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f92:	f7fc ff9f 	bl	8000ed4 <HAL_GetTick>
 8003f96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f98:	e008      	b.n	8003fac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f9a:	f7fc ff9b 	bl	8000ed4 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e086      	b.n	80040ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003fac:	4b45      	ldr	r3, [pc, #276]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1f0      	bne.n	8003f9a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003fb8:	4b42      	ldr	r3, [pc, #264]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8003fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	031b      	lsls	r3, r3, #12
 8003fc6:	493f      	ldr	r1, [pc, #252]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	628b      	str	r3, [r1, #40]	@ 0x28
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	025b      	lsls	r3, r3, #9
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	041b      	lsls	r3, r3, #16
 8003fea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	061b      	lsls	r3, r3, #24
 8003ff8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003ffc:	4931      	ldr	r1, [pc, #196]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004002:	4b30      	ldr	r3, [pc, #192]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8004004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004006:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	492d      	ldr	r1, [pc, #180]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8004010:	4313      	orrs	r3, r2
 8004012:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004014:	4b2b      	ldr	r3, [pc, #172]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8004016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004018:	f023 0220 	bic.w	r2, r3, #32
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	4928      	ldr	r1, [pc, #160]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8004022:	4313      	orrs	r3, r2
 8004024:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004026:	4b27      	ldr	r3, [pc, #156]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8004028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402a:	4a26      	ldr	r2, [pc, #152]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 800402c:	f023 0310 	bic.w	r3, r3, #16
 8004030:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004032:	4b24      	ldr	r3, [pc, #144]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8004034:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004036:	4b24      	ldr	r3, [pc, #144]	@ (80040c8 <RCCEx_PLL2_Config+0x160>)
 8004038:	4013      	ands	r3, r2
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	69d2      	ldr	r2, [r2, #28]
 800403e:	00d2      	lsls	r2, r2, #3
 8004040:	4920      	ldr	r1, [pc, #128]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8004042:	4313      	orrs	r3, r2
 8004044:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004046:	4b1f      	ldr	r3, [pc, #124]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8004048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404a:	4a1e      	ldr	r2, [pc, #120]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 800404c:	f043 0310 	orr.w	r3, r3, #16
 8004050:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d106      	bne.n	8004066 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004058:	4b1a      	ldr	r3, [pc, #104]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 800405a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405c:	4a19      	ldr	r2, [pc, #100]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 800405e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004062:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004064:	e00f      	b.n	8004086 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d106      	bne.n	800407a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800406c:	4b15      	ldr	r3, [pc, #84]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 800406e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004070:	4a14      	ldr	r2, [pc, #80]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8004072:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004076:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004078:	e005      	b.n	8004086 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800407a:	4b12      	ldr	r3, [pc, #72]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 800407c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407e:	4a11      	ldr	r2, [pc, #68]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8004080:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004084:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004086:	4b0f      	ldr	r3, [pc, #60]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a0e      	ldr	r2, [pc, #56]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 800408c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004090:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004092:	f7fc ff1f 	bl	8000ed4 <HAL_GetTick>
 8004096:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004098:	e008      	b.n	80040ac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800409a:	f7fc ff1b 	bl	8000ed4 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e006      	b.n	80040ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80040ac:	4b05      	ldr	r3, [pc, #20]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f0      	beq.n	800409a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	58024400 	.word	0x58024400
 80040c8:	ffff0007 	.word	0xffff0007

080040cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80040da:	4b53      	ldr	r3, [pc, #332]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 80040dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	d101      	bne.n	80040ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e099      	b.n	800421e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80040ea:	4b4f      	ldr	r3, [pc, #316]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a4e      	ldr	r2, [pc, #312]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 80040f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040f6:	f7fc feed 	bl	8000ed4 <HAL_GetTick>
 80040fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80040fc:	e008      	b.n	8004110 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80040fe:	f7fc fee9 	bl	8000ed4 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e086      	b.n	800421e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004110:	4b45      	ldr	r3, [pc, #276]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1f0      	bne.n	80040fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800411c:	4b42      	ldr	r3, [pc, #264]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 800411e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004120:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	051b      	lsls	r3, r3, #20
 800412a:	493f      	ldr	r1, [pc, #252]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 800412c:	4313      	orrs	r3, r2
 800412e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	3b01      	subs	r3, #1
 8004136:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	3b01      	subs	r3, #1
 8004140:	025b      	lsls	r3, r3, #9
 8004142:	b29b      	uxth	r3, r3
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	3b01      	subs	r3, #1
 800414c:	041b      	lsls	r3, r3, #16
 800414e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	3b01      	subs	r3, #1
 800415a:	061b      	lsls	r3, r3, #24
 800415c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004160:	4931      	ldr	r1, [pc, #196]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 8004162:	4313      	orrs	r3, r2
 8004164:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004166:	4b30      	ldr	r3, [pc, #192]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 8004168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	492d      	ldr	r1, [pc, #180]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 8004174:	4313      	orrs	r3, r2
 8004176:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004178:	4b2b      	ldr	r3, [pc, #172]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 800417a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	4928      	ldr	r1, [pc, #160]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 8004186:	4313      	orrs	r3, r2
 8004188:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800418a:	4b27      	ldr	r3, [pc, #156]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 800418c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418e:	4a26      	ldr	r2, [pc, #152]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 8004190:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004194:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004196:	4b24      	ldr	r3, [pc, #144]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 8004198:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800419a:	4b24      	ldr	r3, [pc, #144]	@ (800422c <RCCEx_PLL3_Config+0x160>)
 800419c:	4013      	ands	r3, r2
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	69d2      	ldr	r2, [r2, #28]
 80041a2:	00d2      	lsls	r2, r2, #3
 80041a4:	4920      	ldr	r1, [pc, #128]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80041aa:	4b1f      	ldr	r3, [pc, #124]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 80041ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ae:	4a1e      	ldr	r2, [pc, #120]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 80041b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d106      	bne.n	80041ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80041bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 80041be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c0:	4a19      	ldr	r2, [pc, #100]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 80041c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80041c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80041c8:	e00f      	b.n	80041ea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d106      	bne.n	80041de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80041d0:	4b15      	ldr	r3, [pc, #84]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 80041d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d4:	4a14      	ldr	r2, [pc, #80]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 80041d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80041dc:	e005      	b.n	80041ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80041de:	4b12      	ldr	r3, [pc, #72]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 80041e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e2:	4a11      	ldr	r2, [pc, #68]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 80041e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80041ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a0e      	ldr	r2, [pc, #56]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 80041f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f6:	f7fc fe6d 	bl	8000ed4 <HAL_GetTick>
 80041fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80041fc:	e008      	b.n	8004210 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80041fe:	f7fc fe69 	bl	8000ed4 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e006      	b.n	800421e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004210:	4b05      	ldr	r3, [pc, #20]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0f0      	beq.n	80041fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800421c:	7bfb      	ldrb	r3, [r7, #15]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	58024400 	.word	0x58024400
 800422c:	ffff0007 	.word	0xffff0007

08004230 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e042      	b.n	80042c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004248:	2b00      	cmp	r3, #0
 800424a:	d106      	bne.n	800425a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7fc fd23 	bl	8000ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2224      	movs	r2, #36	@ 0x24
 800425e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0201 	bic.w	r2, r2, #1
 8004270:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fe1e 	bl	8004ebc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f8b3 	bl	80043ec <UART_SetConfig>
 8004286:	4603      	mov	r3, r0
 8004288:	2b01      	cmp	r3, #1
 800428a:	d101      	bne.n	8004290 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e01b      	b.n	80042c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800429e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0201 	orr.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 fe9d 	bl	8005000 <UART_CheckIdleState>
 80042c6:	4603      	mov	r3, r0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b08a      	sub	sp, #40	@ 0x28
 80042d4:	af02      	add	r7, sp, #8
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	603b      	str	r3, [r7, #0]
 80042dc:	4613      	mov	r3, r2
 80042de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e6:	2b20      	cmp	r3, #32
 80042e8:	d17b      	bne.n	80043e2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <HAL_UART_Transmit+0x26>
 80042f0:	88fb      	ldrh	r3, [r7, #6]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e074      	b.n	80043e4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2221      	movs	r2, #33	@ 0x21
 8004306:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800430a:	f7fc fde3 	bl	8000ed4 <HAL_GetTick>
 800430e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	88fa      	ldrh	r2, [r7, #6]
 8004314:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	88fa      	ldrh	r2, [r7, #6]
 800431c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004328:	d108      	bne.n	800433c <HAL_UART_Transmit+0x6c>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d104      	bne.n	800433c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004332:	2300      	movs	r3, #0
 8004334:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	61bb      	str	r3, [r7, #24]
 800433a:	e003      	b.n	8004344 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004340:	2300      	movs	r3, #0
 8004342:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004344:	e030      	b.n	80043a8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	2200      	movs	r2, #0
 800434e:	2180      	movs	r1, #128	@ 0x80
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 feff 	bl	8005154 <UART_WaitOnFlagUntilTimeout>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2220      	movs	r2, #32
 8004360:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e03d      	b.n	80043e4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10b      	bne.n	8004386 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800437c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	3302      	adds	r3, #2
 8004382:	61bb      	str	r3, [r7, #24]
 8004384:	e007      	b.n	8004396 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	781a      	ldrb	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	3301      	adds	r3, #1
 8004394:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800439c:	b29b      	uxth	r3, r3
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1c8      	bne.n	8004346 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	2200      	movs	r2, #0
 80043bc:	2140      	movs	r1, #64	@ 0x40
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 fec8 	bl	8005154 <UART_WaitOnFlagUntilTimeout>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d005      	beq.n	80043d6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e006      	b.n	80043e4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2220      	movs	r2, #32
 80043da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	e000      	b.n	80043e4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80043e2:	2302      	movs	r3, #2
  }
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3720      	adds	r7, #32
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043f0:	b092      	sub	sp, #72	@ 0x48
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	431a      	orrs	r2, r3
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	431a      	orrs	r2, r3
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	4313      	orrs	r3, r2
 8004412:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	4bbe      	ldr	r3, [pc, #760]	@ (8004714 <UART_SetConfig+0x328>)
 800441c:	4013      	ands	r3, r2
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	6812      	ldr	r2, [r2, #0]
 8004422:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004424:	430b      	orrs	r3, r1
 8004426:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4ab3      	ldr	r2, [pc, #716]	@ (8004718 <UART_SetConfig+0x32c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d004      	beq.n	8004458 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004454:	4313      	orrs	r3, r2
 8004456:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689a      	ldr	r2, [r3, #8]
 800445e:	4baf      	ldr	r3, [pc, #700]	@ (800471c <UART_SetConfig+0x330>)
 8004460:	4013      	ands	r3, r2
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	6812      	ldr	r2, [r2, #0]
 8004466:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004468:	430b      	orrs	r3, r1
 800446a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004472:	f023 010f 	bic.w	r1, r3, #15
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4aa6      	ldr	r2, [pc, #664]	@ (8004720 <UART_SetConfig+0x334>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d177      	bne.n	800457c <UART_SetConfig+0x190>
 800448c:	4ba5      	ldr	r3, [pc, #660]	@ (8004724 <UART_SetConfig+0x338>)
 800448e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004490:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004494:	2b28      	cmp	r3, #40	@ 0x28
 8004496:	d86d      	bhi.n	8004574 <UART_SetConfig+0x188>
 8004498:	a201      	add	r2, pc, #4	@ (adr r2, 80044a0 <UART_SetConfig+0xb4>)
 800449a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449e:	bf00      	nop
 80044a0:	08004545 	.word	0x08004545
 80044a4:	08004575 	.word	0x08004575
 80044a8:	08004575 	.word	0x08004575
 80044ac:	08004575 	.word	0x08004575
 80044b0:	08004575 	.word	0x08004575
 80044b4:	08004575 	.word	0x08004575
 80044b8:	08004575 	.word	0x08004575
 80044bc:	08004575 	.word	0x08004575
 80044c0:	0800454d 	.word	0x0800454d
 80044c4:	08004575 	.word	0x08004575
 80044c8:	08004575 	.word	0x08004575
 80044cc:	08004575 	.word	0x08004575
 80044d0:	08004575 	.word	0x08004575
 80044d4:	08004575 	.word	0x08004575
 80044d8:	08004575 	.word	0x08004575
 80044dc:	08004575 	.word	0x08004575
 80044e0:	08004555 	.word	0x08004555
 80044e4:	08004575 	.word	0x08004575
 80044e8:	08004575 	.word	0x08004575
 80044ec:	08004575 	.word	0x08004575
 80044f0:	08004575 	.word	0x08004575
 80044f4:	08004575 	.word	0x08004575
 80044f8:	08004575 	.word	0x08004575
 80044fc:	08004575 	.word	0x08004575
 8004500:	0800455d 	.word	0x0800455d
 8004504:	08004575 	.word	0x08004575
 8004508:	08004575 	.word	0x08004575
 800450c:	08004575 	.word	0x08004575
 8004510:	08004575 	.word	0x08004575
 8004514:	08004575 	.word	0x08004575
 8004518:	08004575 	.word	0x08004575
 800451c:	08004575 	.word	0x08004575
 8004520:	08004565 	.word	0x08004565
 8004524:	08004575 	.word	0x08004575
 8004528:	08004575 	.word	0x08004575
 800452c:	08004575 	.word	0x08004575
 8004530:	08004575 	.word	0x08004575
 8004534:	08004575 	.word	0x08004575
 8004538:	08004575 	.word	0x08004575
 800453c:	08004575 	.word	0x08004575
 8004540:	0800456d 	.word	0x0800456d
 8004544:	2301      	movs	r3, #1
 8004546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800454a:	e222      	b.n	8004992 <UART_SetConfig+0x5a6>
 800454c:	2304      	movs	r3, #4
 800454e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004552:	e21e      	b.n	8004992 <UART_SetConfig+0x5a6>
 8004554:	2308      	movs	r3, #8
 8004556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800455a:	e21a      	b.n	8004992 <UART_SetConfig+0x5a6>
 800455c:	2310      	movs	r3, #16
 800455e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004562:	e216      	b.n	8004992 <UART_SetConfig+0x5a6>
 8004564:	2320      	movs	r3, #32
 8004566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800456a:	e212      	b.n	8004992 <UART_SetConfig+0x5a6>
 800456c:	2340      	movs	r3, #64	@ 0x40
 800456e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004572:	e20e      	b.n	8004992 <UART_SetConfig+0x5a6>
 8004574:	2380      	movs	r3, #128	@ 0x80
 8004576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800457a:	e20a      	b.n	8004992 <UART_SetConfig+0x5a6>
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a69      	ldr	r2, [pc, #420]	@ (8004728 <UART_SetConfig+0x33c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d130      	bne.n	80045e8 <UART_SetConfig+0x1fc>
 8004586:	4b67      	ldr	r3, [pc, #412]	@ (8004724 <UART_SetConfig+0x338>)
 8004588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	2b05      	cmp	r3, #5
 8004590:	d826      	bhi.n	80045e0 <UART_SetConfig+0x1f4>
 8004592:	a201      	add	r2, pc, #4	@ (adr r2, 8004598 <UART_SetConfig+0x1ac>)
 8004594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004598:	080045b1 	.word	0x080045b1
 800459c:	080045b9 	.word	0x080045b9
 80045a0:	080045c1 	.word	0x080045c1
 80045a4:	080045c9 	.word	0x080045c9
 80045a8:	080045d1 	.word	0x080045d1
 80045ac:	080045d9 	.word	0x080045d9
 80045b0:	2300      	movs	r3, #0
 80045b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045b6:	e1ec      	b.n	8004992 <UART_SetConfig+0x5a6>
 80045b8:	2304      	movs	r3, #4
 80045ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045be:	e1e8      	b.n	8004992 <UART_SetConfig+0x5a6>
 80045c0:	2308      	movs	r3, #8
 80045c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045c6:	e1e4      	b.n	8004992 <UART_SetConfig+0x5a6>
 80045c8:	2310      	movs	r3, #16
 80045ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045ce:	e1e0      	b.n	8004992 <UART_SetConfig+0x5a6>
 80045d0:	2320      	movs	r3, #32
 80045d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045d6:	e1dc      	b.n	8004992 <UART_SetConfig+0x5a6>
 80045d8:	2340      	movs	r3, #64	@ 0x40
 80045da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045de:	e1d8      	b.n	8004992 <UART_SetConfig+0x5a6>
 80045e0:	2380      	movs	r3, #128	@ 0x80
 80045e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045e6:	e1d4      	b.n	8004992 <UART_SetConfig+0x5a6>
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a4f      	ldr	r2, [pc, #316]	@ (800472c <UART_SetConfig+0x340>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d130      	bne.n	8004654 <UART_SetConfig+0x268>
 80045f2:	4b4c      	ldr	r3, [pc, #304]	@ (8004724 <UART_SetConfig+0x338>)
 80045f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	2b05      	cmp	r3, #5
 80045fc:	d826      	bhi.n	800464c <UART_SetConfig+0x260>
 80045fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004604 <UART_SetConfig+0x218>)
 8004600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004604:	0800461d 	.word	0x0800461d
 8004608:	08004625 	.word	0x08004625
 800460c:	0800462d 	.word	0x0800462d
 8004610:	08004635 	.word	0x08004635
 8004614:	0800463d 	.word	0x0800463d
 8004618:	08004645 	.word	0x08004645
 800461c:	2300      	movs	r3, #0
 800461e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004622:	e1b6      	b.n	8004992 <UART_SetConfig+0x5a6>
 8004624:	2304      	movs	r3, #4
 8004626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800462a:	e1b2      	b.n	8004992 <UART_SetConfig+0x5a6>
 800462c:	2308      	movs	r3, #8
 800462e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004632:	e1ae      	b.n	8004992 <UART_SetConfig+0x5a6>
 8004634:	2310      	movs	r3, #16
 8004636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800463a:	e1aa      	b.n	8004992 <UART_SetConfig+0x5a6>
 800463c:	2320      	movs	r3, #32
 800463e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004642:	e1a6      	b.n	8004992 <UART_SetConfig+0x5a6>
 8004644:	2340      	movs	r3, #64	@ 0x40
 8004646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800464a:	e1a2      	b.n	8004992 <UART_SetConfig+0x5a6>
 800464c:	2380      	movs	r3, #128	@ 0x80
 800464e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004652:	e19e      	b.n	8004992 <UART_SetConfig+0x5a6>
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a35      	ldr	r2, [pc, #212]	@ (8004730 <UART_SetConfig+0x344>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d130      	bne.n	80046c0 <UART_SetConfig+0x2d4>
 800465e:	4b31      	ldr	r3, [pc, #196]	@ (8004724 <UART_SetConfig+0x338>)
 8004660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	2b05      	cmp	r3, #5
 8004668:	d826      	bhi.n	80046b8 <UART_SetConfig+0x2cc>
 800466a:	a201      	add	r2, pc, #4	@ (adr r2, 8004670 <UART_SetConfig+0x284>)
 800466c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004670:	08004689 	.word	0x08004689
 8004674:	08004691 	.word	0x08004691
 8004678:	08004699 	.word	0x08004699
 800467c:	080046a1 	.word	0x080046a1
 8004680:	080046a9 	.word	0x080046a9
 8004684:	080046b1 	.word	0x080046b1
 8004688:	2300      	movs	r3, #0
 800468a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800468e:	e180      	b.n	8004992 <UART_SetConfig+0x5a6>
 8004690:	2304      	movs	r3, #4
 8004692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004696:	e17c      	b.n	8004992 <UART_SetConfig+0x5a6>
 8004698:	2308      	movs	r3, #8
 800469a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800469e:	e178      	b.n	8004992 <UART_SetConfig+0x5a6>
 80046a0:	2310      	movs	r3, #16
 80046a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046a6:	e174      	b.n	8004992 <UART_SetConfig+0x5a6>
 80046a8:	2320      	movs	r3, #32
 80046aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ae:	e170      	b.n	8004992 <UART_SetConfig+0x5a6>
 80046b0:	2340      	movs	r3, #64	@ 0x40
 80046b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046b6:	e16c      	b.n	8004992 <UART_SetConfig+0x5a6>
 80046b8:	2380      	movs	r3, #128	@ 0x80
 80046ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046be:	e168      	b.n	8004992 <UART_SetConfig+0x5a6>
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a1b      	ldr	r2, [pc, #108]	@ (8004734 <UART_SetConfig+0x348>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d142      	bne.n	8004750 <UART_SetConfig+0x364>
 80046ca:	4b16      	ldr	r3, [pc, #88]	@ (8004724 <UART_SetConfig+0x338>)
 80046cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ce:	f003 0307 	and.w	r3, r3, #7
 80046d2:	2b05      	cmp	r3, #5
 80046d4:	d838      	bhi.n	8004748 <UART_SetConfig+0x35c>
 80046d6:	a201      	add	r2, pc, #4	@ (adr r2, 80046dc <UART_SetConfig+0x2f0>)
 80046d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046dc:	080046f5 	.word	0x080046f5
 80046e0:	080046fd 	.word	0x080046fd
 80046e4:	08004705 	.word	0x08004705
 80046e8:	0800470d 	.word	0x0800470d
 80046ec:	08004739 	.word	0x08004739
 80046f0:	08004741 	.word	0x08004741
 80046f4:	2300      	movs	r3, #0
 80046f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046fa:	e14a      	b.n	8004992 <UART_SetConfig+0x5a6>
 80046fc:	2304      	movs	r3, #4
 80046fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004702:	e146      	b.n	8004992 <UART_SetConfig+0x5a6>
 8004704:	2308      	movs	r3, #8
 8004706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800470a:	e142      	b.n	8004992 <UART_SetConfig+0x5a6>
 800470c:	2310      	movs	r3, #16
 800470e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004712:	e13e      	b.n	8004992 <UART_SetConfig+0x5a6>
 8004714:	cfff69f3 	.word	0xcfff69f3
 8004718:	58000c00 	.word	0x58000c00
 800471c:	11fff4ff 	.word	0x11fff4ff
 8004720:	40011000 	.word	0x40011000
 8004724:	58024400 	.word	0x58024400
 8004728:	40004400 	.word	0x40004400
 800472c:	40004800 	.word	0x40004800
 8004730:	40004c00 	.word	0x40004c00
 8004734:	40005000 	.word	0x40005000
 8004738:	2320      	movs	r3, #32
 800473a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800473e:	e128      	b.n	8004992 <UART_SetConfig+0x5a6>
 8004740:	2340      	movs	r3, #64	@ 0x40
 8004742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004746:	e124      	b.n	8004992 <UART_SetConfig+0x5a6>
 8004748:	2380      	movs	r3, #128	@ 0x80
 800474a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800474e:	e120      	b.n	8004992 <UART_SetConfig+0x5a6>
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4acb      	ldr	r2, [pc, #812]	@ (8004a84 <UART_SetConfig+0x698>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d176      	bne.n	8004848 <UART_SetConfig+0x45c>
 800475a:	4bcb      	ldr	r3, [pc, #812]	@ (8004a88 <UART_SetConfig+0x69c>)
 800475c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800475e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004762:	2b28      	cmp	r3, #40	@ 0x28
 8004764:	d86c      	bhi.n	8004840 <UART_SetConfig+0x454>
 8004766:	a201      	add	r2, pc, #4	@ (adr r2, 800476c <UART_SetConfig+0x380>)
 8004768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476c:	08004811 	.word	0x08004811
 8004770:	08004841 	.word	0x08004841
 8004774:	08004841 	.word	0x08004841
 8004778:	08004841 	.word	0x08004841
 800477c:	08004841 	.word	0x08004841
 8004780:	08004841 	.word	0x08004841
 8004784:	08004841 	.word	0x08004841
 8004788:	08004841 	.word	0x08004841
 800478c:	08004819 	.word	0x08004819
 8004790:	08004841 	.word	0x08004841
 8004794:	08004841 	.word	0x08004841
 8004798:	08004841 	.word	0x08004841
 800479c:	08004841 	.word	0x08004841
 80047a0:	08004841 	.word	0x08004841
 80047a4:	08004841 	.word	0x08004841
 80047a8:	08004841 	.word	0x08004841
 80047ac:	08004821 	.word	0x08004821
 80047b0:	08004841 	.word	0x08004841
 80047b4:	08004841 	.word	0x08004841
 80047b8:	08004841 	.word	0x08004841
 80047bc:	08004841 	.word	0x08004841
 80047c0:	08004841 	.word	0x08004841
 80047c4:	08004841 	.word	0x08004841
 80047c8:	08004841 	.word	0x08004841
 80047cc:	08004829 	.word	0x08004829
 80047d0:	08004841 	.word	0x08004841
 80047d4:	08004841 	.word	0x08004841
 80047d8:	08004841 	.word	0x08004841
 80047dc:	08004841 	.word	0x08004841
 80047e0:	08004841 	.word	0x08004841
 80047e4:	08004841 	.word	0x08004841
 80047e8:	08004841 	.word	0x08004841
 80047ec:	08004831 	.word	0x08004831
 80047f0:	08004841 	.word	0x08004841
 80047f4:	08004841 	.word	0x08004841
 80047f8:	08004841 	.word	0x08004841
 80047fc:	08004841 	.word	0x08004841
 8004800:	08004841 	.word	0x08004841
 8004804:	08004841 	.word	0x08004841
 8004808:	08004841 	.word	0x08004841
 800480c:	08004839 	.word	0x08004839
 8004810:	2301      	movs	r3, #1
 8004812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004816:	e0bc      	b.n	8004992 <UART_SetConfig+0x5a6>
 8004818:	2304      	movs	r3, #4
 800481a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800481e:	e0b8      	b.n	8004992 <UART_SetConfig+0x5a6>
 8004820:	2308      	movs	r3, #8
 8004822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004826:	e0b4      	b.n	8004992 <UART_SetConfig+0x5a6>
 8004828:	2310      	movs	r3, #16
 800482a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800482e:	e0b0      	b.n	8004992 <UART_SetConfig+0x5a6>
 8004830:	2320      	movs	r3, #32
 8004832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004836:	e0ac      	b.n	8004992 <UART_SetConfig+0x5a6>
 8004838:	2340      	movs	r3, #64	@ 0x40
 800483a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800483e:	e0a8      	b.n	8004992 <UART_SetConfig+0x5a6>
 8004840:	2380      	movs	r3, #128	@ 0x80
 8004842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004846:	e0a4      	b.n	8004992 <UART_SetConfig+0x5a6>
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a8f      	ldr	r2, [pc, #572]	@ (8004a8c <UART_SetConfig+0x6a0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d130      	bne.n	80048b4 <UART_SetConfig+0x4c8>
 8004852:	4b8d      	ldr	r3, [pc, #564]	@ (8004a88 <UART_SetConfig+0x69c>)
 8004854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	2b05      	cmp	r3, #5
 800485c:	d826      	bhi.n	80048ac <UART_SetConfig+0x4c0>
 800485e:	a201      	add	r2, pc, #4	@ (adr r2, 8004864 <UART_SetConfig+0x478>)
 8004860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004864:	0800487d 	.word	0x0800487d
 8004868:	08004885 	.word	0x08004885
 800486c:	0800488d 	.word	0x0800488d
 8004870:	08004895 	.word	0x08004895
 8004874:	0800489d 	.word	0x0800489d
 8004878:	080048a5 	.word	0x080048a5
 800487c:	2300      	movs	r3, #0
 800487e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004882:	e086      	b.n	8004992 <UART_SetConfig+0x5a6>
 8004884:	2304      	movs	r3, #4
 8004886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800488a:	e082      	b.n	8004992 <UART_SetConfig+0x5a6>
 800488c:	2308      	movs	r3, #8
 800488e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004892:	e07e      	b.n	8004992 <UART_SetConfig+0x5a6>
 8004894:	2310      	movs	r3, #16
 8004896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800489a:	e07a      	b.n	8004992 <UART_SetConfig+0x5a6>
 800489c:	2320      	movs	r3, #32
 800489e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048a2:	e076      	b.n	8004992 <UART_SetConfig+0x5a6>
 80048a4:	2340      	movs	r3, #64	@ 0x40
 80048a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048aa:	e072      	b.n	8004992 <UART_SetConfig+0x5a6>
 80048ac:	2380      	movs	r3, #128	@ 0x80
 80048ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048b2:	e06e      	b.n	8004992 <UART_SetConfig+0x5a6>
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a75      	ldr	r2, [pc, #468]	@ (8004a90 <UART_SetConfig+0x6a4>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d130      	bne.n	8004920 <UART_SetConfig+0x534>
 80048be:	4b72      	ldr	r3, [pc, #456]	@ (8004a88 <UART_SetConfig+0x69c>)
 80048c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	2b05      	cmp	r3, #5
 80048c8:	d826      	bhi.n	8004918 <UART_SetConfig+0x52c>
 80048ca:	a201      	add	r2, pc, #4	@ (adr r2, 80048d0 <UART_SetConfig+0x4e4>)
 80048cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d0:	080048e9 	.word	0x080048e9
 80048d4:	080048f1 	.word	0x080048f1
 80048d8:	080048f9 	.word	0x080048f9
 80048dc:	08004901 	.word	0x08004901
 80048e0:	08004909 	.word	0x08004909
 80048e4:	08004911 	.word	0x08004911
 80048e8:	2300      	movs	r3, #0
 80048ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ee:	e050      	b.n	8004992 <UART_SetConfig+0x5a6>
 80048f0:	2304      	movs	r3, #4
 80048f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048f6:	e04c      	b.n	8004992 <UART_SetConfig+0x5a6>
 80048f8:	2308      	movs	r3, #8
 80048fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048fe:	e048      	b.n	8004992 <UART_SetConfig+0x5a6>
 8004900:	2310      	movs	r3, #16
 8004902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004906:	e044      	b.n	8004992 <UART_SetConfig+0x5a6>
 8004908:	2320      	movs	r3, #32
 800490a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800490e:	e040      	b.n	8004992 <UART_SetConfig+0x5a6>
 8004910:	2340      	movs	r3, #64	@ 0x40
 8004912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004916:	e03c      	b.n	8004992 <UART_SetConfig+0x5a6>
 8004918:	2380      	movs	r3, #128	@ 0x80
 800491a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800491e:	e038      	b.n	8004992 <UART_SetConfig+0x5a6>
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a5b      	ldr	r2, [pc, #364]	@ (8004a94 <UART_SetConfig+0x6a8>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d130      	bne.n	800498c <UART_SetConfig+0x5a0>
 800492a:	4b57      	ldr	r3, [pc, #348]	@ (8004a88 <UART_SetConfig+0x69c>)
 800492c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	2b05      	cmp	r3, #5
 8004934:	d826      	bhi.n	8004984 <UART_SetConfig+0x598>
 8004936:	a201      	add	r2, pc, #4	@ (adr r2, 800493c <UART_SetConfig+0x550>)
 8004938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493c:	08004955 	.word	0x08004955
 8004940:	0800495d 	.word	0x0800495d
 8004944:	08004965 	.word	0x08004965
 8004948:	0800496d 	.word	0x0800496d
 800494c:	08004975 	.word	0x08004975
 8004950:	0800497d 	.word	0x0800497d
 8004954:	2302      	movs	r3, #2
 8004956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800495a:	e01a      	b.n	8004992 <UART_SetConfig+0x5a6>
 800495c:	2304      	movs	r3, #4
 800495e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004962:	e016      	b.n	8004992 <UART_SetConfig+0x5a6>
 8004964:	2308      	movs	r3, #8
 8004966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800496a:	e012      	b.n	8004992 <UART_SetConfig+0x5a6>
 800496c:	2310      	movs	r3, #16
 800496e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004972:	e00e      	b.n	8004992 <UART_SetConfig+0x5a6>
 8004974:	2320      	movs	r3, #32
 8004976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800497a:	e00a      	b.n	8004992 <UART_SetConfig+0x5a6>
 800497c:	2340      	movs	r3, #64	@ 0x40
 800497e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004982:	e006      	b.n	8004992 <UART_SetConfig+0x5a6>
 8004984:	2380      	movs	r3, #128	@ 0x80
 8004986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800498a:	e002      	b.n	8004992 <UART_SetConfig+0x5a6>
 800498c:	2380      	movs	r3, #128	@ 0x80
 800498e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a3f      	ldr	r2, [pc, #252]	@ (8004a94 <UART_SetConfig+0x6a8>)
 8004998:	4293      	cmp	r3, r2
 800499a:	f040 80f8 	bne.w	8004b8e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800499e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	dc46      	bgt.n	8004a34 <UART_SetConfig+0x648>
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	f2c0 8082 	blt.w	8004ab0 <UART_SetConfig+0x6c4>
 80049ac:	3b02      	subs	r3, #2
 80049ae:	2b1e      	cmp	r3, #30
 80049b0:	d87e      	bhi.n	8004ab0 <UART_SetConfig+0x6c4>
 80049b2:	a201      	add	r2, pc, #4	@ (adr r2, 80049b8 <UART_SetConfig+0x5cc>)
 80049b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b8:	08004a3b 	.word	0x08004a3b
 80049bc:	08004ab1 	.word	0x08004ab1
 80049c0:	08004a43 	.word	0x08004a43
 80049c4:	08004ab1 	.word	0x08004ab1
 80049c8:	08004ab1 	.word	0x08004ab1
 80049cc:	08004ab1 	.word	0x08004ab1
 80049d0:	08004a53 	.word	0x08004a53
 80049d4:	08004ab1 	.word	0x08004ab1
 80049d8:	08004ab1 	.word	0x08004ab1
 80049dc:	08004ab1 	.word	0x08004ab1
 80049e0:	08004ab1 	.word	0x08004ab1
 80049e4:	08004ab1 	.word	0x08004ab1
 80049e8:	08004ab1 	.word	0x08004ab1
 80049ec:	08004ab1 	.word	0x08004ab1
 80049f0:	08004a63 	.word	0x08004a63
 80049f4:	08004ab1 	.word	0x08004ab1
 80049f8:	08004ab1 	.word	0x08004ab1
 80049fc:	08004ab1 	.word	0x08004ab1
 8004a00:	08004ab1 	.word	0x08004ab1
 8004a04:	08004ab1 	.word	0x08004ab1
 8004a08:	08004ab1 	.word	0x08004ab1
 8004a0c:	08004ab1 	.word	0x08004ab1
 8004a10:	08004ab1 	.word	0x08004ab1
 8004a14:	08004ab1 	.word	0x08004ab1
 8004a18:	08004ab1 	.word	0x08004ab1
 8004a1c:	08004ab1 	.word	0x08004ab1
 8004a20:	08004ab1 	.word	0x08004ab1
 8004a24:	08004ab1 	.word	0x08004ab1
 8004a28:	08004ab1 	.word	0x08004ab1
 8004a2c:	08004ab1 	.word	0x08004ab1
 8004a30:	08004aa3 	.word	0x08004aa3
 8004a34:	2b40      	cmp	r3, #64	@ 0x40
 8004a36:	d037      	beq.n	8004aa8 <UART_SetConfig+0x6bc>
 8004a38:	e03a      	b.n	8004ab0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004a3a:	f7fe ffd7 	bl	80039ec <HAL_RCCEx_GetD3PCLK1Freq>
 8004a3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004a40:	e03c      	b.n	8004abc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fe ffe6 	bl	8003a18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a50:	e034      	b.n	8004abc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a52:	f107 0318 	add.w	r3, r7, #24
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7ff f932 	bl	8003cc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a60:	e02c      	b.n	8004abc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a62:	4b09      	ldr	r3, [pc, #36]	@ (8004a88 <UART_SetConfig+0x69c>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0320 	and.w	r3, r3, #32
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d016      	beq.n	8004a9c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004a6e:	4b06      	ldr	r3, [pc, #24]	@ (8004a88 <UART_SetConfig+0x69c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	08db      	lsrs	r3, r3, #3
 8004a74:	f003 0303 	and.w	r3, r3, #3
 8004a78:	4a07      	ldr	r2, [pc, #28]	@ (8004a98 <UART_SetConfig+0x6ac>)
 8004a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a80:	e01c      	b.n	8004abc <UART_SetConfig+0x6d0>
 8004a82:	bf00      	nop
 8004a84:	40011400 	.word	0x40011400
 8004a88:	58024400 	.word	0x58024400
 8004a8c:	40007800 	.word	0x40007800
 8004a90:	40007c00 	.word	0x40007c00
 8004a94:	58000c00 	.word	0x58000c00
 8004a98:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004a9c:	4b9d      	ldr	r3, [pc, #628]	@ (8004d14 <UART_SetConfig+0x928>)
 8004a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004aa0:	e00c      	b.n	8004abc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004aa2:	4b9d      	ldr	r3, [pc, #628]	@ (8004d18 <UART_SetConfig+0x92c>)
 8004aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004aa6:	e009      	b.n	8004abc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aa8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004aae:	e005      	b.n	8004abc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004aba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004abc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 81de 	beq.w	8004e80 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac8:	4a94      	ldr	r2, [pc, #592]	@ (8004d1c <UART_SetConfig+0x930>)
 8004aca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ad2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ad6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	4613      	mov	r3, r2
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	4413      	add	r3, r2
 8004ae2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d305      	bcc.n	8004af4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004aee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d903      	bls.n	8004afc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004afa:	e1c1      	b.n	8004e80 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004afe:	2200      	movs	r2, #0
 8004b00:	60bb      	str	r3, [r7, #8]
 8004b02:	60fa      	str	r2, [r7, #12]
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b08:	4a84      	ldr	r2, [pc, #528]	@ (8004d1c <UART_SetConfig+0x930>)
 8004b0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	2200      	movs	r2, #0
 8004b12:	603b      	str	r3, [r7, #0]
 8004b14:	607a      	str	r2, [r7, #4]
 8004b16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b1e:	f7fb fc2f 	bl	8000380 <__aeabi_uldivmod>
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	4610      	mov	r0, r2
 8004b28:	4619      	mov	r1, r3
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	f04f 0300 	mov.w	r3, #0
 8004b32:	020b      	lsls	r3, r1, #8
 8004b34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b38:	0202      	lsls	r2, r0, #8
 8004b3a:	6979      	ldr	r1, [r7, #20]
 8004b3c:	6849      	ldr	r1, [r1, #4]
 8004b3e:	0849      	lsrs	r1, r1, #1
 8004b40:	2000      	movs	r0, #0
 8004b42:	460c      	mov	r4, r1
 8004b44:	4605      	mov	r5, r0
 8004b46:	eb12 0804 	adds.w	r8, r2, r4
 8004b4a:	eb43 0905 	adc.w	r9, r3, r5
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	469a      	mov	sl, r3
 8004b56:	4693      	mov	fp, r2
 8004b58:	4652      	mov	r2, sl
 8004b5a:	465b      	mov	r3, fp
 8004b5c:	4640      	mov	r0, r8
 8004b5e:	4649      	mov	r1, r9
 8004b60:	f7fb fc0e 	bl	8000380 <__aeabi_uldivmod>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	4613      	mov	r3, r2
 8004b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b72:	d308      	bcc.n	8004b86 <UART_SetConfig+0x79a>
 8004b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b7a:	d204      	bcs.n	8004b86 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004b82:	60da      	str	r2, [r3, #12]
 8004b84:	e17c      	b.n	8004e80 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004b8c:	e178      	b.n	8004e80 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b96:	f040 80c5 	bne.w	8004d24 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004b9a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004b9e:	2b20      	cmp	r3, #32
 8004ba0:	dc48      	bgt.n	8004c34 <UART_SetConfig+0x848>
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	db7b      	blt.n	8004c9e <UART_SetConfig+0x8b2>
 8004ba6:	2b20      	cmp	r3, #32
 8004ba8:	d879      	bhi.n	8004c9e <UART_SetConfig+0x8b2>
 8004baa:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb0 <UART_SetConfig+0x7c4>)
 8004bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb0:	08004c3b 	.word	0x08004c3b
 8004bb4:	08004c43 	.word	0x08004c43
 8004bb8:	08004c9f 	.word	0x08004c9f
 8004bbc:	08004c9f 	.word	0x08004c9f
 8004bc0:	08004c4b 	.word	0x08004c4b
 8004bc4:	08004c9f 	.word	0x08004c9f
 8004bc8:	08004c9f 	.word	0x08004c9f
 8004bcc:	08004c9f 	.word	0x08004c9f
 8004bd0:	08004c5b 	.word	0x08004c5b
 8004bd4:	08004c9f 	.word	0x08004c9f
 8004bd8:	08004c9f 	.word	0x08004c9f
 8004bdc:	08004c9f 	.word	0x08004c9f
 8004be0:	08004c9f 	.word	0x08004c9f
 8004be4:	08004c9f 	.word	0x08004c9f
 8004be8:	08004c9f 	.word	0x08004c9f
 8004bec:	08004c9f 	.word	0x08004c9f
 8004bf0:	08004c6b 	.word	0x08004c6b
 8004bf4:	08004c9f 	.word	0x08004c9f
 8004bf8:	08004c9f 	.word	0x08004c9f
 8004bfc:	08004c9f 	.word	0x08004c9f
 8004c00:	08004c9f 	.word	0x08004c9f
 8004c04:	08004c9f 	.word	0x08004c9f
 8004c08:	08004c9f 	.word	0x08004c9f
 8004c0c:	08004c9f 	.word	0x08004c9f
 8004c10:	08004c9f 	.word	0x08004c9f
 8004c14:	08004c9f 	.word	0x08004c9f
 8004c18:	08004c9f 	.word	0x08004c9f
 8004c1c:	08004c9f 	.word	0x08004c9f
 8004c20:	08004c9f 	.word	0x08004c9f
 8004c24:	08004c9f 	.word	0x08004c9f
 8004c28:	08004c9f 	.word	0x08004c9f
 8004c2c:	08004c9f 	.word	0x08004c9f
 8004c30:	08004c91 	.word	0x08004c91
 8004c34:	2b40      	cmp	r3, #64	@ 0x40
 8004c36:	d02e      	beq.n	8004c96 <UART_SetConfig+0x8aa>
 8004c38:	e031      	b.n	8004c9e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c3a:	f7fd fca1 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 8004c3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004c40:	e033      	b.n	8004caa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c42:	f7fd fcb3 	bl	80025ac <HAL_RCC_GetPCLK2Freq>
 8004c46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004c48:	e02f      	b.n	8004caa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fe fee2 	bl	8003a18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c58:	e027      	b.n	8004caa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c5a:	f107 0318 	add.w	r3, r7, #24
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7ff f82e 	bl	8003cc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c68:	e01f      	b.n	8004caa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c6a:	4b2d      	ldr	r3, [pc, #180]	@ (8004d20 <UART_SetConfig+0x934>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0320 	and.w	r3, r3, #32
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d009      	beq.n	8004c8a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004c76:	4b2a      	ldr	r3, [pc, #168]	@ (8004d20 <UART_SetConfig+0x934>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	08db      	lsrs	r3, r3, #3
 8004c7c:	f003 0303 	and.w	r3, r3, #3
 8004c80:	4a24      	ldr	r2, [pc, #144]	@ (8004d14 <UART_SetConfig+0x928>)
 8004c82:	fa22 f303 	lsr.w	r3, r2, r3
 8004c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c88:	e00f      	b.n	8004caa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004c8a:	4b22      	ldr	r3, [pc, #136]	@ (8004d14 <UART_SetConfig+0x928>)
 8004c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c8e:	e00c      	b.n	8004caa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004c90:	4b21      	ldr	r3, [pc, #132]	@ (8004d18 <UART_SetConfig+0x92c>)
 8004c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c94:	e009      	b.n	8004caa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c9c:	e005      	b.n	8004caa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004ca8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004caa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 80e7 	beq.w	8004e80 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb6:	4a19      	ldr	r2, [pc, #100]	@ (8004d1c <UART_SetConfig+0x930>)
 8004cb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cc4:	005a      	lsls	r2, r3, #1
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	085b      	lsrs	r3, r3, #1
 8004ccc:	441a      	add	r2, r3
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cda:	2b0f      	cmp	r3, #15
 8004cdc:	d916      	bls.n	8004d0c <UART_SetConfig+0x920>
 8004cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ce4:	d212      	bcs.n	8004d0c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	f023 030f 	bic.w	r3, r3, #15
 8004cee:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf2:	085b      	lsrs	r3, r3, #1
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004d08:	60da      	str	r2, [r3, #12]
 8004d0a:	e0b9      	b.n	8004e80 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004d12:	e0b5      	b.n	8004e80 <UART_SetConfig+0xa94>
 8004d14:	03d09000 	.word	0x03d09000
 8004d18:	003d0900 	.word	0x003d0900
 8004d1c:	080088d0 	.word	0x080088d0
 8004d20:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d24:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004d28:	2b20      	cmp	r3, #32
 8004d2a:	dc49      	bgt.n	8004dc0 <UART_SetConfig+0x9d4>
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	db7c      	blt.n	8004e2a <UART_SetConfig+0xa3e>
 8004d30:	2b20      	cmp	r3, #32
 8004d32:	d87a      	bhi.n	8004e2a <UART_SetConfig+0xa3e>
 8004d34:	a201      	add	r2, pc, #4	@ (adr r2, 8004d3c <UART_SetConfig+0x950>)
 8004d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3a:	bf00      	nop
 8004d3c:	08004dc7 	.word	0x08004dc7
 8004d40:	08004dcf 	.word	0x08004dcf
 8004d44:	08004e2b 	.word	0x08004e2b
 8004d48:	08004e2b 	.word	0x08004e2b
 8004d4c:	08004dd7 	.word	0x08004dd7
 8004d50:	08004e2b 	.word	0x08004e2b
 8004d54:	08004e2b 	.word	0x08004e2b
 8004d58:	08004e2b 	.word	0x08004e2b
 8004d5c:	08004de7 	.word	0x08004de7
 8004d60:	08004e2b 	.word	0x08004e2b
 8004d64:	08004e2b 	.word	0x08004e2b
 8004d68:	08004e2b 	.word	0x08004e2b
 8004d6c:	08004e2b 	.word	0x08004e2b
 8004d70:	08004e2b 	.word	0x08004e2b
 8004d74:	08004e2b 	.word	0x08004e2b
 8004d78:	08004e2b 	.word	0x08004e2b
 8004d7c:	08004df7 	.word	0x08004df7
 8004d80:	08004e2b 	.word	0x08004e2b
 8004d84:	08004e2b 	.word	0x08004e2b
 8004d88:	08004e2b 	.word	0x08004e2b
 8004d8c:	08004e2b 	.word	0x08004e2b
 8004d90:	08004e2b 	.word	0x08004e2b
 8004d94:	08004e2b 	.word	0x08004e2b
 8004d98:	08004e2b 	.word	0x08004e2b
 8004d9c:	08004e2b 	.word	0x08004e2b
 8004da0:	08004e2b 	.word	0x08004e2b
 8004da4:	08004e2b 	.word	0x08004e2b
 8004da8:	08004e2b 	.word	0x08004e2b
 8004dac:	08004e2b 	.word	0x08004e2b
 8004db0:	08004e2b 	.word	0x08004e2b
 8004db4:	08004e2b 	.word	0x08004e2b
 8004db8:	08004e2b 	.word	0x08004e2b
 8004dbc:	08004e1d 	.word	0x08004e1d
 8004dc0:	2b40      	cmp	r3, #64	@ 0x40
 8004dc2:	d02e      	beq.n	8004e22 <UART_SetConfig+0xa36>
 8004dc4:	e031      	b.n	8004e2a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dc6:	f7fd fbdb 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 8004dca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004dcc:	e033      	b.n	8004e36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dce:	f7fd fbed 	bl	80025ac <HAL_RCC_GetPCLK2Freq>
 8004dd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004dd4:	e02f      	b.n	8004e36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fe fe1c 	bl	8003a18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004de4:	e027      	b.n	8004e36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004de6:	f107 0318 	add.w	r3, r7, #24
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fe ff68 	bl	8003cc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004df4:	e01f      	b.n	8004e36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004df6:	4b2d      	ldr	r3, [pc, #180]	@ (8004eac <UART_SetConfig+0xac0>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0320 	and.w	r3, r3, #32
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d009      	beq.n	8004e16 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004e02:	4b2a      	ldr	r3, [pc, #168]	@ (8004eac <UART_SetConfig+0xac0>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	08db      	lsrs	r3, r3, #3
 8004e08:	f003 0303 	and.w	r3, r3, #3
 8004e0c:	4a28      	ldr	r2, [pc, #160]	@ (8004eb0 <UART_SetConfig+0xac4>)
 8004e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e14:	e00f      	b.n	8004e36 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004e16:	4b26      	ldr	r3, [pc, #152]	@ (8004eb0 <UART_SetConfig+0xac4>)
 8004e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e1a:	e00c      	b.n	8004e36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004e1c:	4b25      	ldr	r3, [pc, #148]	@ (8004eb4 <UART_SetConfig+0xac8>)
 8004e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e20:	e009      	b.n	8004e36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e28:	e005      	b.n	8004e36 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004e34:	bf00      	nop
    }

    if (pclk != 0U)
 8004e36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d021      	beq.n	8004e80 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e40:	4a1d      	ldr	r2, [pc, #116]	@ (8004eb8 <UART_SetConfig+0xacc>)
 8004e42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e46:	461a      	mov	r2, r3
 8004e48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e4a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	085b      	lsrs	r3, r3, #1
 8004e54:	441a      	add	r2, r3
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e62:	2b0f      	cmp	r3, #15
 8004e64:	d909      	bls.n	8004e7a <UART_SetConfig+0xa8e>
 8004e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e6c:	d205      	bcs.n	8004e7a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	60da      	str	r2, [r3, #12]
 8004e78:	e002      	b.n	8004e80 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	2200      	movs	r2, #0
 8004e94:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004e9c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3748      	adds	r7, #72	@ 0x48
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eaa:	bf00      	nop
 8004eac:	58024400 	.word	0x58024400
 8004eb0:	03d09000 	.word	0x03d09000
 8004eb4:	003d0900 	.word	0x003d0900
 8004eb8:	080088d0 	.word	0x080088d0

08004ebc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00a      	beq.n	8004ee6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00a      	beq.n	8004f08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00a      	beq.n	8004f2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2e:	f003 0304 	and.w	r3, r3, #4
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f50:	f003 0310 	and.w	r3, r3, #16
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00a      	beq.n	8004f6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f72:	f003 0320 	and.w	r3, r3, #32
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d01a      	beq.n	8004fd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fba:	d10a      	bne.n	8004fd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	605a      	str	r2, [r3, #4]
  }
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b098      	sub	sp, #96	@ 0x60
 8005004:	af02      	add	r7, sp, #8
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005010:	f7fb ff60 	bl	8000ed4 <HAL_GetTick>
 8005014:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b08      	cmp	r3, #8
 8005022:	d12f      	bne.n	8005084 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005024:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800502c:	2200      	movs	r2, #0
 800502e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f88e 	bl	8005154 <UART_WaitOnFlagUntilTimeout>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d022      	beq.n	8005084 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005046:	e853 3f00 	ldrex	r3, [r3]
 800504a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800504c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800504e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005052:	653b      	str	r3, [r7, #80]	@ 0x50
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	461a      	mov	r2, r3
 800505a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800505c:	647b      	str	r3, [r7, #68]	@ 0x44
 800505e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005060:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005062:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005064:	e841 2300 	strex	r3, r2, [r1]
 8005068:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800506a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1e6      	bne.n	800503e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2220      	movs	r2, #32
 8005074:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e063      	b.n	800514c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0304 	and.w	r3, r3, #4
 800508e:	2b04      	cmp	r3, #4
 8005090:	d149      	bne.n	8005126 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005092:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800509a:	2200      	movs	r2, #0
 800509c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f857 	bl	8005154 <UART_WaitOnFlagUntilTimeout>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d03c      	beq.n	8005126 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b4:	e853 3f00 	ldrex	r3, [r3]
 80050b8:	623b      	str	r3, [r7, #32]
   return(result);
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	461a      	mov	r2, r3
 80050c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80050cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050d2:	e841 2300 	strex	r3, r2, [r1]
 80050d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1e6      	bne.n	80050ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	3308      	adds	r3, #8
 80050e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	e853 3f00 	ldrex	r3, [r3]
 80050ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f023 0301 	bic.w	r3, r3, #1
 80050f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	3308      	adds	r3, #8
 80050fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050fe:	61fa      	str	r2, [r7, #28]
 8005100:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005102:	69b9      	ldr	r1, [r7, #24]
 8005104:	69fa      	ldr	r2, [r7, #28]
 8005106:	e841 2300 	strex	r3, r2, [r1]
 800510a:	617b      	str	r3, [r7, #20]
   return(result);
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1e5      	bne.n	80050de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2220      	movs	r2, #32
 8005116:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e012      	b.n	800514c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2220      	movs	r2, #32
 800512a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2220      	movs	r2, #32
 8005132:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3758      	adds	r7, #88	@ 0x58
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	603b      	str	r3, [r7, #0]
 8005160:	4613      	mov	r3, r2
 8005162:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005164:	e04f      	b.n	8005206 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516c:	d04b      	beq.n	8005206 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800516e:	f7fb feb1 	bl	8000ed4 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	429a      	cmp	r2, r3
 800517c:	d302      	bcc.n	8005184 <UART_WaitOnFlagUntilTimeout+0x30>
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e04e      	b.n	8005226 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0304 	and.w	r3, r3, #4
 8005192:	2b00      	cmp	r3, #0
 8005194:	d037      	beq.n	8005206 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	2b80      	cmp	r3, #128	@ 0x80
 800519a:	d034      	beq.n	8005206 <UART_WaitOnFlagUntilTimeout+0xb2>
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	2b40      	cmp	r3, #64	@ 0x40
 80051a0:	d031      	beq.n	8005206 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	f003 0308 	and.w	r3, r3, #8
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d110      	bne.n	80051d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2208      	movs	r2, #8
 80051b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f000 f839 	bl	8005230 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2208      	movs	r2, #8
 80051c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e029      	b.n	8005226 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	69db      	ldr	r3, [r3, #28]
 80051d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051e0:	d111      	bne.n	8005206 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80051ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 f81f 	bl	8005230 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2220      	movs	r2, #32
 80051f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e00f      	b.n	8005226 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	69da      	ldr	r2, [r3, #28]
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	4013      	ands	r3, r2
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	429a      	cmp	r2, r3
 8005214:	bf0c      	ite	eq
 8005216:	2301      	moveq	r3, #1
 8005218:	2300      	movne	r3, #0
 800521a:	b2db      	uxtb	r3, r3
 800521c:	461a      	mov	r2, r3
 800521e:	79fb      	ldrb	r3, [r7, #7]
 8005220:	429a      	cmp	r2, r3
 8005222:	d0a0      	beq.n	8005166 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005230:	b480      	push	{r7}
 8005232:	b095      	sub	sp, #84	@ 0x54
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005240:	e853 3f00 	ldrex	r3, [r3]
 8005244:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005248:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800524c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	461a      	mov	r2, r3
 8005254:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005256:	643b      	str	r3, [r7, #64]	@ 0x40
 8005258:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800525c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800525e:	e841 2300 	strex	r3, r2, [r1]
 8005262:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1e6      	bne.n	8005238 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	3308      	adds	r3, #8
 8005270:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005272:	6a3b      	ldr	r3, [r7, #32]
 8005274:	e853 3f00 	ldrex	r3, [r3]
 8005278:	61fb      	str	r3, [r7, #28]
   return(result);
 800527a:	69fa      	ldr	r2, [r7, #28]
 800527c:	4b1e      	ldr	r3, [pc, #120]	@ (80052f8 <UART_EndRxTransfer+0xc8>)
 800527e:	4013      	ands	r3, r2
 8005280:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3308      	adds	r3, #8
 8005288:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800528a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800528c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005290:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005292:	e841 2300 	strex	r3, r2, [r1]
 8005296:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1e5      	bne.n	800526a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d118      	bne.n	80052d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	e853 3f00 	ldrex	r3, [r3]
 80052b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f023 0310 	bic.w	r3, r3, #16
 80052ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	461a      	mov	r2, r3
 80052c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052c4:	61bb      	str	r3, [r7, #24]
 80052c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c8:	6979      	ldr	r1, [r7, #20]
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	e841 2300 	strex	r3, r2, [r1]
 80052d0:	613b      	str	r3, [r7, #16]
   return(result);
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1e6      	bne.n	80052a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2220      	movs	r2, #32
 80052dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80052ec:	bf00      	nop
 80052ee:	3754      	adds	r7, #84	@ 0x54
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	effffffe 	.word	0xeffffffe

080052fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800530a:	2b01      	cmp	r3, #1
 800530c:	d101      	bne.n	8005312 <HAL_UARTEx_DisableFifoMode+0x16>
 800530e:	2302      	movs	r3, #2
 8005310:	e027      	b.n	8005362 <HAL_UARTEx_DisableFifoMode+0x66>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2224      	movs	r2, #36	@ 0x24
 800531e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 0201 	bic.w	r2, r2, #1
 8005338:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005340:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2220      	movs	r2, #32
 8005354:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b084      	sub	sp, #16
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800537e:	2b01      	cmp	r3, #1
 8005380:	d101      	bne.n	8005386 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005382:	2302      	movs	r3, #2
 8005384:	e02d      	b.n	80053e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2224      	movs	r2, #36	@ 0x24
 8005392:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 0201 	bic.w	r2, r2, #1
 80053ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f850 	bl	8005468 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b084      	sub	sp, #16
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
 80053f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d101      	bne.n	8005402 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80053fe:	2302      	movs	r3, #2
 8005400:	e02d      	b.n	800545e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2224      	movs	r2, #36	@ 0x24
 800540e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0201 	bic.w	r2, r2, #1
 8005428:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f812 	bl	8005468 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2220      	movs	r2, #32
 8005450:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
	...

08005468 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005474:	2b00      	cmp	r3, #0
 8005476:	d108      	bne.n	800548a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005488:	e031      	b.n	80054ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800548a:	2310      	movs	r3, #16
 800548c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800548e:	2310      	movs	r3, #16
 8005490:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	0e5b      	lsrs	r3, r3, #25
 800549a:	b2db      	uxtb	r3, r3
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	0f5b      	lsrs	r3, r3, #29
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054b2:	7bbb      	ldrb	r3, [r7, #14]
 80054b4:	7b3a      	ldrb	r2, [r7, #12]
 80054b6:	4911      	ldr	r1, [pc, #68]	@ (80054fc <UARTEx_SetNbDataToProcess+0x94>)
 80054b8:	5c8a      	ldrb	r2, [r1, r2]
 80054ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80054be:	7b3a      	ldrb	r2, [r7, #12]
 80054c0:	490f      	ldr	r1, [pc, #60]	@ (8005500 <UARTEx_SetNbDataToProcess+0x98>)
 80054c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054d0:	7bfb      	ldrb	r3, [r7, #15]
 80054d2:	7b7a      	ldrb	r2, [r7, #13]
 80054d4:	4909      	ldr	r1, [pc, #36]	@ (80054fc <UARTEx_SetNbDataToProcess+0x94>)
 80054d6:	5c8a      	ldrb	r2, [r1, r2]
 80054d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80054dc:	7b7a      	ldrb	r2, [r7, #13]
 80054de:	4908      	ldr	r1, [pc, #32]	@ (8005500 <UARTEx_SetNbDataToProcess+0x98>)
 80054e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80054ee:	bf00      	nop
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	080088e8 	.word	0x080088e8
 8005500:	080088f0 	.word	0x080088f0

08005504 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d009      	beq.n	8005528 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8005514:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8005516:	461a      	mov	r2, r3
        err.type, err.code);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800551e:	6839      	ldr	r1, [r7, #0]
 8005520:	4807      	ldr	r0, [pc, #28]	@ (8005540 <ai_log_err+0x3c>)
 8005522:	f002 f923 	bl	800776c <iprintf>
 8005526:	e009      	b.n	800553c <ai_log_err+0x38>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8005528:	793b      	ldrb	r3, [r7, #4]
 800552a:	4619      	mov	r1, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8005532:	461a      	mov	r2, r3
 8005534:	4803      	ldr	r0, [pc, #12]	@ (8005544 <ai_log_err+0x40>)
 8005536:	f002 f919 	bl	800776c <iprintf>

  do {} while (1);
 800553a:	bf00      	nop
 800553c:	bf00      	nop
 800553e:	e7fd      	b.n	800553c <ai_log_err+0x38>
 8005540:	0800878c 	.word	0x0800878c
 8005544:	080087c0 	.word	0x080087c0

08005548 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8005550:	2200      	movs	r2, #0
 8005552:	6879      	ldr	r1, [r7, #4]
 8005554:	4828      	ldr	r0, [pc, #160]	@ (80055f8 <ai_boostrap+0xb0>)
 8005556:	f000 fa59 	bl	8005a0c <ai_network_create_and_init>
 800555a:	4603      	mov	r3, r0
 800555c:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 800555e:	7b3b      	ldrb	r3, [r7, #12]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d006      	beq.n	8005572 <ai_boostrap+0x2a>
    ai_log_err(err, "ai_network_create_and_init");
 8005564:	4925      	ldr	r1, [pc, #148]	@ (80055fc <ai_boostrap+0xb4>)
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f7ff ffcc 	bl	8005504 <ai_log_err>
    return -1;
 800556c:	f04f 33ff 	mov.w	r3, #4294967295
 8005570:	e03e      	b.n	80055f0 <ai_boostrap+0xa8>
  }

  ai_input = ai_network_inputs_get(network, NULL);
 8005572:	4b21      	ldr	r3, [pc, #132]	@ (80055f8 <ai_boostrap+0xb0>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2100      	movs	r1, #0
 8005578:	4618      	mov	r0, r3
 800557a:	f000 fac5 	bl	8005b08 <ai_network_inputs_get>
 800557e:	4603      	mov	r3, r0
 8005580:	4a1f      	ldr	r2, [pc, #124]	@ (8005600 <ai_boostrap+0xb8>)
 8005582:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8005584:	4b1c      	ldr	r3, [pc, #112]	@ (80055f8 <ai_boostrap+0xb0>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2100      	movs	r1, #0
 800558a:	4618      	mov	r0, r3
 800558c:	f000 fad6 	bl	8005b3c <ai_network_outputs_get>
 8005590:	4603      	mov	r3, r0
 8005592:	4a1c      	ldr	r2, [pc, #112]	@ (8005604 <ai_boostrap+0xbc>)
 8005594:	6013      	str	r3, [r2, #0]

#if defined(AI_NETWORK_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 8005596:	2300      	movs	r3, #0
 8005598:	617b      	str	r3, [r7, #20]
 800559a:	e00f      	b.n	80055bc <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 800559c:	4b18      	ldr	r3, [pc, #96]	@ (8005600 <ai_boostrap+0xb8>)
 800559e:	6819      	ldr	r1, [r3, #0]
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	4613      	mov	r3, r2
 80055a4:	00db      	lsls	r3, r3, #3
 80055a6:	1a9b      	subs	r3, r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	440b      	add	r3, r1
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	4916      	ldr	r1, [pc, #88]	@ (8005608 <ai_boostrap+0xc0>)
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	3301      	adds	r3, #1
 80055ba:	617b      	str	r3, [r7, #20]
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	ddec      	ble.n	800559c <ai_boostrap+0x54>

#if defined(AI_NETWORK_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 80055c2:	2300      	movs	r3, #0
 80055c4:	613b      	str	r3, [r7, #16]
 80055c6:	e00f      	b.n	80055e8 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 80055c8:	4b0e      	ldr	r3, [pc, #56]	@ (8005604 <ai_boostrap+0xbc>)
 80055ca:	6819      	ldr	r1, [r3, #0]
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	4613      	mov	r3, r2
 80055d0:	00db      	lsls	r3, r3, #3
 80055d2:	1a9b      	subs	r3, r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	440b      	add	r3, r1
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	490c      	ldr	r1, [pc, #48]	@ (800560c <ai_boostrap+0xc4>)
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	3301      	adds	r3, #1
 80055e6:	613b      	str	r3, [r7, #16]
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	ddec      	ble.n	80055c8 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3718      	adds	r7, #24
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	24000860 	.word	0x24000860
 80055fc:	080087f0 	.word	0x080087f0
 8005600:	24000864 	.word	0x24000864
 8005604:	24000868 	.word	0x24000868
 8005608:	240007c0 	.word	0x240007c0
 800560c:	240007c4 	.word	0x240007c4

08005610 <ai_run>:

static int ai_run(float *pIn, float *pOut)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  ai_i32 batch;


  /* Update IO handlers with the data payload */
   ai_input[0].data = AI_HANDLE_PTR(pIn);
 800561a:	4b13      	ldr	r3, [pc, #76]	@ (8005668 <ai_run+0x58>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	605a      	str	r2, [r3, #4]
   ai_output[0].data = AI_HANDLE_PTR(pOut);
 8005622:	4b12      	ldr	r3, [pc, #72]	@ (800566c <ai_run+0x5c>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	605a      	str	r2, [r3, #4]

  batch = ai_network_run(network, ai_input, ai_output);
 800562a:	4b11      	ldr	r3, [pc, #68]	@ (8005670 <ai_run+0x60>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a0e      	ldr	r2, [pc, #56]	@ (8005668 <ai_run+0x58>)
 8005630:	6811      	ldr	r1, [r2, #0]
 8005632:	4a0e      	ldr	r2, [pc, #56]	@ (800566c <ai_run+0x5c>)
 8005634:	6812      	ldr	r2, [r2, #0]
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fad6 	bl	8005be8 <ai_network_run>
 800563c:	60f8      	str	r0, [r7, #12]
  if (batch != 1) {
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d00c      	beq.n	800565e <ai_run+0x4e>
    ai_log_err(ai_network_get_error(network),
 8005644:	4b0a      	ldr	r3, [pc, #40]	@ (8005670 <ai_run+0x60>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4618      	mov	r0, r3
 800564a:	f000 f9bd 	bl	80059c8 <ai_network_get_error>
 800564e:	4603      	mov	r3, r0
 8005650:	4908      	ldr	r1, [pc, #32]	@ (8005674 <ai_run+0x64>)
 8005652:	4618      	mov	r0, r3
 8005654:	f7ff ff56 	bl	8005504 <ai_log_err>
        "ai_network_run");
    return -1;
 8005658:	f04f 33ff 	mov.w	r3, #4294967295
 800565c:	e000      	b.n	8005660 <ai_run+0x50>
  }

  return 0;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	24000864 	.word	0x24000864
 800566c:	24000868 	.word	0x24000868
 8005670:	24000860 	.word	0x24000860
 8005674:	0800880c 	.word	0x0800880c

08005678 <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_i8* data[])
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
  return 0;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
	...

08005690 <post_process>:

int post_process(float* data)
{
 8005690:	b5b0      	push	{r4, r5, r7, lr}
 8005692:	b094      	sub	sp, #80	@ 0x50
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
	char hello[30] = "Output Data is: ";
 8005698:	4b22      	ldr	r3, [pc, #136]	@ (8005724 <post_process+0x94>)
 800569a:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800569e:	461d      	mov	r5, r3
 80056a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056a4:	682b      	ldr	r3, [r5, #0]
 80056a6:	7023      	strb	r3, [r4, #0]
 80056a8:	f107 0339 	add.w	r3, r7, #57	@ 0x39
 80056ac:	2200      	movs	r2, #0
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	605a      	str	r2, [r3, #4]
 80056b2:	609a      	str	r2, [r3, #8]
 80056b4:	731a      	strb	r2, [r3, #12]
	char hello_2[30];
	float a = 1.99;
 80056b6:	4b1c      	ldr	r3, [pc, #112]	@ (8005728 <post_process+0x98>)
 80056b8:	64bb      	str	r3, [r7, #72]	@ 0x48
	sprintf(hello_2,"%f",a);
 80056ba:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80056be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80056c2:	f107 0008 	add.w	r0, r7, #8
 80056c6:	ec53 2b17 	vmov	r2, r3, d7
 80056ca:	4918      	ldr	r1, [pc, #96]	@ (800572c <post_process+0x9c>)
 80056cc:	f002 f8be 	bl	800784c <siprintf>
  /* process the predictions */
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++ )
 80056d0:	2300      	movs	r3, #0
 80056d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056d4:	e012      	b.n	80056fc <post_process+0x6c>
  {
	  HAL_UART_Transmit(&huart3,(uint8_t*)hello,sizeof(hello),1000);
 80056d6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80056da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80056de:	221e      	movs	r2, #30
 80056e0:	4813      	ldr	r0, [pc, #76]	@ (8005730 <post_process+0xa0>)
 80056e2:	f7fe fdf5 	bl	80042d0 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3,(uint8_t*)hello_2,sizeof(hello_2),1000);
 80056e6:	f107 0108 	add.w	r1, r7, #8
 80056ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80056ee:	221e      	movs	r2, #30
 80056f0:	480f      	ldr	r0, [pc, #60]	@ (8005730 <post_process+0xa0>)
 80056f2:	f7fe fded 	bl	80042d0 <HAL_UART_Transmit>
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++ )
 80056f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056f8:	3301      	adds	r3, #1
 80056fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056fe:	2b00      	cmp	r3, #0
 8005700:	dde9      	ble.n	80056d6 <post_process+0x46>
  }

	sprintf(hello,"%f",a);
 8005702:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8005706:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800570a:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800570e:	ec53 2b17 	vmov	r2, r3, d7
 8005712:	4906      	ldr	r1, [pc, #24]	@ (800572c <post_process+0x9c>)
 8005714:	f002 f89a 	bl	800784c <siprintf>
  return 0;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3750      	adds	r7, #80	@ 0x50
 800571e:	46bd      	mov	sp, r7
 8005720:	bdb0      	pop	{r4, r5, r7, pc}
 8005722:	bf00      	nop
 8005724:	08008820 	.word	0x08008820
 8005728:	3ffeb852 	.word	0x3ffeb852
 800572c:	0800881c 	.word	0x0800881c
 8005730:	24000720 	.word	0x24000720

08005734 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8005738:	4803      	ldr	r0, [pc, #12]	@ (8005748 <MX_X_CUBE_AI_Init+0x14>)
 800573a:	f002 f87f 	bl	800783c <puts>

  ai_boostrap(data_activations0);
 800573e:	4803      	ldr	r0, [pc, #12]	@ (800574c <MX_X_CUBE_AI_Init+0x18>)
 8005740:	f7ff ff02 	bl	8005548 <ai_boostrap>
    /* USER CODE END 5 */
}
 8005744:	bf00      	nop
 8005746:	bd80      	pop	{r7, pc}
 8005748:	08008840 	.word	0x08008840
 800574c:	24000010 	.word	0x24000010

08005750 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 8005756:	f04f 33ff 	mov.w	r3, #4294967295
 800575a:	607b      	str	r3, [r7, #4]
  aiInData[0] = 6.533f;
 800575c:	4b1c      	ldr	r3, [pc, #112]	@ (80057d0 <MX_X_CUBE_AI_Process+0x80>)
 800575e:	4a1d      	ldr	r2, [pc, #116]	@ (80057d4 <MX_X_CUBE_AI_Process+0x84>)
 8005760:	601a      	str	r2, [r3, #0]
  aiOutData[0] = 3.0f;
 8005762:	4b1d      	ldr	r3, [pc, #116]	@ (80057d8 <MX_X_CUBE_AI_Process+0x88>)
 8005764:	4a1d      	ldr	r2, [pc, #116]	@ (80057dc <MX_X_CUBE_AI_Process+0x8c>)
 8005766:	601a      	str	r2, [r3, #0]

  printf("TEMPLATE - run - main loop\r\n");
 8005768:	481d      	ldr	r0, [pc, #116]	@ (80057e0 <MX_X_CUBE_AI_Process+0x90>)
 800576a:	f002 f867 	bl	800783c <puts>

  if (network) {
 800576e:	4b1d      	ldr	r3, [pc, #116]	@ (80057e4 <MX_X_CUBE_AI_Process+0x94>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d019      	beq.n	80057aa <MX_X_CUBE_AI_Process+0x5a>

    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 8005776:	481c      	ldr	r0, [pc, #112]	@ (80057e8 <MX_X_CUBE_AI_Process+0x98>)
 8005778:	f7ff ff7e 	bl	8005678 <acquire_and_process_data>
 800577c:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d104      	bne.n	800578e <MX_X_CUBE_AI_Process+0x3e>
        res = ai_run(aiInData,aiOutData);
 8005784:	4914      	ldr	r1, [pc, #80]	@ (80057d8 <MX_X_CUBE_AI_Process+0x88>)
 8005786:	4812      	ldr	r0, [pc, #72]	@ (80057d0 <MX_X_CUBE_AI_Process+0x80>)
 8005788:	f7ff ff42 	bl	8005610 <ai_run>
 800578c:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d103      	bne.n	800579c <MX_X_CUBE_AI_Process+0x4c>
        res = post_process(aiOutData);
 8005794:	4810      	ldr	r0, [pc, #64]	@ (80057d8 <MX_X_CUBE_AI_Process+0x88>)
 8005796:	f7ff ff7b 	bl	8005690 <post_process>
 800579a:	6078      	str	r0, [r7, #4]
      HAL_Delay(500);
 800579c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80057a0:	f7fb fba4 	bl	8000eec <HAL_Delay>
    } while (res==0);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d0e5      	beq.n	8005776 <MX_X_CUBE_AI_Process+0x26>
  }

  if (res) {
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00a      	beq.n	80057c6 <MX_X_CUBE_AI_Process+0x76>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 80057b0:	2311      	movs	r3, #17
 80057b2:	703b      	strb	r3, [r7, #0]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	2210      	movs	r2, #16
 80057b8:	f362 231f 	bfi	r3, r2, #8, #24
 80057bc:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 80057be:	490b      	ldr	r1, [pc, #44]	@ (80057ec <MX_X_CUBE_AI_Process+0x9c>)
 80057c0:	6838      	ldr	r0, [r7, #0]
 80057c2:	f7ff fe9f 	bl	8005504 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 80057c6:	bf00      	nop
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	240007b8 	.word	0x240007b8
 80057d4:	40d10e56 	.word	0x40d10e56
 80057d8:	240007bc 	.word	0x240007bc
 80057dc:	40400000 	.word	0x40400000
 80057e0:	08008860 	.word	0x08008860
 80057e4:	24000860 	.word	0x24000860
 80057e8:	240007c0 	.word	0x240007c0
 80057ec:	0800887c 	.word	0x0800887c

080057f0 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	2101      	movs	r1, #1
 80057fe:	4825      	ldr	r0, [pc, #148]	@ (8005894 <network_configure_activations+0xa4>)
 8005800:	f000 fad0 	bl	8005da4 <ai_platform_get_activations_map>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d039      	beq.n	800587e <network_configure_activations+0x8e>
    /* Updating activations (byte) offsets */
    
    serving_default_dense_input0_output_array.data = AI_PTR(g_network_activations_map[0] + 60);
 800580a:	4b22      	ldr	r3, [pc, #136]	@ (8005894 <network_configure_activations+0xa4>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	333c      	adds	r3, #60	@ 0x3c
 8005810:	4a21      	ldr	r2, [pc, #132]	@ (8005898 <network_configure_activations+0xa8>)
 8005812:	6093      	str	r3, [r2, #8]
    serving_default_dense_input0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 60);
 8005814:	4b1f      	ldr	r3, [pc, #124]	@ (8005894 <network_configure_activations+0xa4>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	333c      	adds	r3, #60	@ 0x3c
 800581a:	4a1f      	ldr	r2, [pc, #124]	@ (8005898 <network_configure_activations+0xa8>)
 800581c:	60d3      	str	r3, [r2, #12]
    gemm_0_output_array.data = AI_PTR(g_network_activations_map[0] + 64);
 800581e:	4b1d      	ldr	r3, [pc, #116]	@ (8005894 <network_configure_activations+0xa4>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	3340      	adds	r3, #64	@ 0x40
 8005824:	4a1d      	ldr	r2, [pc, #116]	@ (800589c <network_configure_activations+0xac>)
 8005826:	6093      	str	r3, [r2, #8]
    gemm_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 64);
 8005828:	4b1a      	ldr	r3, [pc, #104]	@ (8005894 <network_configure_activations+0xa4>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3340      	adds	r3, #64	@ 0x40
 800582e:	4a1b      	ldr	r2, [pc, #108]	@ (800589c <network_configure_activations+0xac>)
 8005830:	60d3      	str	r3, [r2, #12]
    nl_0_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 64);
 8005832:	4b18      	ldr	r3, [pc, #96]	@ (8005894 <network_configure_activations+0xa4>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	3340      	adds	r3, #64	@ 0x40
 8005838:	4a19      	ldr	r2, [pc, #100]	@ (80058a0 <network_configure_activations+0xb0>)
 800583a:	6093      	str	r3, [r2, #8]
    nl_0_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 64);
 800583c:	4b15      	ldr	r3, [pc, #84]	@ (8005894 <network_configure_activations+0xa4>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3340      	adds	r3, #64	@ 0x40
 8005842:	4a17      	ldr	r2, [pc, #92]	@ (80058a0 <network_configure_activations+0xb0>)
 8005844:	60d3      	str	r3, [r2, #12]
    gemm_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005846:	4b13      	ldr	r3, [pc, #76]	@ (8005894 <network_configure_activations+0xa4>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a16      	ldr	r2, [pc, #88]	@ (80058a4 <network_configure_activations+0xb4>)
 800584c:	6093      	str	r3, [r2, #8]
    gemm_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800584e:	4b11      	ldr	r3, [pc, #68]	@ (8005894 <network_configure_activations+0xa4>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a14      	ldr	r2, [pc, #80]	@ (80058a4 <network_configure_activations+0xb4>)
 8005854:	60d3      	str	r3, [r2, #12]
    nl_1_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 64);
 8005856:	4b0f      	ldr	r3, [pc, #60]	@ (8005894 <network_configure_activations+0xa4>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	3340      	adds	r3, #64	@ 0x40
 800585c:	4a12      	ldr	r2, [pc, #72]	@ (80058a8 <network_configure_activations+0xb8>)
 800585e:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 64);
 8005860:	4b0c      	ldr	r3, [pc, #48]	@ (8005894 <network_configure_activations+0xa4>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3340      	adds	r3, #64	@ 0x40
 8005866:	4a10      	ldr	r2, [pc, #64]	@ (80058a8 <network_configure_activations+0xb8>)
 8005868:	60d3      	str	r3, [r2, #12]
    gemm_2_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800586a:	4b0a      	ldr	r3, [pc, #40]	@ (8005894 <network_configure_activations+0xa4>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a0f      	ldr	r2, [pc, #60]	@ (80058ac <network_configure_activations+0xbc>)
 8005870:	6093      	str	r3, [r2, #8]
    gemm_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005872:	4b08      	ldr	r3, [pc, #32]	@ (8005894 <network_configure_activations+0xa4>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a0d      	ldr	r2, [pc, #52]	@ (80058ac <network_configure_activations+0xbc>)
 8005878:	60d3      	str	r3, [r2, #12]
    return true;
 800587a:	2301      	movs	r3, #1
 800587c:	e005      	b.n	800588a <network_configure_activations+0x9a>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800587e:	2213      	movs	r2, #19
 8005880:	2130      	movs	r1, #48	@ 0x30
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 fb0c 	bl	8005ea0 <ai_platform_network_set_error>
  return false;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	2400086c 	.word	0x2400086c
 8005898:	24000014 	.word	0x24000014
 800589c:	24000024 	.word	0x24000024
 80058a0:	24000034 	.word	0x24000034
 80058a4:	24000044 	.word	0x24000044
 80058a8:	24000054 	.word	0x24000054
 80058ac:	24000064 	.word	0x24000064

080058b0 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	2101      	movs	r1, #1
 80058be:	483b      	ldr	r0, [pc, #236]	@ (80059ac <network_configure_weights+0xfc>)
 80058c0:	f000 fa18 	bl	8005cf4 <ai_platform_get_weights_map>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d065      	beq.n	8005996 <network_configure_weights+0xe6>
    /* Updating weights (byte) offsets */
    
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80058ca:	4b39      	ldr	r3, [pc, #228]	@ (80059b0 <network_configure_weights+0x100>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80058d2:	4a37      	ldr	r2, [pc, #220]	@ (80059b0 <network_configure_weights+0x100>)
 80058d4:	6013      	str	r3, [r2, #0]
    gemm_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80058d6:	4b35      	ldr	r3, [pc, #212]	@ (80059ac <network_configure_weights+0xfc>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a35      	ldr	r2, [pc, #212]	@ (80059b0 <network_configure_weights+0x100>)
 80058dc:	6093      	str	r3, [r2, #8]
    gemm_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 80058de:	4b33      	ldr	r3, [pc, #204]	@ (80059ac <network_configure_weights+0xfc>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a33      	ldr	r2, [pc, #204]	@ (80059b0 <network_configure_weights+0x100>)
 80058e4:	60d3      	str	r3, [r2, #12]
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80058e6:	4b33      	ldr	r3, [pc, #204]	@ (80059b4 <network_configure_weights+0x104>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80058ee:	4a31      	ldr	r2, [pc, #196]	@ (80059b4 <network_configure_weights+0x104>)
 80058f0:	6013      	str	r3, [r2, #0]
    gemm_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 64);
 80058f2:	4b2e      	ldr	r3, [pc, #184]	@ (80059ac <network_configure_weights+0xfc>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	3340      	adds	r3, #64	@ 0x40
 80058f8:	4a2e      	ldr	r2, [pc, #184]	@ (80059b4 <network_configure_weights+0x104>)
 80058fa:	6093      	str	r3, [r2, #8]
    gemm_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 64);
 80058fc:	4b2b      	ldr	r3, [pc, #172]	@ (80059ac <network_configure_weights+0xfc>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	3340      	adds	r3, #64	@ 0x40
 8005902:	4a2c      	ldr	r2, [pc, #176]	@ (80059b4 <network_configure_weights+0x104>)
 8005904:	60d3      	str	r3, [r2, #12]
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005906:	4b2c      	ldr	r3, [pc, #176]	@ (80059b8 <network_configure_weights+0x108>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800590e:	4a2a      	ldr	r2, [pc, #168]	@ (80059b8 <network_configure_weights+0x108>)
 8005910:	6013      	str	r3, [r2, #0]
    gemm_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 128);
 8005912:	4b26      	ldr	r3, [pc, #152]	@ (80059ac <network_configure_weights+0xfc>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	3380      	adds	r3, #128	@ 0x80
 8005918:	4a27      	ldr	r2, [pc, #156]	@ (80059b8 <network_configure_weights+0x108>)
 800591a:	6093      	str	r3, [r2, #8]
    gemm_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 128);
 800591c:	4b23      	ldr	r3, [pc, #140]	@ (80059ac <network_configure_weights+0xfc>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	3380      	adds	r3, #128	@ 0x80
 8005922:	4a25      	ldr	r2, [pc, #148]	@ (80059b8 <network_configure_weights+0x108>)
 8005924:	60d3      	str	r3, [r2, #12]
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005926:	4b25      	ldr	r3, [pc, #148]	@ (80059bc <network_configure_weights+0x10c>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800592e:	4a23      	ldr	r2, [pc, #140]	@ (80059bc <network_configure_weights+0x10c>)
 8005930:	6013      	str	r3, [r2, #0]
    gemm_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 1152);
 8005932:	4b1e      	ldr	r3, [pc, #120]	@ (80059ac <network_configure_weights+0xfc>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800593a:	4a20      	ldr	r2, [pc, #128]	@ (80059bc <network_configure_weights+0x10c>)
 800593c:	6093      	str	r3, [r2, #8]
    gemm_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 1152);
 800593e:	4b1b      	ldr	r3, [pc, #108]	@ (80059ac <network_configure_weights+0xfc>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8005946:	4a1d      	ldr	r2, [pc, #116]	@ (80059bc <network_configure_weights+0x10c>)
 8005948:	60d3      	str	r3, [r2, #12]
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800594a:	4b1d      	ldr	r3, [pc, #116]	@ (80059c0 <network_configure_weights+0x110>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005952:	4a1b      	ldr	r2, [pc, #108]	@ (80059c0 <network_configure_weights+0x110>)
 8005954:	6013      	str	r3, [r2, #0]
    gemm_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 1216);
 8005956:	4b15      	ldr	r3, [pc, #84]	@ (80059ac <network_configure_weights+0xfc>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800595e:	4a18      	ldr	r2, [pc, #96]	@ (80059c0 <network_configure_weights+0x110>)
 8005960:	6093      	str	r3, [r2, #8]
    gemm_2_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 1216);
 8005962:	4b12      	ldr	r3, [pc, #72]	@ (80059ac <network_configure_weights+0xfc>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800596a:	4a15      	ldr	r2, [pc, #84]	@ (80059c0 <network_configure_weights+0x110>)
 800596c:	60d3      	str	r3, [r2, #12]
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800596e:	4b15      	ldr	r3, [pc, #84]	@ (80059c4 <network_configure_weights+0x114>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005976:	4a13      	ldr	r2, [pc, #76]	@ (80059c4 <network_configure_weights+0x114>)
 8005978:	6013      	str	r3, [r2, #0]
    gemm_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 1280);
 800597a:	4b0c      	ldr	r3, [pc, #48]	@ (80059ac <network_configure_weights+0xfc>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005982:	4a10      	ldr	r2, [pc, #64]	@ (80059c4 <network_configure_weights+0x114>)
 8005984:	6093      	str	r3, [r2, #8]
    gemm_2_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 1280);
 8005986:	4b09      	ldr	r3, [pc, #36]	@ (80059ac <network_configure_weights+0xfc>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800598e:	4a0d      	ldr	r2, [pc, #52]	@ (80059c4 <network_configure_weights+0x114>)
 8005990:	60d3      	str	r3, [r2, #12]
    return true;
 8005992:	2301      	movs	r3, #1
 8005994:	e005      	b.n	80059a2 <network_configure_weights+0xf2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8005996:	2212      	movs	r2, #18
 8005998:	2130      	movs	r1, #48	@ 0x30
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fa80 	bl	8005ea0 <ai_platform_network_set_error>
  return false;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	24000870 	.word	0x24000870
 80059b0:	24000074 	.word	0x24000074
 80059b4:	24000084 	.word	0x24000084
 80059b8:	24000094 	.word	0x24000094
 80059bc:	240000a4 	.word	0x240000a4
 80059c0:	240000b4 	.word	0x240000b4
 80059c4:	240000c4 	.word	0x240000c4

080059c8 <ai_network_get_error>:
}


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 fa59 	bl	8005e88 <ai_platform_network_get_error>
 80059d6:	4603      	mov	r3, r0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3708      	adds	r7, #8
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af02      	add	r7, sp, #8
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80059ea:	2300      	movs	r3, #0
 80059ec:	9301      	str	r3, [sp, #4]
 80059ee:	2305      	movs	r3, #5
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	2301      	movs	r3, #1
 80059f4:	4a04      	ldr	r2, [pc, #16]	@ (8005a08 <ai_network_create+0x28>)
 80059f6:	6839      	ldr	r1, [r7, #0]
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fb45 	bl	8006088 <ai_platform_network_create>
 80059fe:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3708      	adds	r7, #8
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	240005f8 	.word	0x240005f8

08005a0c <ai_network_create_and_init>:


AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b094      	sub	sp, #80	@ 0x50
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8005a18:	2100      	movs	r1, #0
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f7ff ffe0 	bl	80059e0 <ai_network_create>
 8005a20:	4603      	mov	r3, r0
 8005a22:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 8005a24:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d001      	beq.n	8005a30 <ai_network_create_and_init+0x24>
    return err;
 8005a2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a2e:	e067      	b.n	8005b00 <ai_network_create_and_init+0xf4>
  }
  
  if (ai_network_data_params_get(&params) != true) {
 8005a30:	f107 0310 	add.w	r3, r7, #16
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 f8e7 	bl	8005c08 <ai_network_data_params_get>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	f083 0301 	eor.w	r3, r3, #1
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d008      	beq.n	8005a58 <ai_network_create_and_init+0x4c>
    err = ai_network_get_error(*network);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7ff ffbc 	bl	80059c8 <ai_network_get_error>
 8005a50:	4603      	mov	r3, r0
 8005a52:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 8005a54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a56:	e053      	b.n	8005b00 <ai_network_create_and_init+0xf4>
  }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8005a58:	2300      	movs	r3, #0
 8005a5a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005a5e:	e012      	b.n	8005a86 <ai_network_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8005a60:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 8005a64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	f107 0310 	add.w	r3, r7, #16
 8005a74:	330c      	adds	r3, #12
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 f92c 	bl	8005cd4 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8005a7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005a80:	3301      	adds	r3, #1
 8005a82:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d004      	beq.n	8005a96 <ai_network_create_and_init+0x8a>
 8005a8c:	8bfb      	ldrh	r3, [r7, #30]
 8005a8e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d3e4      	bcc.n	8005a60 <ai_network_create_and_init+0x54>
  }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8005a96:	2300      	movs	r3, #0
 8005a98:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005a9c:	e012      	b.n	8005ac4 <ai_network_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8005a9e:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 8005aa2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	4413      	add	r3, r2
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	f107 0310 	add.w	r3, r7, #16
 8005ab2:	3304      	adds	r3, #4
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 f90d 	bl	8005cd4 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8005aba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005abe:	3301      	adds	r3, #1
 8005ac0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d004      	beq.n	8005ad4 <ai_network_create_and_init+0xc8>
 8005aca:	8afb      	ldrh	r3, [r7, #22]
 8005acc:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d3e4      	bcc.n	8005a9e <ai_network_create_and_init+0x92>
  }
#endif
  if (ai_network_init(*network, &params) != true) {
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f107 0210 	add.w	r2, r7, #16
 8005adc:	4611      	mov	r1, r2
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 f846 	bl	8005b70 <ai_network_init>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	f083 0301 	eor.w	r3, r3, #1
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d006      	beq.n	8005afe <ai_network_create_and_init+0xf2>
    err = ai_network_get_error(*network);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7ff ff67 	bl	80059c8 <ai_network_get_error>
 8005afa:	4603      	mov	r3, r0
 8005afc:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 8005afe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3750      	adds	r7, #80	@ 0x50
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <ai_network_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d104      	bne.n	8005b22 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8005b18:	4b06      	ldr	r3, [pc, #24]	@ (8005b34 <ai_network_inputs_get+0x2c>)
 8005b1a:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a06      	ldr	r2, [pc, #24]	@ (8005b38 <ai_network_inputs_get+0x30>)
 8005b20:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8005b22:	6839      	ldr	r1, [r7, #0]
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 f9c1 	bl	8005eac <ai_platform_inputs_get>
 8005b2a:	4603      	mov	r3, r0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	240005f8 	.word	0x240005f8
 8005b38:	a1c00100 	.word	0xa1c00100

08005b3c <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d104      	bne.n	8005b56 <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8005b4c:	4b06      	ldr	r3, [pc, #24]	@ (8005b68 <ai_network_outputs_get+0x2c>)
 8005b4e:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a06      	ldr	r2, [pc, #24]	@ (8005b6c <ai_network_outputs_get+0x30>)
 8005b54:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8005b56:	6839      	ldr	r1, [r7, #0]
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 fa1f 	bl	8005f9c <ai_platform_outputs_get>
 8005b5e:	4603      	mov	r3, r0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3708      	adds	r7, #8
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	240005f8 	.word	0x240005f8
 8005b6c:	a1c00100 	.word	0xa1c00100

08005b70 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8005b7a:	6839      	ldr	r1, [r7, #0]
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 fac5 	bl	800610c <ai_platform_network_init>
 8005b82:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 8005b84:	2301      	movs	r3, #1
 8005b86:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <ai_network_init+0x22>
 8005b8e:	2300      	movs	r3, #0
 8005b90:	e026      	b.n	8005be0 <ai_network_init+0x70>
  ok &= network_configure_weights(net_ctx, params);
 8005b92:	6839      	ldr	r1, [r7, #0]
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f7ff fe8b 	bl	80058b0 <network_configure_weights>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	7afb      	ldrb	r3, [r7, #11]
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	bf14      	ite	ne
 8005ba6:	2301      	movne	r3, #1
 8005ba8:	2300      	moveq	r3, #0
 8005baa:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8005bac:	6839      	ldr	r1, [r7, #0]
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f7ff fe1e 	bl	80057f0 <network_configure_activations>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	7afb      	ldrb	r3, [r7, #11]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	bf14      	ite	ne
 8005bc0:	2301      	movne	r3, #1
 8005bc2:	2300      	moveq	r3, #0
 8005bc4:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 fb60 	bl	800628c <ai_platform_network_post_init>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	461a      	mov	r2, r3
 8005bd0:	7afb      	ldrb	r3, [r7, #11]
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	bf14      	ite	ne
 8005bd8:	2301      	movne	r3, #1
 8005bda:	2300      	moveq	r3, #0
 8005bdc:	72fb      	strb	r3, [r7, #11]

  return ok;
 8005bde:	7afb      	ldrb	r3, [r7, #11]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	68b9      	ldr	r1, [r7, #8]
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 fb77 	bl	80062ec <ai_platform_network_process>
 8005bfe:	4603      	mov	r3, r0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <ai_network_data_params_get+0x12>
 8005c16:	2300      	movs	r3, #0
 8005c18:	e016      	b.n	8005c48 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8005c1a:	4a0d      	ldr	r2, [pc, #52]	@ (8005c50 <ai_network_data_params_get+0x48>)
 8005c1c:	f107 0310 	add.w	r3, r7, #16
 8005c20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c24:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8005c28:	4a0a      	ldr	r2, [pc, #40]	@ (8005c54 <ai_network_data_params_get+0x4c>)
 8005c2a:	f107 0308 	add.w	r3, r7, #8
 8005c2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c32:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8005c36:	f107 0210 	add.w	r2, r7, #16
 8005c3a:	f107 0308 	add.w	r3, r7, #8
 8005c3e:	4619      	mov	r1, r3
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f907 	bl	8005e54 <ai_platform_bind_network_params>
 8005c46:	4603      	mov	r3, r0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3718      	adds	r7, #24
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	080088b0 	.word	0x080088b0
 8005c54:	080088b8 	.word	0x080088b8

08005c58 <ai_buffer_get_size>:
 8005c58:	b368      	cbz	r0, 8005cb6 <ai_buffer_get_size+0x5e>
 8005c5a:	4b17      	ldr	r3, [pc, #92]	@ (8005cb8 <ai_buffer_get_size+0x60>)
 8005c5c:	4a17      	ldr	r2, [pc, #92]	@ (8005cbc <ai_buffer_get_size+0x64>)
 8005c5e:	b410      	push	{r4}
 8005c60:	6804      	ldr	r4, [r0, #0]
 8005c62:	4023      	ands	r3, r4
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d123      	bne.n	8005cb0 <ai_buffer_get_size+0x58>
 8005c68:	b311      	cbz	r1, 8005cb0 <ai_buffer_get_size+0x58>
 8005c6a:	6984      	ldr	r4, [r0, #24]
 8005c6c:	6862      	ldr	r2, [r4, #4]
 8005c6e:	321f      	adds	r2, #31
 8005c70:	f022 021f 	bic.w	r2, r2, #31
 8005c74:	7d03      	ldrb	r3, [r0, #20]
 8005c76:	6941      	ldr	r1, [r0, #20]
 8005c78:	f1a3 0301 	sub.w	r3, r3, #1
 8005c7c:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8005c80:	fab3 f383 	clz	r3, r3
 8005c84:	095b      	lsrs	r3, r3, #5
 8005c86:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8005c8a:	da0c      	bge.n	8005ca6 <ai_buffer_get_size+0x4e>
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d103      	bne.n	8005c98 <ai_buffer_get_size+0x40>
 8005c90:	2802      	cmp	r0, #2
 8005c92:	f04f 0302 	mov.w	r3, #2
 8005c96:	d006      	beq.n	8005ca6 <ai_buffer_get_size+0x4e>
 8005c98:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	4298      	cmp	r0, r3
 8005ca0:	fb01 f202 	mul.w	r2, r1, r2
 8005ca4:	d1f2      	bne.n	8005c8c <ai_buffer_get_size+0x34>
 8005ca6:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8005caa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	6984      	ldr	r4, [r0, #24]
 8005cb2:	6862      	ldr	r2, [r4, #4]
 8005cb4:	e7de      	b.n	8005c74 <ai_buffer_get_size+0x1c>
 8005cb6:	4770      	bx	lr
 8005cb8:	017fffff 	.word	0x017fffff
 8005cbc:	000400c0 	.word	0x000400c0

08005cc0 <ai_buffer_array_sane>:
 8005cc0:	b138      	cbz	r0, 8005cd2 <ai_buffer_array_sane+0x12>
 8005cc2:	6843      	ldr	r3, [r0, #4]
 8005cc4:	b123      	cbz	r3, 8005cd0 <ai_buffer_array_sane+0x10>
 8005cc6:	8840      	ldrh	r0, [r0, #2]
 8005cc8:	3800      	subs	r0, #0
 8005cca:	bf18      	it	ne
 8005ccc:	2001      	movne	r0, #1
 8005cce:	4770      	bx	lr
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	4770      	bx	lr

08005cd4 <ai_buffer_array_item_set_address>:
 8005cd4:	b150      	cbz	r0, 8005cec <ai_buffer_array_item_set_address+0x18>
 8005cd6:	6843      	ldr	r3, [r0, #4]
 8005cd8:	b14b      	cbz	r3, 8005cee <ai_buffer_array_item_set_address+0x1a>
 8005cda:	8840      	ldrh	r0, [r0, #2]
 8005cdc:	b900      	cbnz	r0, 8005ce0 <ai_buffer_array_item_set_address+0xc>
 8005cde:	4770      	bx	lr
 8005ce0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005ce4:	2001      	movs	r0, #1
 8005ce6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005cea:	605a      	str	r2, [r3, #4]
 8005cec:	4770      	bx	lr
 8005cee:	4618      	mov	r0, r3
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop

08005cf4 <ai_platform_get_weights_map>:
 8005cf4:	2900      	cmp	r1, #0
 8005cf6:	bf18      	it	ne
 8005cf8:	2800      	cmpne	r0, #0
 8005cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cfc:	bf0c      	ite	eq
 8005cfe:	2401      	moveq	r4, #1
 8005d00:	2400      	movne	r4, #0
 8005d02:	2a00      	cmp	r2, #0
 8005d04:	bf08      	it	eq
 8005d06:	f044 0401 	orreq.w	r4, r4, #1
 8005d0a:	b114      	cbz	r4, 8005d12 <ai_platform_get_weights_map+0x1e>
 8005d0c:	2400      	movs	r4, #0
 8005d0e:	4620      	mov	r0, r4
 8005d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d12:	4616      	mov	r6, r2
 8005d14:	4b22      	ldr	r3, [pc, #136]	@ (8005da0 <ai_platform_get_weights_map+0xac>)
 8005d16:	6812      	ldr	r2, [r2, #0]
 8005d18:	4605      	mov	r5, r0
 8005d1a:	460f      	mov	r7, r1
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d022      	beq.n	8005d66 <ai_platform_get_weights_map+0x72>
 8005d20:	6870      	ldr	r0, [r6, #4]
 8005d22:	2800      	cmp	r0, #0
 8005d24:	d0f2      	beq.n	8005d0c <ai_platform_get_weights_map+0x18>
 8005d26:	6806      	ldr	r6, [r0, #0]
 8005d28:	429e      	cmp	r6, r3
 8005d2a:	d006      	beq.n	8005d3a <ai_platform_get_weights_map+0x46>
 8005d2c:	f1a1 0401 	sub.w	r4, r1, #1
 8005d30:	6028      	str	r0, [r5, #0]
 8005d32:	fab4 f484 	clz	r4, r4
 8005d36:	0964      	lsrs	r4, r4, #5
 8005d38:	e7e9      	b.n	8005d0e <ai_platform_get_weights_map+0x1a>
 8005d3a:	3d04      	subs	r5, #4
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	4621      	mov	r1, r4
 8005d40:	e000      	b.n	8005d44 <ai_platform_get_weights_map+0x50>
 8005d42:	4619      	mov	r1, r3
 8005d44:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8005d48:	42b3      	cmp	r3, r6
 8005d4a:	d025      	beq.n	8005d98 <ai_platform_get_weights_map+0xa4>
 8005d4c:	f845 3f04 	str.w	r3, [r5, #4]!
 8005d50:	1c4b      	adds	r3, r1, #1
 8005d52:	429f      	cmp	r7, r3
 8005d54:	d8f5      	bhi.n	8005d42 <ai_platform_get_weights_map+0x4e>
 8005d56:	d1da      	bne.n	8005d0e <ai_platform_get_weights_map+0x1a>
 8005d58:	3102      	adds	r1, #2
 8005d5a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8005d5e:	42b3      	cmp	r3, r6
 8005d60:	d1d5      	bne.n	8005d0e <ai_platform_get_weights_map+0x1a>
 8005d62:	2401      	movs	r4, #1
 8005d64:	e7d3      	b.n	8005d0e <ai_platform_get_weights_map+0x1a>
 8005d66:	1d30      	adds	r0, r6, #4
 8005d68:	f7ff ffaa 	bl	8005cc0 <ai_buffer_array_sane>
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	d0cd      	beq.n	8005d0c <ai_platform_get_weights_map+0x18>
 8005d70:	88f3      	ldrh	r3, [r6, #6]
 8005d72:	429f      	cmp	r7, r3
 8005d74:	d1ca      	bne.n	8005d0c <ai_platform_get_weights_map+0x18>
 8005d76:	3d04      	subs	r5, #4
 8005d78:	4622      	mov	r2, r4
 8005d7a:	68b3      	ldr	r3, [r6, #8]
 8005d7c:	4423      	add	r3, r4
 8005d7e:	341c      	adds	r4, #28
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	b123      	cbz	r3, 8005d8e <ai_platform_get_weights_map+0x9a>
 8005d84:	3201      	adds	r2, #1
 8005d86:	f845 3f04 	str.w	r3, [r5, #4]!
 8005d8a:	4297      	cmp	r7, r2
 8005d8c:	d8f5      	bhi.n	8005d7a <ai_platform_get_weights_map+0x86>
 8005d8e:	1abc      	subs	r4, r7, r2
 8005d90:	fab4 f484 	clz	r4, r4
 8005d94:	0964      	lsrs	r4, r4, #5
 8005d96:	e7ba      	b.n	8005d0e <ai_platform_get_weights_map+0x1a>
 8005d98:	428f      	cmp	r7, r1
 8005d9a:	d1b8      	bne.n	8005d0e <ai_platform_get_weights_map+0x1a>
 8005d9c:	e7e1      	b.n	8005d62 <ai_platform_get_weights_map+0x6e>
 8005d9e:	bf00      	nop
 8005da0:	a1facade 	.word	0xa1facade

08005da4 <ai_platform_get_activations_map>:
 8005da4:	2900      	cmp	r1, #0
 8005da6:	bf18      	it	ne
 8005da8:	2800      	cmpne	r0, #0
 8005daa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dac:	bf0c      	ite	eq
 8005dae:	2401      	moveq	r4, #1
 8005db0:	2400      	movne	r4, #0
 8005db2:	2a00      	cmp	r2, #0
 8005db4:	bf08      	it	eq
 8005db6:	f044 0401 	orreq.w	r4, r4, #1
 8005dba:	b114      	cbz	r4, 8005dc2 <ai_platform_get_activations_map+0x1e>
 8005dbc:	2400      	movs	r4, #0
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dc2:	4616      	mov	r6, r2
 8005dc4:	4b22      	ldr	r3, [pc, #136]	@ (8005e50 <ai_platform_get_activations_map+0xac>)
 8005dc6:	6812      	ldr	r2, [r2, #0]
 8005dc8:	4605      	mov	r5, r0
 8005dca:	460f      	mov	r7, r1
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d022      	beq.n	8005e16 <ai_platform_get_activations_map+0x72>
 8005dd0:	6a30      	ldr	r0, [r6, #32]
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	d0f2      	beq.n	8005dbc <ai_platform_get_activations_map+0x18>
 8005dd6:	6806      	ldr	r6, [r0, #0]
 8005dd8:	429e      	cmp	r6, r3
 8005dda:	d006      	beq.n	8005dea <ai_platform_get_activations_map+0x46>
 8005ddc:	f1a1 0401 	sub.w	r4, r1, #1
 8005de0:	6028      	str	r0, [r5, #0]
 8005de2:	fab4 f484 	clz	r4, r4
 8005de6:	0964      	lsrs	r4, r4, #5
 8005de8:	e7e9      	b.n	8005dbe <ai_platform_get_activations_map+0x1a>
 8005dea:	3d04      	subs	r5, #4
 8005dec:	4602      	mov	r2, r0
 8005dee:	4621      	mov	r1, r4
 8005df0:	e000      	b.n	8005df4 <ai_platform_get_activations_map+0x50>
 8005df2:	4619      	mov	r1, r3
 8005df4:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8005df8:	42b3      	cmp	r3, r6
 8005dfa:	d026      	beq.n	8005e4a <ai_platform_get_activations_map+0xa6>
 8005dfc:	f845 3f04 	str.w	r3, [r5, #4]!
 8005e00:	1c4b      	adds	r3, r1, #1
 8005e02:	429f      	cmp	r7, r3
 8005e04:	d8f5      	bhi.n	8005df2 <ai_platform_get_activations_map+0x4e>
 8005e06:	d1da      	bne.n	8005dbe <ai_platform_get_activations_map+0x1a>
 8005e08:	3102      	adds	r1, #2
 8005e0a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8005e0e:	42b3      	cmp	r3, r6
 8005e10:	d1d5      	bne.n	8005dbe <ai_platform_get_activations_map+0x1a>
 8005e12:	2401      	movs	r4, #1
 8005e14:	e7d3      	b.n	8005dbe <ai_platform_get_activations_map+0x1a>
 8005e16:	f106 000c 	add.w	r0, r6, #12
 8005e1a:	f7ff ff51 	bl	8005cc0 <ai_buffer_array_sane>
 8005e1e:	2800      	cmp	r0, #0
 8005e20:	d0cc      	beq.n	8005dbc <ai_platform_get_activations_map+0x18>
 8005e22:	89f3      	ldrh	r3, [r6, #14]
 8005e24:	429f      	cmp	r7, r3
 8005e26:	d1c9      	bne.n	8005dbc <ai_platform_get_activations_map+0x18>
 8005e28:	3d04      	subs	r5, #4
 8005e2a:	4622      	mov	r2, r4
 8005e2c:	6933      	ldr	r3, [r6, #16]
 8005e2e:	4423      	add	r3, r4
 8005e30:	341c      	adds	r4, #28
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	b123      	cbz	r3, 8005e40 <ai_platform_get_activations_map+0x9c>
 8005e36:	3201      	adds	r2, #1
 8005e38:	f845 3f04 	str.w	r3, [r5, #4]!
 8005e3c:	4297      	cmp	r7, r2
 8005e3e:	d8f5      	bhi.n	8005e2c <ai_platform_get_activations_map+0x88>
 8005e40:	1abc      	subs	r4, r7, r2
 8005e42:	fab4 f484 	clz	r4, r4
 8005e46:	0964      	lsrs	r4, r4, #5
 8005e48:	e7b9      	b.n	8005dbe <ai_platform_get_activations_map+0x1a>
 8005e4a:	428f      	cmp	r7, r1
 8005e4c:	d1b7      	bne.n	8005dbe <ai_platform_get_activations_map+0x1a>
 8005e4e:	e7e0      	b.n	8005e12 <ai_platform_get_activations_map+0x6e>
 8005e50:	a1facade 	.word	0xa1facade

08005e54 <ai_platform_bind_network_params>:
 8005e54:	2a00      	cmp	r2, #0
 8005e56:	bf18      	it	ne
 8005e58:	2900      	cmpne	r1, #0
 8005e5a:	d010      	beq.n	8005e7e <ai_platform_bind_network_params+0x2a>
 8005e5c:	b178      	cbz	r0, 8005e7e <ai_platform_bind_network_params+0x2a>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	4808      	ldr	r0, [pc, #32]	@ (8005e84 <ai_platform_bind_network_params+0x30>)
 8005e62:	f103 0c0c 	add.w	ip, r3, #12
 8005e66:	f843 0b04 	str.w	r0, [r3], #4
 8005e6a:	c903      	ldmia	r1, {r0, r1}
 8005e6c:	e883 0003 	stmia.w	r3, {r0, r1}
 8005e70:	2301      	movs	r3, #1
 8005e72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e76:	e88c 0003 	stmia.w	ip, {r0, r1}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	4770      	bx	lr
 8005e7e:	2300      	movs	r3, #0
 8005e80:	4618      	mov	r0, r3
 8005e82:	4770      	bx	lr
 8005e84:	a1facade 	.word	0xa1facade

08005e88 <ai_platform_network_get_error>:
 8005e88:	4b04      	ldr	r3, [pc, #16]	@ (8005e9c <ai_platform_network_get_error+0x14>)
 8005e8a:	6802      	ldr	r2, [r0, #0]
 8005e8c:	4393      	bics	r3, r2
 8005e8e:	d102      	bne.n	8005e96 <ai_platform_network_get_error+0xe>
 8005e90:	300c      	adds	r0, #12
 8005e92:	f000 bc73 	b.w	800677c <core_get_error>
 8005e96:	f241 0010 	movw	r0, #4112	@ 0x1010
 8005e9a:	4770      	bx	lr
 8005e9c:	a1c00100 	.word	0xa1c00100

08005ea0 <ai_platform_network_set_error>:
 8005ea0:	b110      	cbz	r0, 8005ea8 <ai_platform_network_set_error+0x8>
 8005ea2:	300c      	adds	r0, #12
 8005ea4:	f000 bc70 	b.w	8006788 <core_set_error>
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop

08005eac <ai_platform_inputs_get>:
 8005eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb0:	4b39      	ldr	r3, [pc, #228]	@ (8005f98 <ai_platform_inputs_get+0xec>)
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	6802      	ldr	r2, [r0, #0]
 8005eb6:	4393      	bics	r3, r2
 8005eb8:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8005ebc:	d162      	bne.n	8005f84 <ai_platform_inputs_get+0xd8>
 8005ebe:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d051      	beq.n	8005f68 <ai_platform_inputs_get+0xbc>
 8005ec4:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8005ec8:	f1ba 0f00 	cmp.w	sl, #0
 8005ecc:	d04c      	beq.n	8005f68 <ai_platform_inputs_get+0xbc>
 8005ece:	f04f 0900 	mov.w	r9, #0
 8005ed2:	464d      	mov	r5, r9
 8005ed4:	e016      	b.n	8005f04 <ai_platform_inputs_get+0x58>
 8005ed6:	9901      	ldr	r1, [sp, #4]
 8005ed8:	2301      	movs	r3, #1
 8005eda:	f848 3001 	str.w	r3, [r8, r1]
 8005ede:	69b1      	ldr	r1, [r6, #24]
 8005ee0:	f04f 0301 	mov.w	r3, #1
 8005ee4:	684e      	ldr	r6, [r1, #4]
 8005ee6:	3501      	adds	r5, #1
 8005ee8:	f109 091c 	add.w	r9, r9, #28
 8005eec:	7523      	strb	r3, [r4, #20]
 8005eee:	2300      	movs	r3, #0
 8005ef0:	6961      	ldr	r1, [r4, #20]
 8005ef2:	6020      	str	r0, [r4, #0]
 8005ef4:	f36b 211f 	bfi	r1, fp, #8, #24
 8005ef8:	e9c4 c701 	strd	ip, r7, [r4, #4]
 8005efc:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8005f00:	e9c4 1205 	strd	r1, r2, [r4, #20]
 8005f04:	f8ba 3000 	ldrh.w	r3, [sl]
 8005f08:	b2ac      	uxth	r4, r5
 8005f0a:	42ab      	cmp	r3, r5
 8005f0c:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8005f10:	9301      	str	r3, [sp, #4]
 8005f12:	d93b      	bls.n	8005f8c <ai_platform_inputs_get+0xe0>
 8005f14:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d037      	beq.n	8005f8c <ai_platform_inputs_get+0xe0>
 8005f1c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8005f20:	2e00      	cmp	r6, #0
 8005f22:	d033      	beq.n	8005f8c <ai_platform_inputs_get+0xe0>
 8005f24:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005f28:	69b2      	ldr	r2, [r6, #24]
 8005f2a:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8005f2e:	6810      	ldr	r0, [r2, #0]
 8005f30:	68b3      	ldr	r3, [r6, #8]
 8005f32:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8005f36:	68f2      	ldr	r2, [r6, #12]
 8005f38:	444c      	add	r4, r9
 8005f3a:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8005f3e:	9200      	str	r2, [sp, #0]
 8005f40:	f001 f9b0 	bl	80072a4 <ai_array_to_buffer_fmt>
 8005f44:	69b1      	ldr	r1, [r6, #24]
 8005f46:	9a00      	ldr	r2, [sp, #0]
 8005f48:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8005f4c:	2f00      	cmp	r7, #0
 8005f4e:	d0c7      	beq.n	8005ee0 <ai_platform_inputs_get+0x34>
 8005f50:	2100      	movs	r1, #0
 8005f52:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 8005f56:	6831      	ldr	r1, [r6, #0]
 8005f58:	6079      	str	r1, [r7, #4]
 8005f5a:	b111      	cbz	r1, 8005f62 <ai_platform_inputs_get+0xb6>
 8005f5c:	8849      	ldrh	r1, [r1, #2]
 8005f5e:	2900      	cmp	r1, #0
 8005f60:	d1b9      	bne.n	8005ed6 <ai_platform_inputs_get+0x2a>
 8005f62:	69b1      	ldr	r1, [r6, #24]
 8005f64:	2700      	movs	r7, #0
 8005f66:	e7bb      	b.n	8005ee0 <ai_platform_inputs_get+0x34>
 8005f68:	9803      	ldr	r0, [sp, #12]
 8005f6a:	2400      	movs	r4, #0
 8005f6c:	2218      	movs	r2, #24
 8005f6e:	2111      	movs	r1, #17
 8005f70:	300c      	adds	r0, #12
 8005f72:	f000 fc09 	bl	8006788 <core_set_error>
 8005f76:	4620      	mov	r0, r4
 8005f78:	9b02      	ldr	r3, [sp, #8]
 8005f7a:	b103      	cbz	r3, 8005f7e <ai_platform_inputs_get+0xd2>
 8005f7c:	801c      	strh	r4, [r3, #0]
 8005f7e:	b005      	add	sp, #20
 8005f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f84:	2000      	movs	r0, #0
 8005f86:	b005      	add	sp, #20
 8005f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f8c:	2c00      	cmp	r4, #0
 8005f8e:	d0eb      	beq.n	8005f68 <ai_platform_inputs_get+0xbc>
 8005f90:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005f94:	6858      	ldr	r0, [r3, #4]
 8005f96:	e7ef      	b.n	8005f78 <ai_platform_inputs_get+0xcc>
 8005f98:	a1c00100 	.word	0xa1c00100

08005f9c <ai_platform_outputs_get>:
 8005f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fa0:	4b38      	ldr	r3, [pc, #224]	@ (8006084 <ai_platform_outputs_get+0xe8>)
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	6802      	ldr	r2, [r0, #0]
 8005fa6:	4393      	bics	r3, r2
 8005fa8:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8005fac:	d15f      	bne.n	800606e <ai_platform_outputs_get+0xd2>
 8005fae:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d94e      	bls.n	8006052 <ai_platform_outputs_get+0xb6>
 8005fb4:	f04f 0900 	mov.w	r9, #0
 8005fb8:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8005fbc:	464d      	mov	r5, r9
 8005fbe:	e016      	b.n	8005fee <ai_platform_outputs_get+0x52>
 8005fc0:	9901      	ldr	r1, [sp, #4]
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	f848 3001 	str.w	r3, [r8, r1]
 8005fc8:	69b1      	ldr	r1, [r6, #24]
 8005fca:	f04f 0301 	mov.w	r3, #1
 8005fce:	684e      	ldr	r6, [r1, #4]
 8005fd0:	3501      	adds	r5, #1
 8005fd2:	f109 091c 	add.w	r9, r9, #28
 8005fd6:	7523      	strb	r3, [r4, #20]
 8005fd8:	2300      	movs	r3, #0
 8005fda:	6961      	ldr	r1, [r4, #20]
 8005fdc:	6020      	str	r0, [r4, #0]
 8005fde:	f36b 211f 	bfi	r1, fp, #8, #24
 8005fe2:	e9c4 c701 	strd	ip, r7, [r4, #4]
 8005fe6:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8005fea:	e9c4 1205 	strd	r1, r2, [r4, #20]
 8005fee:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8005ff2:	b2ac      	uxth	r4, r5
 8005ff4:	42ab      	cmp	r3, r5
 8005ff6:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8005ffa:	9301      	str	r3, [sp, #4]
 8005ffc:	d93b      	bls.n	8006076 <ai_platform_outputs_get+0xda>
 8005ffe:	f8da 3010 	ldr.w	r3, [sl, #16]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d037      	beq.n	8006076 <ai_platform_outputs_get+0xda>
 8006006:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800600a:	2e00      	cmp	r6, #0
 800600c:	d033      	beq.n	8006076 <ai_platform_outputs_get+0xda>
 800600e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006012:	69b2      	ldr	r2, [r6, #24]
 8006014:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8006018:	6810      	ldr	r0, [r2, #0]
 800601a:	68b3      	ldr	r3, [r6, #8]
 800601c:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8006020:	68f2      	ldr	r2, [r6, #12]
 8006022:	444c      	add	r4, r9
 8006024:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8006028:	9200      	str	r2, [sp, #0]
 800602a:	f001 f93b 	bl	80072a4 <ai_array_to_buffer_fmt>
 800602e:	69b1      	ldr	r1, [r6, #24]
 8006030:	9a00      	ldr	r2, [sp, #0]
 8006032:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8006036:	2f00      	cmp	r7, #0
 8006038:	d0c7      	beq.n	8005fca <ai_platform_outputs_get+0x2e>
 800603a:	2100      	movs	r1, #0
 800603c:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 8006040:	6831      	ldr	r1, [r6, #0]
 8006042:	6079      	str	r1, [r7, #4]
 8006044:	b111      	cbz	r1, 800604c <ai_platform_outputs_get+0xb0>
 8006046:	8849      	ldrh	r1, [r1, #2]
 8006048:	2900      	cmp	r1, #0
 800604a:	d1b9      	bne.n	8005fc0 <ai_platform_outputs_get+0x24>
 800604c:	69b1      	ldr	r1, [r6, #24]
 800604e:	2700      	movs	r7, #0
 8006050:	e7bb      	b.n	8005fca <ai_platform_outputs_get+0x2e>
 8006052:	9803      	ldr	r0, [sp, #12]
 8006054:	2400      	movs	r4, #0
 8006056:	2218      	movs	r2, #24
 8006058:	2111      	movs	r1, #17
 800605a:	300c      	adds	r0, #12
 800605c:	f000 fb94 	bl	8006788 <core_set_error>
 8006060:	4620      	mov	r0, r4
 8006062:	9b02      	ldr	r3, [sp, #8]
 8006064:	b103      	cbz	r3, 8006068 <ai_platform_outputs_get+0xcc>
 8006066:	801c      	strh	r4, [r3, #0]
 8006068:	b005      	add	sp, #20
 800606a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800606e:	2000      	movs	r0, #0
 8006070:	b005      	add	sp, #20
 8006072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006076:	2c00      	cmp	r4, #0
 8006078:	d0eb      	beq.n	8006052 <ai_platform_outputs_get+0xb6>
 800607a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800607e:	6858      	ldr	r0, [r3, #4]
 8006080:	e7ef      	b.n	8006062 <ai_platform_outputs_get+0xc6>
 8006082:	bf00      	nop
 8006084:	a1c00100 	.word	0xa1c00100

08006088 <ai_platform_network_create>:
 8006088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800608c:	b083      	sub	sp, #12
 800608e:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 8006092:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8006096:	b320      	cbz	r0, 80060e2 <ai_platform_network_create+0x5a>
 8006098:	6002      	str	r2, [r0, #0]
 800609a:	4616      	mov	r6, r2
 800609c:	461f      	mov	r7, r3
 800609e:	4604      	mov	r4, r0
 80060a0:	f000 fb6a 	bl	8006778 <core_init>
 80060a4:	b970      	cbnz	r0, 80060c4 <ai_platform_network_create+0x3c>
 80060a6:	2530      	movs	r5, #48	@ 0x30
 80060a8:	2300      	movs	r3, #0
 80060aa:	6023      	str	r3, [r4, #0]
 80060ac:	2410      	movs	r4, #16
 80060ae:	464a      	mov	r2, r9
 80060b0:	4641      	mov	r1, r8
 80060b2:	4638      	mov	r0, r7
 80060b4:	f001 f9a0 	bl	80073f8 <ai_version_get>
 80060b8:	60b0      	str	r0, [r6, #8]
 80060ba:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80060be:	b003      	add	sp, #12
 80060c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80060c4:	2200      	movs	r2, #0
 80060c6:	4641      	mov	r1, r8
 80060c8:	4638      	mov	r0, r7
 80060ca:	f001 f995 	bl	80073f8 <ai_version_get>
 80060ce:	4605      	mov	r5, r0
 80060d0:	2200      	movs	r2, #0
 80060d2:	2105      	movs	r1, #5
 80060d4:	2001      	movs	r0, #1
 80060d6:	f001 f98f 	bl	80073f8 <ai_version_get>
 80060da:	4285      	cmp	r5, r0
 80060dc:	d008      	beq.n	80060f0 <ai_platform_network_create+0x68>
 80060de:	2501      	movs	r5, #1
 80060e0:	e7e2      	b.n	80060a8 <ai_platform_network_create+0x20>
 80060e2:	2510      	movs	r5, #16
 80060e4:	462c      	mov	r4, r5
 80060e6:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80060ea:	b003      	add	sp, #12
 80060ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80060f0:	4b05      	ldr	r3, [pc, #20]	@ (8006108 <ai_platform_network_create+0x80>)
 80060f2:	a801      	add	r0, sp, #4
 80060f4:	9301      	str	r3, [sp, #4]
 80060f6:	f000 fb53 	bl	80067a0 <ai_check_custom_types>
 80060fa:	b110      	cbz	r0, 8006102 <ai_platform_network_create+0x7a>
 80060fc:	2400      	movs	r4, #0
 80060fe:	4625      	mov	r5, r4
 8006100:	e7d5      	b.n	80060ae <ai_platform_network_create+0x26>
 8006102:	2502      	movs	r5, #2
 8006104:	e7d0      	b.n	80060a8 <ai_platform_network_create+0x20>
 8006106:	bf00      	nop
 8006108:	84048403 	.word	0x84048403

0800610c <ai_platform_network_init>:
 800610c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006110:	4a5c      	ldr	r2, [pc, #368]	@ (8006284 <ai_platform_network_init+0x178>)
 8006112:	460c      	mov	r4, r1
 8006114:	6801      	ldr	r1, [r0, #0]
 8006116:	438a      	bics	r2, r1
 8006118:	d133      	bne.n	8006182 <ai_platform_network_init+0x76>
 800611a:	4605      	mov	r5, r0
 800611c:	2c00      	cmp	r4, #0
 800611e:	f000 8093 	beq.w	8006248 <ai_platform_network_init+0x13c>
 8006122:	f8d4 b000 	ldr.w	fp, [r4]
 8006126:	4a58      	ldr	r2, [pc, #352]	@ (8006288 <ai_platform_network_init+0x17c>)
 8006128:	4593      	cmp	fp, r2
 800612a:	d10f      	bne.n	800614c <ai_platform_network_init+0x40>
 800612c:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 8006130:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8006134:	4b53      	ldr	r3, [pc, #332]	@ (8006284 <ai_platform_network_init+0x178>)
 8006136:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 800613a:	0c32      	lsrs	r2, r6, #16
 800613c:	4299      	cmp	r1, r3
 800613e:	d02c      	beq.n	800619a <ai_platform_network_init+0x8e>
 8006140:	2303      	movs	r3, #3
 8006142:	462c      	mov	r4, r5
 8006144:	612b      	str	r3, [r5, #16]
 8006146:	4620      	mov	r0, r4
 8006148:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800614c:	4627      	mov	r7, r4
 800614e:	2101      	movs	r1, #1
 8006150:	6864      	ldr	r4, [r4, #4]
 8006152:	4638      	mov	r0, r7
 8006154:	f107 081c 	add.w	r8, r7, #28
 8006158:	f7ff fd7e 	bl	8005c58 <ai_buffer_get_size>
 800615c:	4606      	mov	r6, r0
 800615e:	2101      	movs	r1, #1
 8006160:	4640      	mov	r0, r8
 8006162:	f8d7 9020 	ldr.w	r9, [r7, #32]
 8006166:	f7ff fd77 	bl	8005c58 <ai_buffer_get_size>
 800616a:	b976      	cbnz	r6, 800618a <ai_platform_network_init+0x7e>
 800616c:	2800      	cmp	r0, #0
 800616e:	d150      	bne.n	8006212 <ai_platform_network_init+0x106>
 8006170:	4680      	mov	r8, r0
 8006172:	4686      	mov	lr, r0
 8006174:	4606      	mov	r6, r0
 8006176:	4607      	mov	r7, r0
 8006178:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 800617c:	6829      	ldr	r1, [r5, #0]
 800617e:	0436      	lsls	r6, r6, #16
 8006180:	e7d8      	b.n	8006134 <ai_platform_network_init+0x28>
 8006182:	2400      	movs	r4, #0
 8006184:	4620      	mov	r0, r4
 8006186:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800618a:	2800      	cmp	r0, #0
 800618c:	d13b      	bne.n	8006206 <ai_platform_network_init+0xfa>
 800618e:	4680      	mov	r8, r0
 8006190:	4686      	mov	lr, r0
 8006192:	2c00      	cmp	r4, #0
 8006194:	d05e      	beq.n	8006254 <ai_platform_network_init+0x148>
 8006196:	2601      	movs	r6, #1
 8006198:	e7ee      	b.n	8006178 <ai_platform_network_init+0x6c>
 800619a:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 800619c:	4293      	cmp	r3, r2
 800619e:	4b3a      	ldr	r3, [pc, #232]	@ (8006288 <ai_platform_network_init+0x17c>)
 80061a0:	d33e      	bcc.n	8006220 <ai_platform_network_init+0x114>
 80061a2:	459b      	cmp	fp, r3
 80061a4:	d03e      	beq.n	8006224 <ai_platform_network_init+0x118>
 80061a6:	b1a2      	cbz	r2, 80061d2 <ai_platform_network_init+0xc6>
 80061a8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80061ac:	f04f 0c00 	mov.w	ip, #0
 80061b0:	ea4f 0982 	mov.w	r9, r2, lsl #2
 80061b4:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 80061b6:	eb07 0b0c 	add.w	fp, r7, ip
 80061ba:	4464      	add	r4, ip
 80061bc:	f10c 0c1c 	add.w	ip, ip, #28
 80061c0:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 80061c4:	45cc      	cmp	ip, r9
 80061c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061c8:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 80061cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80061d0:	d1f0      	bne.n	80061b4 <ai_platform_network_init+0xa8>
 80061d2:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 80061d4:	622e      	str	r6, [r5, #32]
 80061d6:	4553      	cmp	r3, sl
 80061d8:	d34b      	bcc.n	8006272 <ai_platform_network_init+0x166>
 80061da:	f1ba 0f00 	cmp.w	sl, #0
 80061de:	d025      	beq.n	800622c <ai_platform_network_init+0x120>
 80061e0:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 80061e4:	2700      	movs	r7, #0
 80061e6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80061ea:	6aec      	ldr	r4, [r5, #44]	@ 0x2c
 80061ec:	eb08 0607 	add.w	r6, r8, r7
 80061f0:	443c      	add	r4, r7
 80061f2:	371c      	adds	r7, #28
 80061f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80061f6:	4557      	cmp	r7, sl
 80061f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061fa:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80061fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006202:	d1f2      	bne.n	80061ea <ai_platform_network_init+0xde>
 8006204:	e012      	b.n	800622c <ai_platform_network_init+0x120>
 8006206:	f1b9 0f00 	cmp.w	r9, #0
 800620a:	d015      	beq.n	8006238 <ai_platform_network_init+0x12c>
 800620c:	f04f 0e01 	mov.w	lr, #1
 8006210:	e7bf      	b.n	8006192 <ai_platform_network_init+0x86>
 8006212:	f1b9 0f00 	cmp.w	r9, #0
 8006216:	d00f      	beq.n	8006238 <ai_platform_network_init+0x12c>
 8006218:	f04f 0e01 	mov.w	lr, #1
 800621c:	4637      	mov	r7, r6
 800621e:	e7ab      	b.n	8006178 <ai_platform_network_init+0x6c>
 8006220:	459b      	cmp	fp, r3
 8006222:	d11e      	bne.n	8006262 <ai_platform_network_init+0x156>
 8006224:	f8c5 802c 	str.w	r8, [r5, #44]	@ 0x2c
 8006228:	e9c5 6708 	strd	r6, r7, [r5, #32]
 800622c:	4628      	mov	r0, r5
 800622e:	f8c5 e028 	str.w	lr, [r5, #40]	@ 0x28
 8006232:	f000 fadd 	bl	80067f0 <ai_layers_init_all>
 8006236:	e783      	b.n	8006140 <ai_platform_network_init+0x34>
 8006238:	2213      	movs	r2, #19
 800623a:	2110      	movs	r1, #16
 800623c:	f105 000c 	add.w	r0, r5, #12
 8006240:	2400      	movs	r4, #0
 8006242:	f000 faa1 	bl	8006788 <core_set_error>
 8006246:	e77e      	b.n	8006146 <ai_platform_network_init+0x3a>
 8006248:	2211      	movs	r2, #17
 800624a:	2110      	movs	r1, #16
 800624c:	300c      	adds	r0, #12
 800624e:	f000 fa9b 	bl	8006788 <core_set_error>
 8006252:	e778      	b.n	8006146 <ai_platform_network_init+0x3a>
 8006254:	2212      	movs	r2, #18
 8006256:	2110      	movs	r1, #16
 8006258:	f105 000c 	add.w	r0, r5, #12
 800625c:	f000 fa94 	bl	8006788 <core_set_error>
 8006260:	e771      	b.n	8006146 <ai_platform_network_init+0x3a>
 8006262:	2212      	movs	r2, #18
 8006264:	2116      	movs	r1, #22
 8006266:	f105 000c 	add.w	r0, r5, #12
 800626a:	2400      	movs	r4, #0
 800626c:	f000 fa8c 	bl	8006788 <core_set_error>
 8006270:	e769      	b.n	8006146 <ai_platform_network_init+0x3a>
 8006272:	2213      	movs	r2, #19
 8006274:	2116      	movs	r1, #22
 8006276:	f105 000c 	add.w	r0, r5, #12
 800627a:	2400      	movs	r4, #0
 800627c:	f000 fa84 	bl	8006788 <core_set_error>
 8006280:	e761      	b.n	8006146 <ai_platform_network_init+0x3a>
 8006282:	bf00      	nop
 8006284:	a1c00100 	.word	0xa1c00100
 8006288:	a1facade 	.word	0xa1facade

0800628c <ai_platform_network_post_init>:
 800628c:	b538      	push	{r3, r4, r5, lr}
 800628e:	4b16      	ldr	r3, [pc, #88]	@ (80062e8 <ai_platform_network_post_init+0x5c>)
 8006290:	6802      	ldr	r2, [r0, #0]
 8006292:	ea02 0103 	and.w	r1, r2, r3
 8006296:	4393      	bics	r3, r2
 8006298:	d108      	bne.n	80062ac <ai_platform_network_post_init+0x20>
 800629a:	6903      	ldr	r3, [r0, #16]
 800629c:	4604      	mov	r4, r0
 800629e:	f013 0502 	ands.w	r5, r3, #2
 80062a2:	d005      	beq.n	80062b0 <ai_platform_network_post_init+0x24>
 80062a4:	428a      	cmp	r2, r1
 80062a6:	d00a      	beq.n	80062be <ai_platform_network_post_init+0x32>
 80062a8:	2001      	movs	r0, #1
 80062aa:	bd38      	pop	{r3, r4, r5, pc}
 80062ac:	2000      	movs	r0, #0
 80062ae:	bd38      	pop	{r3, r4, r5, pc}
 80062b0:	2210      	movs	r2, #16
 80062b2:	2111      	movs	r1, #17
 80062b4:	300c      	adds	r0, #12
 80062b6:	f000 fa67 	bl	8006788 <core_set_error>
 80062ba:	4628      	mov	r0, r5
 80062bc:	bd38      	pop	{r3, r4, r5, pc}
 80062be:	f000 faa5 	bl	800680c <ai_layers_post_init_all>
 80062c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d0ef      	beq.n	80062a8 <ai_platform_network_post_init+0x1c>
 80062c8:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 80062ca:	e008      	b.n	80062de <ai_platform_network_post_init+0x52>
 80062cc:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 80062d0:	4798      	blx	r3
 80062d2:	692b      	ldr	r3, [r5, #16]
 80062d4:	42ab      	cmp	r3, r5
 80062d6:	461d      	mov	r5, r3
 80062d8:	d0e6      	beq.n	80062a8 <ai_platform_network_post_init+0x1c>
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d0e4      	beq.n	80062a8 <ai_platform_network_post_init+0x1c>
 80062de:	4629      	mov	r1, r5
 80062e0:	2000      	movs	r0, #0
 80062e2:	2d00      	cmp	r5, #0
 80062e4:	d1f2      	bne.n	80062cc <ai_platform_network_post_init+0x40>
 80062e6:	e7df      	b.n	80062a8 <ai_platform_network_post_init+0x1c>
 80062e8:	a1c00100 	.word	0xa1c00100

080062ec <ai_platform_network_process>:
 80062ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f0:	b085      	sub	sp, #20
 80062f2:	4bb7      	ldr	r3, [pc, #732]	@ (80065d0 <ai_platform_network_process+0x2e4>)
 80062f4:	9202      	str	r2, [sp, #8]
 80062f6:	6802      	ldr	r2, [r0, #0]
 80062f8:	4393      	bics	r3, r2
 80062fa:	f040 8142 	bne.w	8006582 <ai_platform_network_process+0x296>
 80062fe:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8006300:	4605      	mov	r5, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	f000 8126 	beq.w	8006554 <ai_platform_network_process+0x268>
 8006308:	6903      	ldr	r3, [r0, #16]
 800630a:	2200      	movs	r2, #0
 800630c:	f8d0 8034 	ldr.w	r8, [r0, #52]	@ 0x34
 8006310:	f003 0303 	and.w	r3, r3, #3
 8006314:	6182      	str	r2, [r0, #24]
 8006316:	2b03      	cmp	r3, #3
 8006318:	f040 8122 	bne.w	8006560 <ai_platform_network_process+0x274>
 800631c:	2900      	cmp	r1, #0
 800631e:	f000 8136 	beq.w	800658e <ai_platform_network_process+0x2a2>
 8006322:	fab8 f788 	clz	r7, r8
 8006326:	097f      	lsrs	r7, r7, #5
 8006328:	f1b8 0f00 	cmp.w	r8, #0
 800632c:	f000 812f 	beq.w	800658e <ai_platform_network_process+0x2a2>
 8006330:	f8b8 3000 	ldrh.w	r3, [r8]
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 812a 	beq.w	800658e <ai_platform_network_process+0x2a2>
 800633a:	698b      	ldr	r3, [r1, #24]
 800633c:	460e      	mov	r6, r1
 800633e:	9003      	str	r0, [sp, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	9301      	str	r3, [sp, #4]
 8006344:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d072      	beq.n	8006432 <ai_platform_network_process+0x146>
 800634c:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8006350:	2c00      	cmp	r4, #0
 8006352:	d06e      	beq.n	8006432 <ai_platform_network_process+0x146>
 8006354:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006358:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800635c:	f8d3 a000 	ldr.w	sl, [r3]
 8006360:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8006364:	f000 8112 	beq.w	800658c <ai_platform_network_process+0x2a0>
 8006368:	69a3      	ldr	r3, [r4, #24]
 800636a:	2101      	movs	r1, #1
 800636c:	4630      	mov	r0, r6
 800636e:	685d      	ldr	r5, [r3, #4]
 8006370:	f7ff fc72 	bl	8005c58 <ai_buffer_get_size>
 8006374:	4285      	cmp	r5, r0
 8006376:	f0c0 8115 	bcc.w	80065a4 <ai_platform_network_process+0x2b8>
 800637a:	68e0      	ldr	r0, [r4, #12]
 800637c:	69b1      	ldr	r1, [r6, #24]
 800637e:	68c2      	ldr	r2, [r0, #12]
 8006380:	68cb      	ldr	r3, [r1, #12]
 8006382:	429a      	cmp	r2, r3
 8006384:	f040 810e 	bne.w	80065a4 <ai_platform_network_process+0x2b8>
 8006388:	6882      	ldr	r2, [r0, #8]
 800638a:	688b      	ldr	r3, [r1, #8]
 800638c:	429a      	cmp	r2, r3
 800638e:	f040 8109 	bne.w	80065a4 <ai_platform_network_process+0x2b8>
 8006392:	6842      	ldr	r2, [r0, #4]
 8006394:	684b      	ldr	r3, [r1, #4]
 8006396:	429a      	cmp	r2, r3
 8006398:	f040 8104 	bne.w	80065a4 <ai_platform_network_process+0x2b8>
 800639c:	69a3      	ldr	r3, [r4, #24]
 800639e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80063a2:	f001 f817 	bl	80073d4 <ai_array_get_data_byte_size>
 80063a6:	4605      	mov	r5, r0
 80063a8:	4620      	mov	r0, r4
 80063aa:	f001 f82b 	bl	8007404 <get_tensor_byte_size>
 80063ae:	4285      	cmp	r5, r0
 80063b0:	f0c0 80f8 	bcc.w	80065a4 <ai_platform_network_process+0x2b8>
 80063b4:	69a3      	ldr	r3, [r4, #24]
 80063b6:	6818      	ldr	r0, [r3, #0]
 80063b8:	f000 ff74 	bl	80072a4 <ai_array_to_buffer_fmt>
 80063bc:	6833      	ldr	r3, [r6, #0]
 80063be:	4058      	eors	r0, r3
 80063c0:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 80063c4:	f040 81a4 	bne.w	8006710 <ai_platform_network_process+0x424>
 80063c8:	6873      	ldr	r3, [r6, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f000 80de 	beq.w	800658c <ai_platform_network_process+0x2a0>
 80063d0:	69b3      	ldr	r3, [r6, #24]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 81a4 	beq.w	8006722 <ai_platform_network_process+0x436>
 80063da:	9a01      	ldr	r2, [sp, #4]
 80063dc:	4620      	mov	r0, r4
 80063de:	3701      	adds	r7, #1
 80063e0:	361c      	adds	r6, #28
 80063e2:	429a      	cmp	r2, r3
 80063e4:	bf38      	it	cc
 80063e6:	461a      	movcc	r2, r3
 80063e8:	9201      	str	r2, [sp, #4]
 80063ea:	f001 f80b 	bl	8007404 <get_tensor_byte_size>
 80063ee:	f8c9 0008 	str.w	r0, [r9, #8]
 80063f2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	fb00 f303 	mul.w	r3, r0, r3
 80063fc:	f8c9 300c 	str.w	r3, [r9, #12]
 8006400:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8006404:	440b      	add	r3, r1
 8006406:	f8c9 1004 	str.w	r1, [r9, #4]
 800640a:	f84a 300b 	str.w	r3, [sl, fp]
 800640e:	69a0      	ldr	r0, [r4, #24]
 8006410:	6803      	ldr	r3, [r0, #0]
 8006412:	009a      	lsls	r2, r3, #2
 8006414:	f100 80af 	bmi.w	8006576 <ai_platform_network_process+0x28a>
 8006418:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800641c:	1a9b      	subs	r3, r3, r2
 800641e:	4419      	add	r1, r3
 8006420:	6081      	str	r1, [r0, #8]
 8006422:	69a3      	ldr	r3, [r4, #24]
 8006424:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8006428:	60da      	str	r2, [r3, #12]
 800642a:	f8b8 3000 	ldrh.w	r3, [r8]
 800642e:	42bb      	cmp	r3, r7
 8006430:	d888      	bhi.n	8006344 <ai_platform_network_process+0x58>
 8006432:	9d03      	ldr	r5, [sp, #12]
 8006434:	9b02      	ldr	r3, [sp, #8]
 8006436:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8006438:	2b00      	cmp	r3, #0
 800643a:	f000 817b 	beq.w	8006734 <ai_platform_network_process+0x448>
 800643e:	2a01      	cmp	r2, #1
 8006440:	f240 80bd 	bls.w	80065be <ai_platform_network_process+0x2d2>
 8006444:	f8d5 9034 	ldr.w	r9, [r5, #52]	@ 0x34
 8006448:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 80b6 	beq.w	80065be <ai_platform_network_process+0x2d2>
 8006452:	2700      	movs	r7, #0
 8006454:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006458:	9502      	str	r5, [sp, #8]
 800645a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	f000 80bd 	beq.w	80065de <ai_platform_network_process+0x2f2>
 8006464:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8006468:	2e00      	cmp	r6, #0
 800646a:	f000 80b8 	beq.w	80065de <ai_platform_network_process+0x2f2>
 800646e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8006472:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8006476:	681c      	ldr	r4, [r3, #0]
 8006478:	eb14 1807 	adds.w	r8, r4, r7, lsl #4
 800647c:	f000 8170 	beq.w	8006760 <ai_platform_network_process+0x474>
 8006480:	69b3      	ldr	r3, [r6, #24]
 8006482:	2101      	movs	r1, #1
 8006484:	4658      	mov	r0, fp
 8006486:	685d      	ldr	r5, [r3, #4]
 8006488:	f7ff fbe6 	bl	8005c58 <ai_buffer_get_size>
 800648c:	4285      	cmp	r5, r0
 800648e:	f0c0 8095 	bcc.w	80065bc <ai_platform_network_process+0x2d0>
 8006492:	68f0      	ldr	r0, [r6, #12]
 8006494:	f8db 1018 	ldr.w	r1, [fp, #24]
 8006498:	68c2      	ldr	r2, [r0, #12]
 800649a:	68cb      	ldr	r3, [r1, #12]
 800649c:	429a      	cmp	r2, r3
 800649e:	f040 808d 	bne.w	80065bc <ai_platform_network_process+0x2d0>
 80064a2:	6882      	ldr	r2, [r0, #8]
 80064a4:	688b      	ldr	r3, [r1, #8]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	f040 8088 	bne.w	80065bc <ai_platform_network_process+0x2d0>
 80064ac:	6842      	ldr	r2, [r0, #4]
 80064ae:	684b      	ldr	r3, [r1, #4]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	f040 8083 	bne.w	80065bc <ai_platform_network_process+0x2d0>
 80064b6:	69b3      	ldr	r3, [r6, #24]
 80064b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80064bc:	f000 ff8a 	bl	80073d4 <ai_array_get_data_byte_size>
 80064c0:	9003      	str	r0, [sp, #12]
 80064c2:	4630      	mov	r0, r6
 80064c4:	f000 ff9e 	bl	8007404 <get_tensor_byte_size>
 80064c8:	9b03      	ldr	r3, [sp, #12]
 80064ca:	4283      	cmp	r3, r0
 80064cc:	d376      	bcc.n	80065bc <ai_platform_network_process+0x2d0>
 80064ce:	69b3      	ldr	r3, [r6, #24]
 80064d0:	6818      	ldr	r0, [r3, #0]
 80064d2:	f000 fee7 	bl	80072a4 <ai_array_to_buffer_fmt>
 80064d6:	f8db 3000 	ldr.w	r3, [fp]
 80064da:	4058      	eors	r0, r3
 80064dc:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 80064e0:	f040 812c 	bne.w	800673c <ai_platform_network_process+0x450>
 80064e4:	f8db 3004 	ldr.w	r3, [fp, #4]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f000 8139 	beq.w	8006760 <ai_platform_network_process+0x474>
 80064ee:	f8db 3018 	ldr.w	r3, [fp, #24]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 812a 	beq.w	800674e <ai_platform_network_process+0x462>
 80064fa:	9a01      	ldr	r2, [sp, #4]
 80064fc:	4630      	mov	r0, r6
 80064fe:	3701      	adds	r7, #1
 8006500:	f10b 0b1c 	add.w	fp, fp, #28
 8006504:	429a      	cmp	r2, r3
 8006506:	bf38      	it	cc
 8006508:	461a      	movcc	r2, r3
 800650a:	9201      	str	r2, [sp, #4]
 800650c:	f000 ff7a 	bl	8007404 <get_tensor_byte_size>
 8006510:	f8c8 0008 	str.w	r0, [r8, #8]
 8006514:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	fb00 f303 	mul.w	r3, r0, r3
 800651e:	f8c8 300c 	str.w	r3, [r8, #12]
 8006522:	f85b 1c18 	ldr.w	r1, [fp, #-24]
 8006526:	440b      	add	r3, r1
 8006528:	f8c8 1004 	str.w	r1, [r8, #4]
 800652c:	f844 300a 	str.w	r3, [r4, sl]
 8006530:	69b0      	ldr	r0, [r6, #24]
 8006532:	6803      	ldr	r3, [r0, #0]
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	d44d      	bmi.n	80065d4 <ai_platform_network_process+0x2e8>
 8006538:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800653c:	1a9b      	subs	r3, r3, r2
 800653e:	4419      	add	r1, r3
 8006540:	6081      	str	r1, [r0, #8]
 8006542:	69b3      	ldr	r3, [r6, #24]
 8006544:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006548:	60da      	str	r2, [r3, #12]
 800654a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800654e:	42bb      	cmp	r3, r7
 8006550:	d883      	bhi.n	800645a <ai_platform_network_process+0x16e>
 8006552:	e044      	b.n	80065de <ai_platform_network_process+0x2f2>
 8006554:	6902      	ldr	r2, [r0, #16]
 8006556:	6183      	str	r3, [r0, #24]
 8006558:	f002 0203 	and.w	r2, r2, #3
 800655c:	2a03      	cmp	r2, #3
 800655e:	d016      	beq.n	800658e <ai_platform_network_process+0x2a2>
 8006560:	2230      	movs	r2, #48	@ 0x30
 8006562:	2111      	movs	r1, #17
 8006564:	f105 000c 	add.w	r0, r5, #12
 8006568:	2400      	movs	r4, #0
 800656a:	f000 f90d 	bl	8006788 <core_set_error>
 800656e:	4620      	mov	r0, r4
 8006570:	b005      	add	sp, #20
 8006572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006576:	f8b8 3000 	ldrh.w	r3, [r8]
 800657a:	429f      	cmp	r7, r3
 800657c:	f4ff aee2 	bcc.w	8006344 <ai_platform_network_process+0x58>
 8006580:	e757      	b.n	8006432 <ai_platform_network_process+0x146>
 8006582:	2400      	movs	r4, #0
 8006584:	4620      	mov	r0, r4
 8006586:	b005      	add	sp, #20
 8006588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800658c:	9d03      	ldr	r5, [sp, #12]
 800658e:	2400      	movs	r4, #0
 8006590:	2217      	movs	r2, #23
 8006592:	2112      	movs	r1, #18
 8006594:	f105 000c 	add.w	r0, r5, #12
 8006598:	f000 f8f6 	bl	8006788 <core_set_error>
 800659c:	4620      	mov	r0, r4
 800659e:	b005      	add	sp, #20
 80065a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a4:	9d03      	ldr	r5, [sp, #12]
 80065a6:	2400      	movs	r4, #0
 80065a8:	2218      	movs	r2, #24
 80065aa:	2112      	movs	r1, #18
 80065ac:	f105 000c 	add.w	r0, r5, #12
 80065b0:	f000 f8ea 	bl	8006788 <core_set_error>
 80065b4:	4620      	mov	r0, r4
 80065b6:	b005      	add	sp, #20
 80065b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065bc:	9d02      	ldr	r5, [sp, #8]
 80065be:	2218      	movs	r2, #24
 80065c0:	2113      	movs	r1, #19
 80065c2:	f105 000c 	add.w	r0, r5, #12
 80065c6:	2400      	movs	r4, #0
 80065c8:	f000 f8de 	bl	8006788 <core_set_error>
 80065cc:	e7cf      	b.n	800656e <ai_platform_network_process+0x282>
 80065ce:	bf00      	nop
 80065d0:	a1c00100 	.word	0xa1c00100
 80065d4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80065d8:	429f      	cmp	r7, r3
 80065da:	f4ff af3e 	bcc.w	800645a <ai_platform_network_process+0x16e>
 80065de:	9d02      	ldr	r5, [sp, #8]
 80065e0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80065e4:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 80065e6:	832b      	strh	r3, [r5, #24]
 80065e8:	2a00      	cmp	r2, #0
 80065ea:	f040 808b 	bne.w	8006704 <ai_platform_network_process+0x418>
 80065ee:	4616      	mov	r6, r2
 80065f0:	4617      	mov	r7, r2
 80065f2:	8b6c      	ldrh	r4, [r5, #26]
 80065f4:	429c      	cmp	r4, r3
 80065f6:	d2ba      	bcs.n	800656e <ai_platform_network_process+0x282>
 80065f8:	46ab      	mov	fp, r5
 80065fa:	2e00      	cmp	r6, #0
 80065fc:	d030      	beq.n	8006660 <ai_platform_network_process+0x374>
 80065fe:	f04f 0800 	mov.w	r8, #0
 8006602:	e014      	b.n	800662e <ai_platform_network_process+0x342>
 8006604:	6882      	ldr	r2, [r0, #8]
 8006606:	68c5      	ldr	r5, [r0, #12]
 8006608:	6863      	ldr	r3, [r4, #4]
 800660a:	1b52      	subs	r2, r2, r5
 800660c:	4413      	add	r3, r2
 800660e:	6083      	str	r3, [r0, #8]
 8006610:	698b      	ldr	r3, [r1, #24]
 8006612:	6862      	ldr	r2, [r4, #4]
 8006614:	60da      	str	r2, [r3, #12]
 8006616:	f859 200a 	ldr.w	r2, [r9, sl]
 800661a:	f108 0801 	add.w	r8, r8, #1
 800661e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8006622:	440b      	add	r3, r1
 8006624:	4293      	cmp	r3, r2
 8006626:	d301      	bcc.n	800662c <ai_platform_network_process+0x340>
 8006628:	68e3      	ldr	r3, [r4, #12]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	6063      	str	r3, [r4, #4]
 800662e:	8833      	ldrh	r3, [r6, #0]
 8006630:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8006634:	4543      	cmp	r3, r8
 8006636:	d913      	bls.n	8006660 <ai_platform_network_process+0x374>
 8006638:	6873      	ldr	r3, [r6, #4]
 800663a:	b18b      	cbz	r3, 8006660 <ai_platform_network_process+0x374>
 800663c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8006640:	b171      	cbz	r1, 8006660 <ai_platform_network_process+0x374>
 8006642:	6988      	ldr	r0, [r1, #24]
 8006644:	68b2      	ldr	r2, [r6, #8]
 8006646:	6803      	ldr	r3, [r0, #0]
 8006648:	f8d2 9000 	ldr.w	r9, [r2]
 800664c:	009d      	lsls	r5, r3, #2
 800664e:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8006652:	d5d7      	bpl.n	8006604 <ai_platform_network_process+0x318>
 8006654:	6881      	ldr	r1, [r0, #8]
 8006656:	68a2      	ldr	r2, [r4, #8]
 8006658:	6860      	ldr	r0, [r4, #4]
 800665a:	f000 fd9b 	bl	8007194 <st_int8_copy>
 800665e:	e7da      	b.n	8006616 <ai_platform_network_process+0x32a>
 8006660:	4658      	mov	r0, fp
 8006662:	f000 f8e7 	bl	8006834 <ai_layers_forward_all>
 8006666:	2f00      	cmp	r7, #0
 8006668:	d03d      	beq.n	80066e6 <ai_platform_network_process+0x3fa>
 800666a:	2400      	movs	r4, #0
 800666c:	e016      	b.n	800669c <ai_platform_network_process+0x3b0>
 800666e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8006672:	f859 100a 	ldr.w	r1, [r9, sl]
 8006676:	4413      	add	r3, r2
 8006678:	428b      	cmp	r3, r1
 800667a:	d302      	bcc.n	8006682 <ai_platform_network_process+0x396>
 800667c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006680:	1acb      	subs	r3, r1, r3
 8006682:	f8c8 3004 	str.w	r3, [r8, #4]
 8006686:	6981      	ldr	r1, [r0, #24]
 8006688:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800668c:	1b52      	subs	r2, r2, r5
 800668e:	4413      	add	r3, r2
 8006690:	608b      	str	r3, [r1, #8]
 8006692:	6983      	ldr	r3, [r0, #24]
 8006694:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006698:	60da      	str	r2, [r3, #12]
 800669a:	3401      	adds	r4, #1
 800669c:	883b      	ldrh	r3, [r7, #0]
 800669e:	42a3      	cmp	r3, r4
 80066a0:	d921      	bls.n	80066e6 <ai_platform_network_process+0x3fa>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	b1fb      	cbz	r3, 80066e6 <ai_platform_network_process+0x3fa>
 80066a6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80066aa:	b1e0      	cbz	r0, 80066e6 <ai_platform_network_process+0x3fa>
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 80066b2:	6983      	ldr	r3, [r0, #24]
 80066b4:	f8d2 9000 	ldr.w	r9, [r2]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 80066be:	0092      	lsls	r2, r2, #2
 80066c0:	d5d5      	bpl.n	800666e <ai_platform_network_process+0x382>
 80066c2:	6898      	ldr	r0, [r3, #8]
 80066c4:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 80066c8:	f000 fd64 	bl	8007194 <st_int8_copy>
 80066cc:	f859 200a 	ldr.w	r2, [r9, sl]
 80066d0:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 80066d4:	440b      	add	r3, r1
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d302      	bcc.n	80066e0 <ai_platform_network_process+0x3f4>
 80066da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	f8c8 3004 	str.w	r3, [r8, #4]
 80066e4:	e7d9      	b.n	800669a <ai_platform_network_process+0x3ae>
 80066e6:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 80066ea:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 80066ee:	3401      	adds	r4, #1
 80066f0:	b2a4      	uxth	r4, r4
 80066f2:	42a3      	cmp	r3, r4
 80066f4:	f8ab 401a 	strh.w	r4, [fp, #26]
 80066f8:	f63f af7f 	bhi.w	80065fa <ai_platform_network_process+0x30e>
 80066fc:	4620      	mov	r0, r4
 80066fe:	b005      	add	sp, #20
 8006700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006704:	2a01      	cmp	r2, #1
 8006706:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 8006708:	d033      	beq.n	8006772 <ai_platform_network_process+0x486>
 800670a:	f106 070c 	add.w	r7, r6, #12
 800670e:	e770      	b.n	80065f2 <ai_platform_network_process+0x306>
 8006710:	9d03      	ldr	r5, [sp, #12]
 8006712:	2219      	movs	r2, #25
 8006714:	2112      	movs	r1, #18
 8006716:	2400      	movs	r4, #0
 8006718:	f105 000c 	add.w	r0, r5, #12
 800671c:	f000 f834 	bl	8006788 <core_set_error>
 8006720:	e725      	b.n	800656e <ai_platform_network_process+0x282>
 8006722:	9d03      	ldr	r5, [sp, #12]
 8006724:	4604      	mov	r4, r0
 8006726:	2221      	movs	r2, #33	@ 0x21
 8006728:	2112      	movs	r1, #18
 800672a:	f105 000c 	add.w	r0, r5, #12
 800672e:	f000 f82b 	bl	8006788 <core_set_error>
 8006732:	e71c      	b.n	800656e <ai_platform_network_process+0x282>
 8006734:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006738:	832b      	strh	r3, [r5, #24]
 800673a:	e755      	b.n	80065e8 <ai_platform_network_process+0x2fc>
 800673c:	9d02      	ldr	r5, [sp, #8]
 800673e:	2219      	movs	r2, #25
 8006740:	2113      	movs	r1, #19
 8006742:	2400      	movs	r4, #0
 8006744:	f105 000c 	add.w	r0, r5, #12
 8006748:	f000 f81e 	bl	8006788 <core_set_error>
 800674c:	e70f      	b.n	800656e <ai_platform_network_process+0x282>
 800674e:	9d02      	ldr	r5, [sp, #8]
 8006750:	4604      	mov	r4, r0
 8006752:	2221      	movs	r2, #33	@ 0x21
 8006754:	2113      	movs	r1, #19
 8006756:	f105 000c 	add.w	r0, r5, #12
 800675a:	f000 f815 	bl	8006788 <core_set_error>
 800675e:	e706      	b.n	800656e <ai_platform_network_process+0x282>
 8006760:	9d02      	ldr	r5, [sp, #8]
 8006762:	2217      	movs	r2, #23
 8006764:	2113      	movs	r1, #19
 8006766:	2400      	movs	r4, #0
 8006768:	f105 000c 	add.w	r0, r5, #12
 800676c:	f000 f80c 	bl	8006788 <core_set_error>
 8006770:	e6fd      	b.n	800656e <ai_platform_network_process+0x282>
 8006772:	2700      	movs	r7, #0
 8006774:	e73d      	b.n	80065f2 <ai_platform_network_process+0x306>
 8006776:	bf00      	nop

08006778 <core_init>:
 8006778:	2001      	movs	r0, #1
 800677a:	4770      	bx	lr

0800677c <core_get_error>:
 800677c:	4603      	mov	r3, r0
 800677e:	2200      	movs	r2, #0
 8006780:	6800      	ldr	r0, [r0, #0]
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop

08006788 <core_set_error>:
 8006788:	4603      	mov	r3, r0
 800678a:	7800      	ldrb	r0, [r0, #0]
 800678c:	b108      	cbz	r0, 8006792 <core_set_error+0xa>
 800678e:	2000      	movs	r0, #0
 8006790:	4770      	bx	lr
 8006792:	7019      	strb	r1, [r3, #0]
 8006794:	2001      	movs	r0, #1
 8006796:	6819      	ldr	r1, [r3, #0]
 8006798:	f362 211f 	bfi	r1, r2, #8, #24
 800679c:	6019      	str	r1, [r3, #0]
 800679e:	4770      	bx	lr

080067a0 <ai_check_custom_types>:
 80067a0:	b082      	sub	sp, #8
 80067a2:	4b12      	ldr	r3, [pc, #72]	@ (80067ec <ai_check_custom_types+0x4c>)
 80067a4:	9301      	str	r3, [sp, #4]
 80067a6:	b118      	cbz	r0, 80067b0 <ai_check_custom_types+0x10>
 80067a8:	7803      	ldrb	r3, [r0, #0]
 80067aa:	2b03      	cmp	r3, #3
 80067ac:	d002      	beq.n	80067b4 <ai_check_custom_types+0x14>
 80067ae:	2000      	movs	r0, #0
 80067b0:	b002      	add	sp, #8
 80067b2:	4770      	bx	lr
 80067b4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d004      	beq.n	80067c6 <ai_check_custom_types+0x26>
 80067bc:	2001      	movs	r0, #1
 80067be:	f080 0001 	eor.w	r0, r0, #1
 80067c2:	b002      	add	sp, #8
 80067c4:	4770      	bx	lr
 80067c6:	7842      	ldrb	r2, [r0, #1]
 80067c8:	3001      	adds	r0, #1
 80067ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d1f4      	bne.n	80067bc <ai_check_custom_types+0x1c>
 80067d2:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80067d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d1ee      	bne.n	80067bc <ai_check_custom_types+0x1c>
 80067de:	7842      	ldrb	r2, [r0, #1]
 80067e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d1e9      	bne.n	80067bc <ai_check_custom_types+0x1c>
 80067e8:	2000      	movs	r0, #0
 80067ea:	e7e8      	b.n	80067be <ai_check_custom_types+0x1e>
 80067ec:	84048403 	.word	0x84048403

080067f0 <ai_layers_init_all>:
 80067f0:	2100      	movs	r1, #0
 80067f2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80067f4:	b13b      	cbz	r3, 8006806 <ai_layers_init_all+0x16>
 80067f6:	691a      	ldr	r2, [r3, #16]
 80067f8:	3101      	adds	r1, #1
 80067fa:	60d8      	str	r0, [r3, #12]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	4613      	mov	r3, r2
 8006800:	d001      	beq.n	8006806 <ai_layers_init_all+0x16>
 8006802:	2a00      	cmp	r2, #0
 8006804:	d1f6      	bne.n	80067f4 <ai_layers_init_all+0x4>
 8006806:	4608      	mov	r0, r1
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop

0800680c <ai_layers_post_init_all>:
 800680c:	b538      	push	{r3, r4, r5, lr}
 800680e:	2500      	movs	r5, #0
 8006810:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8006812:	b16c      	cbz	r4, 8006830 <ai_layers_post_init_all+0x24>
 8006814:	6863      	ldr	r3, [r4, #4]
 8006816:	07db      	lsls	r3, r3, #31
 8006818:	d504      	bpl.n	8006824 <ai_layers_post_init_all+0x18>
 800681a:	6a23      	ldr	r3, [r4, #32]
 800681c:	4620      	mov	r0, r4
 800681e:	b10b      	cbz	r3, 8006824 <ai_layers_post_init_all+0x18>
 8006820:	3501      	adds	r5, #1
 8006822:	4798      	blx	r3
 8006824:	6923      	ldr	r3, [r4, #16]
 8006826:	42a3      	cmp	r3, r4
 8006828:	461c      	mov	r4, r3
 800682a:	d001      	beq.n	8006830 <ai_layers_post_init_all+0x24>
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1f0      	bne.n	8006812 <ai_layers_post_init_all+0x6>
 8006830:	4628      	mov	r0, r5
 8006832:	bd38      	pop	{r3, r4, r5, pc}

08006834 <ai_layers_forward_all>:
 8006834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006838:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 800683c:	4604      	mov	r4, r0
 800683e:	f1b8 0f00 	cmp.w	r8, #0
 8006842:	d02a      	beq.n	800689a <ai_layers_forward_all+0x66>
 8006844:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8006846:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8006848:	b319      	cbz	r1, 8006892 <ai_layers_forward_all+0x5e>
 800684a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800684c:	2001      	movs	r0, #1
 800684e:	47c0      	blx	r8
 8006850:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8006852:	b1f6      	cbz	r6, 8006892 <ai_layers_forward_all+0x5e>
 8006854:	2700      	movs	r7, #0
 8006856:	4631      	mov	r1, r6
 8006858:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800685a:	2002      	movs	r0, #2
 800685c:	47c0      	blx	r8
 800685e:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8006860:	4628      	mov	r0, r5
 8006862:	696b      	ldr	r3, [r5, #20]
 8006864:	4798      	blx	r3
 8006866:	692e      	ldr	r6, [r5, #16]
 8006868:	2003      	movs	r0, #3
 800686a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800686c:	42b5      	cmp	r5, r6
 800686e:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8006870:	d007      	beq.n	8006882 <ai_layers_forward_all+0x4e>
 8006872:	47c0      	blx	r8
 8006874:	3701      	adds	r7, #1
 8006876:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8006878:	2e00      	cmp	r6, #0
 800687a:	d1ec      	bne.n	8006856 <ai_layers_forward_all+0x22>
 800687c:	4638      	mov	r0, r7
 800687e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006882:	2003      	movs	r0, #3
 8006884:	3701      	adds	r7, #1
 8006886:	47c0      	blx	r8
 8006888:	2300      	movs	r3, #0
 800688a:	4638      	mov	r0, r7
 800688c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800688e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006892:	2700      	movs	r7, #0
 8006894:	4638      	mov	r0, r7
 8006896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800689a:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 800689c:	63c5      	str	r5, [r0, #60]	@ 0x3c
 800689e:	2d00      	cmp	r5, #0
 80068a0:	d0f7      	beq.n	8006892 <ai_layers_forward_all+0x5e>
 80068a2:	4647      	mov	r7, r8
 80068a4:	696b      	ldr	r3, [r5, #20]
 80068a6:	4628      	mov	r0, r5
 80068a8:	4798      	blx	r3
 80068aa:	462b      	mov	r3, r5
 80068ac:	692d      	ldr	r5, [r5, #16]
 80068ae:	429d      	cmp	r5, r3
 80068b0:	d004      	beq.n	80068bc <ai_layers_forward_all+0x88>
 80068b2:	3701      	adds	r7, #1
 80068b4:	63e5      	str	r5, [r4, #60]	@ 0x3c
 80068b6:	2d00      	cmp	r5, #0
 80068b8:	d1f4      	bne.n	80068a4 <ai_layers_forward_all+0x70>
 80068ba:	e7df      	b.n	800687c <ai_layers_forward_all+0x48>
 80068bc:	2300      	movs	r3, #0
 80068be:	3701      	adds	r7, #1
 80068c0:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80068c2:	e7db      	b.n	800687c <ai_layers_forward_all+0x48>

080068c4 <forward_dense>:
 80068c4:	6983      	ldr	r3, [r0, #24]
 80068c6:	881a      	ldrh	r2, [r3, #0]
 80068c8:	2a00      	cmp	r2, #0
 80068ca:	f000 80cb 	beq.w	8006a64 <forward_dense+0x1a0>
 80068ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d2:	ed2d 8b02 	vpush	{d8}
 80068d6:	6858      	ldr	r0, [r3, #4]
 80068d8:	b09b      	sub	sp, #108	@ 0x6c
 80068da:	6844      	ldr	r4, [r0, #4]
 80068dc:	b104      	cbz	r4, 80068e0 <forward_dense+0x1c>
 80068de:	6824      	ldr	r4, [r4, #0]
 80068e0:	2a01      	cmp	r2, #1
 80068e2:	f000 81d8 	beq.w	8006c96 <forward_dense+0x3d2>
 80068e6:	6905      	ldr	r5, [r0, #16]
 80068e8:	b105      	cbz	r5, 80068ec <forward_dense+0x28>
 80068ea:	682d      	ldr	r5, [r5, #0]
 80068ec:	2a02      	cmp	r2, #2
 80068ee:	f000 80bb 	beq.w	8006a68 <forward_dense+0x1a4>
 80068f2:	69c3      	ldr	r3, [r0, #28]
 80068f4:	9308      	str	r3, [sp, #32]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f000 81c4 	beq.w	8006c84 <forward_dense+0x3c0>
 80068fc:	4619      	mov	r1, r3
 80068fe:	8b03      	ldrh	r3, [r0, #24]
 8006900:	6809      	ldr	r1, [r1, #0]
 8006902:	2b01      	cmp	r3, #1
 8006904:	910a      	str	r1, [sp, #40]	@ 0x28
 8006906:	f240 81bf 	bls.w	8006c88 <forward_dense+0x3c4>
 800690a:	9b08      	ldr	r3, [sp, #32]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	9308      	str	r3, [sp, #32]
 8006910:	460b      	mov	r3, r1
 8006912:	f8d3 9018 	ldr.w	r9, [r3, #24]
 8006916:	2a03      	cmp	r2, #3
 8006918:	68e3      	ldr	r3, [r4, #12]
 800691a:	68ee      	ldr	r6, [r5, #12]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	6877      	ldr	r7, [r6, #4]
 8006920:	9310      	str	r3, [sp, #64]	@ 0x40
 8006922:	f8d9 3000 	ldr.w	r3, [r9]
 8006926:	4639      	mov	r1, r7
 8006928:	970f      	str	r7, [sp, #60]	@ 0x3c
 800692a:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800692e:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 8006932:	e9d6 7602 	ldrd	r7, r6, [r6, #8]
 8006936:	fb01 f707 	mul.w	r7, r1, r7
 800693a:	fa4e f10c 	asr.w	r1, lr, ip
 800693e:	910d      	str	r1, [sp, #52]	@ 0x34
 8006940:	f000 81a6 	beq.w	8006c90 <forward_dense+0x3cc>
 8006944:	f8d0 8028 	ldr.w	r8, [r0, #40]	@ 0x28
 8006948:	f1b8 0f00 	cmp.w	r8, #0
 800694c:	d006      	beq.n	800695c <forward_dense+0x98>
 800694e:	f8d8 8000 	ldr.w	r8, [r8]
 8006952:	f1b8 0f00 	cmp.w	r8, #0
 8006956:	d001      	beq.n	800695c <forward_dense+0x98>
 8006958:	f8d8 8018 	ldr.w	r8, [r8, #24]
 800695c:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8006960:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 8006964:	fa42 f303 	asr.w	r3, r2, r3
 8006968:	07db      	lsls	r3, r3, #31
 800696a:	f140 8178 	bpl.w	8006c5e <forward_dense+0x39a>
 800696e:	f04f 0900 	mov.w	r9, #0
 8006972:	69a3      	ldr	r3, [r4, #24]
 8006974:	fb07 f606 	mul.w	r6, r7, r6
 8006978:	69aa      	ldr	r2, [r5, #24]
 800697a:	6891      	ldr	r1, [r2, #8]
 800697c:	689a      	ldr	r2, [r3, #8]
 800697e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006980:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8006984:	9102      	str	r1, [sp, #8]
 8006986:	695b      	ldr	r3, [r3, #20]
 8006988:	4281      	cmp	r1, r0
 800698a:	900b      	str	r0, [sp, #44]	@ 0x2c
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	9303      	str	r3, [sp, #12]
 8006990:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006992:	ea4f 0483 	mov.w	r4, r3, lsl #2
 8006996:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 800699a:	9409      	str	r4, [sp, #36]	@ 0x24
 800699c:	d25d      	bcs.n	8006a5a <forward_dense+0x196>
 800699e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80069a0:	4693      	mov	fp, r2
 80069a2:	464c      	mov	r4, r9
 80069a4:	ed9f 8abd 	vldr	s16, [pc, #756]	@ 8006c9c <forward_dense+0x3d8>
 80069a8:	08d9      	lsrs	r1, r3, #3
 80069aa:	46c1      	mov	r9, r8
 80069ac:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
 80069b0:	461a      	mov	r2, r3
 80069b2:	f023 0301 	bic.w	r3, r3, #1
 80069b6:	9104      	str	r1, [sp, #16]
 80069b8:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 80069bc:	9301      	str	r3, [sp, #4]
 80069be:	014b      	lsls	r3, r1, #5
 80069c0:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 80069c4:	9311      	str	r3, [sp, #68]	@ 0x44
 80069c6:	0093      	lsls	r3, r2, #2
 80069c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80069ca:	f002 0301 	and.w	r3, r2, #1
 80069ce:	9305      	str	r3, [sp, #20]
 80069d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	f8d3 c008 	ldr.w	ip, [r3, #8]
 80069d8:	9b08      	ldr	r3, [sp, #32]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d04a      	beq.n	8006a74 <forward_dense+0x1b0>
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	689d      	ldr	r5, [r3, #8]
 80069e2:	2c00      	cmp	r4, #0
 80069e4:	d049      	beq.n	8006a7a <forward_dense+0x1b6>
 80069e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069e8:	2b04      	cmp	r3, #4
 80069ea:	9b02      	ldr	r3, [sp, #8]
 80069ec:	d058      	beq.n	8006aa0 <forward_dense+0x1dc>
 80069ee:	4599      	cmp	r9, r3
 80069f0:	d927      	bls.n	8006a42 <forward_dense+0x17e>
 80069f2:	4618      	mov	r0, r3
 80069f4:	9e03      	ldr	r6, [sp, #12]
 80069f6:	2d00      	cmp	r5, #0
 80069f8:	d039      	beq.n	8006a6e <forward_dense+0x1aa>
 80069fa:	ecb5 6a01 	vldmia	r5!, {s12}
 80069fe:	45da      	cmp	sl, fp
 8006a00:	d911      	bls.n	8006a26 <forward_dense+0x162>
 8006a02:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8006c9c <forward_dense+0x3d8>
 8006a06:	465a      	mov	r2, fp
 8006a08:	4661      	mov	r1, ip
 8006a0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a0e:	ecb2 7a01 	vldmia	r2!, {s14}
 8006a12:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006a16:	4592      	cmp	sl, r2
 8006a18:	edd3 6a00 	vldr	s13, [r3]
 8006a1c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006a20:	d8f3      	bhi.n	8006a0a <forward_dense+0x146>
 8006a22:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006a26:	eca0 6a01 	vstmia	r0!, {s12}
 8006a2a:	4548      	cmp	r0, r9
 8006a2c:	44b4      	add	ip, r6
 8006a2e:	d3e2      	bcc.n	80069f6 <forward_dense+0x132>
 8006a30:	9a02      	ldr	r2, [sp, #8]
 8006a32:	eba9 0302 	sub.w	r3, r9, r2
 8006a36:	3b01      	subs	r3, #1
 8006a38:	f023 0303 	bic.w	r3, r3, #3
 8006a3c:	3304      	adds	r3, #4
 8006a3e:	18d3      	adds	r3, r2, r3
 8006a40:	9302      	str	r3, [sp, #8]
 8006a42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a44:	9a01      	ldr	r2, [sp, #4]
 8006a46:	4499      	add	r9, r3
 8006a48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006a4a:	441a      	add	r2, r3
 8006a4c:	449a      	add	sl, r3
 8006a4e:	449b      	add	fp, r3
 8006a50:	9b02      	ldr	r3, [sp, #8]
 8006a52:	9201      	str	r2, [sp, #4]
 8006a54:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d3ba      	bcc.n	80069d0 <forward_dense+0x10c>
 8006a5a:	b01b      	add	sp, #108	@ 0x6c
 8006a5c:	ecbd 8b02 	vpop	{d8}
 8006a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a64:	6853      	ldr	r3, [r2, #4]
 8006a66:	deff      	udf	#255	@ 0xff
 8006a68:	2300      	movs	r3, #0
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	deff      	udf	#255	@ 0xff
 8006a6e:	ed9f 6a8b 	vldr	s12, [pc, #556]	@ 8006c9c <forward_dense+0x3d8>
 8006a72:	e7c4      	b.n	80069fe <forward_dense+0x13a>
 8006a74:	461d      	mov	r5, r3
 8006a76:	2c00      	cmp	r4, #0
 8006a78:	d1b5      	bne.n	80069e6 <forward_dense+0x122>
 8006a7a:	9b02      	ldr	r3, [sp, #8]
 8006a7c:	a813      	add	r0, sp, #76	@ 0x4c
 8006a7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a80:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a82:	4413      	add	r3, r2
 8006a84:	f8cd b050 	str.w	fp, [sp, #80]	@ 0x50
 8006a88:	9302      	str	r3, [sp, #8]
 8006a8a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006a8c:	9317      	str	r3, [sp, #92]	@ 0x5c
 8006a8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a90:	9318      	str	r3, [sp, #96]	@ 0x60
 8006a92:	2301      	movs	r3, #1
 8006a94:	e9cd c515 	strd	ip, r5, [sp, #84]	@ 0x54
 8006a98:	9319      	str	r3, [sp, #100]	@ 0x64
 8006a9a:	f000 fa1d 	bl	8006ed8 <forward_lite_dense_if32of32wf32>
 8006a9e:	e7d0      	b.n	8006a42 <forward_dense+0x17e>
 8006aa0:	4599      	cmp	r9, r3
 8006aa2:	d9ce      	bls.n	8006a42 <forward_dense+0x17e>
 8006aa4:	9a04      	ldr	r2, [sp, #16]
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	1c57      	adds	r7, r2, #1
 8006aaa:	9b01      	ldr	r3, [sp, #4]
 8006aac:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	eb0c 0787 	add.w	r7, ip, r7, lsl #2
 8006ab4:	4452      	add	r2, sl
 8006ab6:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
 8006aba:	9307      	str	r3, [sp, #28]
 8006abc:	9206      	str	r2, [sp, #24]
 8006abe:	2d00      	cmp	r5, #0
 8006ac0:	f000 80c2 	beq.w	8006c48 <forward_dense+0x384>
 8006ac4:	9b04      	ldr	r3, [sp, #16]
 8006ac6:	ecf5 2a01 	vldmia	r5!, {s5}
 8006aca:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8006c9c <forward_dense+0x3d8>
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f000 80c2 	beq.w	8006c58 <forward_dense+0x394>
 8006ad4:	f10c 0204 	add.w	r2, ip, #4
 8006ad8:	f10b 0320 	add.w	r3, fp, #32
 8006adc:	f812 6c04 	ldrb.w	r6, [r2, #-4]
 8006ae0:	3204      	adds	r2, #4
 8006ae2:	ed13 2a07 	vldr	s4, [r3, #-28]	@ 0xffffffe4
 8006ae6:	3320      	adds	r3, #32
 8006ae8:	f006 0e0f 	and.w	lr, r6, #15
 8006aec:	0936      	lsrs	r6, r6, #4
 8006aee:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 8006af2:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8006af6:	ed13 4a10 	vldr	s8, [r3, #-64]	@ 0xffffffc0
 8006afa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006afe:	ed53 3a0e 	vldr	s7, [r3, #-56]	@ 0xffffffc8
 8006b02:	edde 7a00 	vldr	s15, [lr]
 8006b06:	ed96 3a00 	vldr	s6, [r6]
 8006b0a:	0906      	lsrs	r6, r0, #4
 8006b0c:	ee67 7a82 	vmul.f32	s15, s15, s4
 8006b10:	f000 000f 	and.w	r0, r0, #15
 8006b14:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006b18:	f812 1c06 	ldrb.w	r1, [r2, #-6]
 8006b1c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8006b20:	ed13 5a0d 	vldr	s10, [r3, #-52]	@ 0xffffffcc
 8006b24:	eee3 7a04 	vfma.f32	s15, s6, s8
 8006b28:	ed96 3a00 	vldr	s6, [r6]
 8006b2c:	ed90 4a00 	vldr	s8, [r0]
 8006b30:	0908      	lsrs	r0, r1, #4
 8006b32:	ed53 4a0c 	vldr	s9, [r3, #-48]	@ 0xffffffd0
 8006b36:	f001 010f 	and.w	r1, r1, #15
 8006b3a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8006b3e:	ed13 6a0b 	vldr	s12, [r3, #-44]	@ 0xffffffd4
 8006b42:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006b46:	ed53 5a0a 	vldr	s11, [r3, #-40]	@ 0xffffffd8
 8006b4a:	ed53 6a09 	vldr	s13, [r3, #-36]	@ 0xffffffdc
 8006b4e:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006b52:	eee4 7a05 	vfma.f32	s15, s8, s10
 8006b56:	ed90 4a00 	vldr	s8, [r0]
 8006b5a:	ed91 5a00 	vldr	s10, [r1]
 8006b5e:	f812 1c05 	ldrb.w	r1, [r2, #-5]
 8006b62:	42ba      	cmp	r2, r7
 8006b64:	ea4f 1011 	mov.w	r0, r1, lsr #4
 8006b68:	f001 010f 	and.w	r1, r1, #15
 8006b6c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006b70:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8006b74:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006b78:	eee5 7a06 	vfma.f32	s15, s10, s12
 8006b7c:	ed90 5a00 	vldr	s10, [r0]
 8006b80:	ed91 6a00 	vldr	s12, [r1]
 8006b84:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006b88:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006b8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b90:	d1a4      	bne.n	8006adc <forward_dense+0x218>
 8006b92:	f1a7 0804 	sub.w	r8, r7, #4
 8006b96:	f8dd e018 	ldr.w	lr, [sp, #24]
 8006b9a:	9b01      	ldr	r3, [sp, #4]
 8006b9c:	459e      	cmp	lr, r3
 8006b9e:	d229      	bcs.n	8006bf4 <forward_dense+0x330>
 8006ba0:	9b07      	ldr	r3, [sp, #28]
 8006ba2:	f10e 0208 	add.w	r2, lr, #8
 8006ba6:	f108 30ff 	add.w	r0, r8, #4294967295
 8006baa:	eba3 060e 	sub.w	r6, r3, lr
 8006bae:	ea4f 0ad6 	mov.w	sl, r6, lsr #3
 8006bb2:	eb08 06d6 	add.w	r6, r8, r6, lsr #3
 8006bb6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8006bba:	3208      	adds	r2, #8
 8006bbc:	ed52 5a03 	vldr	s11, [r2, #-12]
 8006bc0:	f003 010f 	and.w	r1, r3, #15
 8006bc4:	091b      	lsrs	r3, r3, #4
 8006bc6:	ed52 6a04 	vldr	s13, [r2, #-16]
 8006bca:	42b0      	cmp	r0, r6
 8006bcc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006bd0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006bd4:	edd1 7a00 	vldr	s15, [r1]
 8006bd8:	ed93 6a00 	vldr	s12, [r3]
 8006bdc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006be0:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006be4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006be8:	d1e5      	bne.n	8006bb6 <forward_dense+0x2f2>
 8006bea:	f10a 0a01 	add.w	sl, sl, #1
 8006bee:	44d0      	add	r8, sl
 8006bf0:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8006bf4:	9b05      	ldr	r3, [sp, #20]
 8006bf6:	b1cb      	cbz	r3, 8006c2c <forward_dense+0x368>
 8006bf8:	f898 3000 	ldrb.w	r3, [r8]
 8006bfc:	edde 7a00 	vldr	s15, [lr]
 8006c00:	091b      	lsrs	r3, r3, #4
 8006c02:	9a03      	ldr	r2, [sp, #12]
 8006c04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006c08:	4494      	add	ip, r2
 8006c0a:	4417      	add	r7, r2
 8006c0c:	edd3 6a00 	vldr	s13, [r3]
 8006c10:	9b00      	ldr	r3, [sp, #0]
 8006c12:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006c16:	ee32 7a87 	vadd.f32	s14, s5, s14
 8006c1a:	eca3 7a01 	vstmia	r3!, {s14}
 8006c1e:	4599      	cmp	r9, r3
 8006c20:	9300      	str	r3, [sp, #0]
 8006c22:	f63f af4c 	bhi.w	8006abe <forward_dense+0x1fa>
 8006c26:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006c2a:	e701      	b.n	8006a30 <forward_dense+0x16c>
 8006c2c:	9b03      	ldr	r3, [sp, #12]
 8006c2e:	ee72 2a87 	vadd.f32	s5, s5, s14
 8006c32:	449c      	add	ip, r3
 8006c34:	441f      	add	r7, r3
 8006c36:	9b00      	ldr	r3, [sp, #0]
 8006c38:	ece3 2a01 	vstmia	r3!, {s5}
 8006c3c:	454b      	cmp	r3, r9
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	d2f1      	bcs.n	8006c26 <forward_dense+0x362>
 8006c42:	2d00      	cmp	r5, #0
 8006c44:	f47f af3e 	bne.w	8006ac4 <forward_dense+0x200>
 8006c48:	9b04      	ldr	r3, [sp, #16]
 8006c4a:	eef0 2a48 	vmov.f32	s5, s16
 8006c4e:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8006c9c <forward_dense+0x3d8>
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f47f af3e 	bne.w	8006ad4 <forward_dense+0x210>
 8006c58:	46de      	mov	lr, fp
 8006c5a:	46e0      	mov	r8, ip
 8006c5c:	e79d      	b.n	8006b9a <forward_dense+0x2d6>
 8006c5e:	f8d9 900c 	ldr.w	r9, [r9, #12]
 8006c62:	f1b8 0f00 	cmp.w	r8, #0
 8006c66:	f43f ae84 	beq.w	8006972 <forward_dense+0xae>
 8006c6a:	e9d8 0100 	ldrd	r0, r1, [r8]
 8006c6e:	f000 fb89 	bl	8007384 <ai_array_get_byte_size>
 8006c72:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8006c76:	4602      	mov	r2, r0
 8006c78:	4648      	mov	r0, r9
 8006c7a:	4641      	mov	r1, r8
 8006c7c:	46c1      	mov	r9, r8
 8006c7e:	f000 fa89 	bl	8007194 <st_int8_copy>
 8006c82:	e676      	b.n	8006972 <forward_dense+0xae>
 8006c84:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c86:	e644      	b.n	8006912 <forward_dense+0x4e>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	9308      	str	r3, [sp, #32]
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	e640      	b.n	8006912 <forward_dense+0x4e>
 8006c90:	2300      	movs	r3, #0
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	deff      	udf	#255	@ 0xff
 8006c96:	2300      	movs	r3, #0
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	deff      	udf	#255	@ 0xff
 8006c9c:	00000000 	.word	0x00000000

08006ca0 <forward_relu>:
 8006ca0:	6982      	ldr	r2, [r0, #24]
 8006ca2:	8813      	ldrh	r3, [r2, #0]
 8006ca4:	b323      	cbz	r3, 8006cf0 <forward_relu+0x50>
 8006ca6:	6851      	ldr	r1, [r2, #4]
 8006ca8:	684a      	ldr	r2, [r1, #4]
 8006caa:	b102      	cbz	r2, 8006cae <forward_relu+0xe>
 8006cac:	6812      	ldr	r2, [r2, #0]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	f000 8086 	beq.w	8006dc0 <forward_relu+0x120>
 8006cb4:	b470      	push	{r4, r5, r6}
 8006cb6:	690b      	ldr	r3, [r1, #16]
 8006cb8:	b103      	cbz	r3, 8006cbc <forward_relu+0x1c>
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	69c6      	ldr	r6, [r0, #28]
 8006cbe:	b1ce      	cbz	r6, 8006cf4 <forward_relu+0x54>
 8006cc0:	6871      	ldr	r1, [r6, #4]
 8006cc2:	6998      	ldr	r0, [r3, #24]
 8006cc4:	2901      	cmp	r1, #1
 8006cc6:	d03f      	beq.n	8006d48 <forward_relu+0xa8>
 8006cc8:	6893      	ldr	r3, [r2, #8]
 8006cca:	6991      	ldr	r1, [r2, #24]
 8006ccc:	0a1b      	lsrs	r3, r3, #8
 8006cce:	6880      	ldr	r0, [r0, #8]
 8006cd0:	6889      	ldr	r1, [r1, #8]
 8006cd2:	d06c      	beq.n	8006dae <forward_relu+0x10e>
 8006cd4:	68d5      	ldr	r5, [r2, #12]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006cdc:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8006ce0:	429d      	cmp	r5, r3
 8006ce2:	fb04 f202 	mul.w	r2, r4, r2
 8006ce6:	d1f9      	bne.n	8006cdc <forward_relu+0x3c>
 8006ce8:	68b3      	ldr	r3, [r6, #8]
 8006cea:	bc70      	pop	{r4, r5, r6}
 8006cec:	f000 b86e 	b.w	8006dcc <forward_lite_nl_relu_generic_if32of32_kernel>
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	deff      	udf	#255	@ 0xff
 8006cf4:	6999      	ldr	r1, [r3, #24]
 8006cf6:	6893      	ldr	r3, [r2, #8]
 8006cf8:	6990      	ldr	r0, [r2, #24]
 8006cfa:	0a1b      	lsrs	r3, r3, #8
 8006cfc:	6889      	ldr	r1, [r1, #8]
 8006cfe:	6884      	ldr	r4, [r0, #8]
 8006d00:	d057      	beq.n	8006db2 <forward_relu+0x112>
 8006d02:	68d5      	ldr	r5, [r2, #12]
 8006d04:	2201      	movs	r2, #1
 8006d06:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006d0a:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8006d0e:	429d      	cmp	r5, r3
 8006d10:	fb00 f202 	mul.w	r2, r0, r2
 8006d14:	d1f9      	bne.n	8006d0a <forward_relu+0x6a>
 8006d16:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006d1a:	4413      	add	r3, r2
 8006d1c:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006d20:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8006d24:	4294      	cmp	r4, r2
 8006d26:	d80d      	bhi.n	8006d44 <forward_relu+0xa4>
 8006d28:	3204      	adds	r2, #4
 8006d2a:	3104      	adds	r1, #4
 8006d2c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006dc8 <forward_relu+0x128>
 8006d30:	4613      	mov	r3, r2
 8006d32:	ed72 7a01 	vldmdb	r2!, {s15}
 8006d36:	3b08      	subs	r3, #8
 8006d38:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8006d3c:	ed61 7a01 	vstmdb	r1!, {s15}
 8006d40:	429c      	cmp	r4, r3
 8006d42:	d9f5      	bls.n	8006d30 <forward_relu+0x90>
 8006d44:	bc70      	pop	{r4, r5, r6}
 8006d46:	4770      	bx	lr
 8006d48:	6993      	ldr	r3, [r2, #24]
 8006d4a:	6880      	ldr	r0, [r0, #8]
 8006d4c:	689c      	ldr	r4, [r3, #8]
 8006d4e:	6893      	ldr	r3, [r2, #8]
 8006d50:	0a1b      	lsrs	r3, r3, #8
 8006d52:	d030      	beq.n	8006db6 <forward_relu+0x116>
 8006d54:	68d5      	ldr	r5, [r2, #12]
 8006d56:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006d5a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006d5e:	429d      	cmp	r5, r3
 8006d60:	fb02 f101 	mul.w	r1, r2, r1
 8006d64:	d1f9      	bne.n	8006d5a <forward_relu+0xba>
 8006d66:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 8006d6a:	68b3      	ldr	r3, [r6, #8]
 8006d6c:	440a      	add	r2, r1
 8006d6e:	ed93 7a00 	vldr	s14, [r3]
 8006d72:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006d76:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8006d7a:	429c      	cmp	r4, r3
 8006d7c:	d8e2      	bhi.n	8006d44 <forward_relu+0xa4>
 8006d7e:	1d02      	adds	r2, r0, #4
 8006d80:	3304      	adds	r3, #4
 8006d82:	2000      	movs	r0, #0
 8006d84:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006d88:	1f19      	subs	r1, r3, #4
 8006d8a:	3b08      	subs	r3, #8
 8006d8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d94:	d405      	bmi.n	8006da2 <forward_relu+0x102>
 8006d96:	429c      	cmp	r4, r3
 8006d98:	f842 0d04 	str.w	r0, [r2, #-4]!
 8006d9c:	d8d2      	bhi.n	8006d44 <forward_relu+0xa4>
 8006d9e:	460b      	mov	r3, r1
 8006da0:	e7f0      	b.n	8006d84 <forward_relu+0xe4>
 8006da2:	429c      	cmp	r4, r3
 8006da4:	ed62 7a01 	vstmdb	r2!, {s15}
 8006da8:	d8cc      	bhi.n	8006d44 <forward_relu+0xa4>
 8006daa:	460b      	mov	r3, r1
 8006dac:	e7ea      	b.n	8006d84 <forward_relu+0xe4>
 8006dae:	2201      	movs	r2, #1
 8006db0:	e79a      	b.n	8006ce8 <forward_relu+0x48>
 8006db2:	4622      	mov	r2, r4
 8006db4:	e7b8      	b.n	8006d28 <forward_relu+0x88>
 8006db6:	68b2      	ldr	r2, [r6, #8]
 8006db8:	4623      	mov	r3, r4
 8006dba:	ed92 7a00 	vldr	s14, [r2]
 8006dbe:	e7de      	b.n	8006d7e <forward_relu+0xde>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	deff      	udf	#255	@ 0xff
 8006dc6:	bf00      	nop
 8006dc8:	00000000 	.word	0x00000000

08006dcc <forward_lite_nl_relu_generic_if32of32_kernel>:
 8006dcc:	edd3 6a02 	vldr	s13, [r3, #8]
 8006dd0:	ed93 7a00 	vldr	s14, [r3]
 8006dd4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8006dd8:	ed93 6a01 	vldr	s12, [r3, #4]
 8006ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006de0:	d42b      	bmi.n	8006e3a <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 8006de2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006de6:	4413      	add	r3, r2
 8006de8:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8006dec:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8006df0:	4291      	cmp	r1, r2
 8006df2:	d821      	bhi.n	8006e38 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8006df4:	f10c 0104 	add.w	r1, ip, #4
 8006df8:	1d13      	adds	r3, r2, #4
 8006dfa:	eba2 020c 	sub.w	r2, r2, ip
 8006dfe:	4408      	add	r0, r1
 8006e00:	e00c      	b.n	8006e1c <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8006e02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e06:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8006e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e0e:	db01      	blt.n	8006e14 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 8006e10:	ee65 7a86 	vmul.f32	s15, s11, s12
 8006e14:	4293      	cmp	r3, r2
 8006e16:	ed60 7a01 	vstmdb	r0!, {s15}
 8006e1a:	d00c      	beq.n	8006e36 <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 8006e1c:	ed73 7a01 	vldmdb	r3!, {s15}
 8006e20:	eef4 6ae7 	vcmpe.f32	s13, s15
 8006e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e28:	daeb      	bge.n	8006e02 <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 8006e2a:	eef0 7a66 	vmov.f32	s15, s13
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	ed60 7a01 	vstmdb	r0!, {s15}
 8006e34:	d1f2      	bne.n	8006e1c <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8006e36:	4770      	bx	lr
 8006e38:	4770      	bx	lr
 8006e3a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8006e3e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006e42:	4413      	add	r3, r2
 8006e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e48:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 8006e4c:	b500      	push	{lr}
 8006e4e:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8006e52:	d019      	beq.n	8006e88 <forward_lite_nl_relu_generic_if32of32_kernel+0xbc>
 8006e54:	4561      	cmp	r1, ip
 8006e56:	d815      	bhi.n	8006e84 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8006e58:	f10e 0204 	add.w	r2, lr, #4
 8006e5c:	f10c 0304 	add.w	r3, ip, #4
 8006e60:	ebac 010e 	sub.w	r1, ip, lr
 8006e64:	4402      	add	r2, r0
 8006e66:	ed73 7a01 	vldmdb	r3!, {s15}
 8006e6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e6e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8006e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e76:	ee66 6a86 	vmul.f32	s13, s13, s12
 8006e7a:	d827      	bhi.n	8006ecc <forward_lite_nl_relu_generic_if32of32_kernel+0x100>
 8006e7c:	428b      	cmp	r3, r1
 8006e7e:	ed62 6a01 	vstmdb	r2!, {s13}
 8006e82:	d1f0      	bne.n	8006e66 <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 8006e84:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e88:	4561      	cmp	r1, ip
 8006e8a:	d8fb      	bhi.n	8006e84 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8006e8c:	f10e 0204 	add.w	r2, lr, #4
 8006e90:	f10c 0304 	add.w	r3, ip, #4
 8006e94:	ebac 010e 	sub.w	r1, ip, lr
 8006e98:	f04f 0c00 	mov.w	ip, #0
 8006e9c:	4402      	add	r2, r0
 8006e9e:	ed73 7a01 	vldmdb	r3!, {s15}
 8006ea2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eaa:	d40a      	bmi.n	8006ec2 <forward_lite_nl_relu_generic_if32of32_kernel+0xf6>
 8006eac:	428b      	cmp	r3, r1
 8006eae:	f842 cd04 	str.w	ip, [r2, #-4]!
 8006eb2:	d0e7      	beq.n	8006e84 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8006eb4:	ed73 7a01 	vldmdb	r3!, {s15}
 8006eb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ec0:	d5f4      	bpl.n	8006eac <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 8006ec2:	428b      	cmp	r3, r1
 8006ec4:	ed62 7a01 	vstmdb	r2!, {s15}
 8006ec8:	d1e9      	bne.n	8006e9e <forward_lite_nl_relu_generic_if32of32_kernel+0xd2>
 8006eca:	e7db      	b.n	8006e84 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8006ecc:	428b      	cmp	r3, r1
 8006ece:	ed62 7a01 	vstmdb	r2!, {s15}
 8006ed2:	d1c8      	bne.n	8006e66 <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 8006ed4:	e7d6      	b.n	8006e84 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8006ed6:	bf00      	nop

08006ed8 <forward_lite_dense_if32of32wf32>:
 8006ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006edc:	ed2d 8b0c 	vpush	{d8-d13}
 8006ee0:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 8006ee4:	6801      	ldr	r1, [r0, #0]
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	fb02 f303 	mul.w	r3, r2, r3
 8006eec:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8006ef0:	9100      	str	r1, [sp, #0]
 8006ef2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8006ef6:	4299      	cmp	r1, r3
 8006ef8:	9301      	str	r3, [sp, #4]
 8006efa:	f080 811c 	bcs.w	8007136 <forward_lite_dense_if32of32wf32+0x25e>
 8006efe:	4607      	mov	r7, r0
 8006f00:	6904      	ldr	r4, [r0, #16]
 8006f02:	0096      	lsls	r6, r2, #2
 8006f04:	9b00      	ldr	r3, [sp, #0]
 8006f06:	68bd      	ldr	r5, [r7, #8]
 8006f08:	eb03 0e06 	add.w	lr, r3, r6
 8006f0c:	461e      	mov	r6, r3
 8006f0e:	459e      	cmp	lr, r3
 8006f10:	f240 8103 	bls.w	800711a <forward_lite_dense_if32of32wf32+0x242>
 8006f14:	f1a4 0c10 	sub.w	ip, r4, #16
 8006f18:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8006f1c:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8006f20:	f10c 0c01 	add.w	ip, ip, #1
 8006f24:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 8006f28:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 8006f2c:	2c0f      	cmp	r4, #15
 8006f2e:	f240 8107 	bls.w	8007140 <forward_lite_dense_if32of32wf32+0x268>
 8006f32:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 8006f36:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 8006f3a:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8007190 <forward_lite_dense_if32of32wf32+0x2b8>
 8006f3e:	4621      	mov	r1, r4
 8006f40:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 8006f44:	3910      	subs	r1, #16
 8006f46:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 8006f4a:	3340      	adds	r3, #64	@ 0x40
 8006f4c:	ed52 4a10 	vldr	s9, [r2, #-64]	@ 0xffffffc0
 8006f50:	290f      	cmp	r1, #15
 8006f52:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006f56:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 8006f5a:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 8006f5e:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8006f62:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 8006f66:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006f6a:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 8006f6e:	ed12 da1d 	vldr	s26, [r2, #-116]	@ 0xffffff8c
 8006f72:	ed52 ca1c 	vldr	s25, [r2, #-112]	@ 0xffffff90
 8006f76:	ed13 ca1c 	vldr	s24, [r3, #-112]	@ 0xffffff90
 8006f7a:	ed52 ba1b 	vldr	s23, [r2, #-108]	@ 0xffffff94
 8006f7e:	ed13 ba1b 	vldr	s22, [r3, #-108]	@ 0xffffff94
 8006f82:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006f86:	ed52 aa1a 	vldr	s21, [r2, #-104]	@ 0xffffff98
 8006f8a:	ed13 aa1a 	vldr	s20, [r3, #-104]	@ 0xffffff98
 8006f8e:	ed52 9a19 	vldr	s19, [r2, #-100]	@ 0xffffff9c
 8006f92:	ed13 9a19 	vldr	s18, [r3, #-100]	@ 0xffffff9c
 8006f96:	ed52 8a18 	vldr	s17, [r2, #-96]	@ 0xffffffa0
 8006f9a:	ed13 8a18 	vldr	s16, [r3, #-96]	@ 0xffffffa0
 8006f9e:	eeed 7a26 	vfma.f32	s15, s26, s13
 8006fa2:	ed12 0a17 	vldr	s0, [r2, #-92]	@ 0xffffffa4
 8006fa6:	ed53 0a17 	vldr	s1, [r3, #-92]	@ 0xffffffa4
 8006faa:	ed12 1a16 	vldr	s2, [r2, #-88]	@ 0xffffffa8
 8006fae:	ed53 1a16 	vldr	s3, [r3, #-88]	@ 0xffffffa8
 8006fb2:	ed12 2a15 	vldr	s4, [r2, #-84]	@ 0xffffffac
 8006fb6:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 8006fba:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8006fbe:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 8006fc2:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8006fc6:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 8006fca:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8006fce:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 8006fd2:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8006fd6:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8006fda:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8006fde:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 8006fe2:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8006fe6:	eee9 7a89 	vfma.f32	s15, s19, s18
 8006fea:	eee8 7a88 	vfma.f32	s15, s17, s16
 8006fee:	eee0 7a20 	vfma.f32	s15, s0, s1
 8006ff2:	eee1 7a21 	vfma.f32	s15, s2, s3
 8006ff6:	eee2 7a22 	vfma.f32	s15, s4, s5
 8006ffa:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006ffe:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007002:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007006:	eee6 7a26 	vfma.f32	s15, s12, s13
 800700a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800700e:	d897      	bhi.n	8006f40 <forward_lite_dense_if32of32wf32+0x68>
 8007010:	eb05 020b 	add.w	r2, r5, fp
 8007014:	f004 010f 	and.w	r1, r4, #15
 8007018:	4663      	mov	r3, ip
 800701a:	2903      	cmp	r1, #3
 800701c:	d95f      	bls.n	80070de <forward_lite_dense_if32of32wf32+0x206>
 800701e:	edd2 6a01 	vldr	s13, [r2, #4]
 8007022:	1f08      	subs	r0, r1, #4
 8007024:	edd3 7a01 	vldr	s15, [r3, #4]
 8007028:	ed93 4a00 	vldr	s8, [r3]
 800702c:	2803      	cmp	r0, #3
 800702e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007032:	edd2 4a00 	vldr	s9, [r2]
 8007036:	ed93 5a02 	vldr	s10, [r3, #8]
 800703a:	edd2 5a02 	vldr	s11, [r2, #8]
 800703e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007042:	ed93 6a03 	vldr	s12, [r3, #12]
 8007046:	edd2 6a03 	vldr	s13, [r2, #12]
 800704a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800704e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007052:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007056:	eeb0 7a67 	vmov.f32	s14, s15
 800705a:	d938      	bls.n	80070ce <forward_lite_dense_if32of32wf32+0x1f6>
 800705c:	edd2 6a05 	vldr	s13, [r2, #20]
 8007060:	f1a1 0a08 	sub.w	sl, r1, #8
 8007064:	edd3 7a05 	vldr	s15, [r3, #20]
 8007068:	ed93 4a04 	vldr	s8, [r3, #16]
 800706c:	f1ba 0f03 	cmp.w	sl, #3
 8007070:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007074:	edd2 4a04 	vldr	s9, [r2, #16]
 8007078:	ed93 5a06 	vldr	s10, [r3, #24]
 800707c:	edd2 5a06 	vldr	s11, [r2, #24]
 8007080:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007084:	ed93 6a07 	vldr	s12, [r3, #28]
 8007088:	edd2 6a07 	vldr	s13, [r2, #28]
 800708c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007090:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007094:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007098:	d919      	bls.n	80070ce <forward_lite_dense_if32of32wf32+0x1f6>
 800709a:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 800709e:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 80070a2:	ed92 4a08 	vldr	s8, [r2, #32]
 80070a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80070aa:	edd3 4a08 	vldr	s9, [r3, #32]
 80070ae:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 80070b2:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 80070b6:	eee4 7a24 	vfma.f32	s15, s8, s9
 80070ba:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 80070be:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 80070c2:	eee5 7a25 	vfma.f32	s15, s10, s11
 80070c6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80070ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80070ce:	0880      	lsrs	r0, r0, #2
 80070d0:	f001 0103 	and.w	r1, r1, #3
 80070d4:	3001      	adds	r0, #1
 80070d6:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 80070da:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80070de:	b1a9      	cbz	r1, 800710c <forward_lite_dense_if32of32wf32+0x234>
 80070e0:	edd3 6a00 	vldr	s13, [r3]
 80070e4:	3901      	subs	r1, #1
 80070e6:	edd2 7a00 	vldr	s15, [r2]
 80070ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80070ee:	d00d      	beq.n	800710c <forward_lite_dense_if32of32wf32+0x234>
 80070f0:	edd3 6a01 	vldr	s13, [r3, #4]
 80070f4:	2901      	cmp	r1, #1
 80070f6:	edd2 7a01 	vldr	s15, [r2, #4]
 80070fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80070fe:	d005      	beq.n	800710c <forward_lite_dense_if32of32wf32+0x234>
 8007100:	edd2 6a02 	vldr	s13, [r2, #8]
 8007104:	edd3 7a02 	vldr	s15, [r3, #8]
 8007108:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800710c:	eca6 7a01 	vstmia	r6!, {s14}
 8007110:	45b6      	cmp	lr, r6
 8007112:	444d      	add	r5, r9
 8007114:	f63f af0a 	bhi.w	8006f2c <forward_lite_dense_if32of32wf32+0x54>
 8007118:	697a      	ldr	r2, [r7, #20]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	b9b3      	cbnz	r3, 800714c <forward_lite_dense_if32of32wf32+0x274>
 800711e:	9b00      	ldr	r3, [sp, #0]
 8007120:	0096      	lsls	r6, r2, #2
 8007122:	9901      	ldr	r1, [sp, #4]
 8007124:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8007128:	693c      	ldr	r4, [r7, #16]
 800712a:	4299      	cmp	r1, r3
 800712c:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	f63f aee7 	bhi.w	8006f04 <forward_lite_dense_if32of32wf32+0x2c>
 8007136:	b003      	add	sp, #12
 8007138:	ecbd 8b0c 	vpop	{d8-d13}
 800713c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007140:	4621      	mov	r1, r4
 8007142:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8007190 <forward_lite_dense_if32of32wf32+0x2b8>
 8007146:	462a      	mov	r2, r5
 8007148:	4643      	mov	r3, r8
 800714a:	e766      	b.n	800701a <forward_lite_dense_if32of32wf32+0x142>
 800714c:	2a00      	cmp	r2, #0
 800714e:	d0e6      	beq.n	800711e <forward_lite_dense_if32of32wf32+0x246>
 8007150:	9a00      	ldr	r2, [sp, #0]
 8007152:	ed93 7a00 	vldr	s14, [r3]
 8007156:	edd2 7a00 	vldr	s15, [r2]
 800715a:	4613      	mov	r3, r2
 800715c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007160:	edc2 7a00 	vstr	s15, [r2]
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	2a01      	cmp	r2, #1
 8007168:	d9d9      	bls.n	800711e <forward_lite_dense_if32of32wf32+0x246>
 800716a:	1d19      	adds	r1, r3, #4
 800716c:	2301      	movs	r3, #1
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	ed91 7a00 	vldr	s14, [r1]
 8007174:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007178:	3301      	adds	r3, #1
 800717a:	edd2 7a00 	vldr	s15, [r2]
 800717e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007182:	ece1 7a01 	vstmia	r1!, {s15}
 8007186:	697a      	ldr	r2, [r7, #20]
 8007188:	429a      	cmp	r2, r3
 800718a:	d8f0      	bhi.n	800716e <forward_lite_dense_if32of32wf32+0x296>
 800718c:	e7c7      	b.n	800711e <forward_lite_dense_if32of32wf32+0x246>
 800718e:	bf00      	nop
 8007190:	00000000 	.word	0x00000000

08007194 <st_int8_copy>:
 8007194:	4288      	cmp	r0, r1
 8007196:	d010      	beq.n	80071ba <st_int8_copy+0x26>
 8007198:	b17a      	cbz	r2, 80071ba <st_int8_copy+0x26>
 800719a:	4288      	cmp	r0, r1
 800719c:	eb00 0302 	add.w	r3, r0, r2
 80071a0:	d20c      	bcs.n	80071bc <st_int8_copy+0x28>
 80071a2:	428b      	cmp	r3, r1
 80071a4:	d90a      	bls.n	80071bc <st_int8_copy+0x28>
 80071a6:	4283      	cmp	r3, r0
 80071a8:	440a      	add	r2, r1
 80071aa:	d906      	bls.n	80071ba <st_int8_copy+0x26>
 80071ac:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 80071b0:	4283      	cmp	r3, r0
 80071b2:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80071b6:	d1f9      	bne.n	80071ac <st_int8_copy+0x18>
 80071b8:	4770      	bx	lr
 80071ba:	4770      	bx	lr
 80071bc:	078b      	lsls	r3, r1, #30
 80071be:	d102      	bne.n	80071c6 <st_int8_copy+0x32>
 80071c0:	e008      	b.n	80071d4 <st_int8_copy+0x40>
 80071c2:	2a00      	cmp	r2, #0
 80071c4:	d04c      	beq.n	8007260 <st_int8_copy+0xcc>
 80071c6:	f910 3b01 	ldrsb.w	r3, [r0], #1
 80071ca:	3a01      	subs	r2, #1
 80071cc:	f801 3b01 	strb.w	r3, [r1], #1
 80071d0:	078b      	lsls	r3, r1, #30
 80071d2:	d1f6      	bne.n	80071c2 <st_int8_copy+0x2e>
 80071d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071d8:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 80071dc:	d05d      	beq.n	800729a <st_int8_copy+0x106>
 80071de:	ea41 0300 	orr.w	r3, r1, r0
 80071e2:	075b      	lsls	r3, r3, #29
 80071e4:	d13d      	bne.n	8007262 <st_int8_copy+0xce>
 80071e6:	f1be 0f01 	cmp.w	lr, #1
 80071ea:	d03a      	beq.n	8007262 <st_int8_copy+0xce>
 80071ec:	f100 0310 	add.w	r3, r0, #16
 80071f0:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80071f4:	f101 0c10 	add.w	ip, r1, #16
 80071f8:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 80071fc:	3310      	adds	r3, #16
 80071fe:	f10c 0c10 	add.w	ip, ip, #16
 8007202:	ed13 6b08 	vldr	d6, [r3, #-32]	@ 0xffffffe0
 8007206:	ed13 7b06 	vldr	d7, [r3, #-24]	@ 0xffffffe8
 800720a:	4573      	cmp	r3, lr
 800720c:	ed0c 6b08 	vstr	d6, [ip, #-32]	@ 0xffffffe0
 8007210:	ed0c 7b06 	vstr	d7, [ip, #-24]	@ 0xffffffe8
 8007214:	d1f2      	bne.n	80071fc <st_int8_copy+0x68>
 8007216:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800721a:	4421      	add	r1, r4
 800721c:	4420      	add	r0, r4
 800721e:	f002 0203 	and.w	r2, r2, #3
 8007222:	b16b      	cbz	r3, 8007240 <st_int8_copy+0xac>
 8007224:	6804      	ldr	r4, [r0, #0]
 8007226:	600c      	str	r4, [r1, #0]
 8007228:	1e5c      	subs	r4, r3, #1
 800722a:	d005      	beq.n	8007238 <st_int8_copy+0xa4>
 800722c:	6845      	ldr	r5, [r0, #4]
 800722e:	2c01      	cmp	r4, #1
 8007230:	604d      	str	r5, [r1, #4]
 8007232:	d001      	beq.n	8007238 <st_int8_copy+0xa4>
 8007234:	6884      	ldr	r4, [r0, #8]
 8007236:	608c      	str	r4, [r1, #8]
 8007238:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800723c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8007240:	b162      	cbz	r2, 800725c <st_int8_copy+0xc8>
 8007242:	f990 3000 	ldrsb.w	r3, [r0]
 8007246:	3a01      	subs	r2, #1
 8007248:	700b      	strb	r3, [r1, #0]
 800724a:	d007      	beq.n	800725c <st_int8_copy+0xc8>
 800724c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8007250:	2a01      	cmp	r2, #1
 8007252:	704b      	strb	r3, [r1, #1]
 8007254:	d002      	beq.n	800725c <st_int8_copy+0xc8>
 8007256:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800725a:	708b      	strb	r3, [r1, #2]
 800725c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007260:	4770      	bx	lr
 8007262:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8007266:	460b      	mov	r3, r1
 8007268:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800726c:	4684      	mov	ip, r0
 800726e:	f8dc 8000 	ldr.w	r8, [ip]
 8007272:	3310      	adds	r3, #16
 8007274:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8007278:	f10c 0c10 	add.w	ip, ip, #16
 800727c:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 8007280:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 8007284:	f843 8c10 	str.w	r8, [r3, #-16]
 8007288:	f843 7c0c 	str.w	r7, [r3, #-12]
 800728c:	f843 6c08 	str.w	r6, [r3, #-8]
 8007290:	f843 5c04 	str.w	r5, [r3, #-4]
 8007294:	459e      	cmp	lr, r3
 8007296:	d1ea      	bne.n	800726e <st_int8_copy+0xda>
 8007298:	e7bd      	b.n	8007216 <st_int8_copy+0x82>
 800729a:	0893      	lsrs	r3, r2, #2
 800729c:	f002 0203 	and.w	r2, r2, #3
 80072a0:	e7bf      	b.n	8007222 <st_int8_copy+0x8e>
 80072a2:	bf00      	nop

080072a4 <ai_array_to_buffer_fmt>:
 80072a4:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d053      	beq.n	8007354 <ai_array_to_buffer_fmt+0xb0>
 80072ac:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 80072b0:	4a2b      	ldr	r2, [pc, #172]	@ (8007360 <ai_array_to_buffer_fmt+0xbc>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d010      	beq.n	80072d8 <ai_array_to_buffer_fmt+0x34>
 80072b6:	dc21      	bgt.n	80072fc <ai_array_to_buffer_fmt+0x58>
 80072b8:	4a2a      	ldr	r2, [pc, #168]	@ (8007364 <ai_array_to_buffer_fmt+0xc0>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d00c      	beq.n	80072d8 <ai_array_to_buffer_fmt+0x34>
 80072be:	dd0f      	ble.n	80072e0 <ai_array_to_buffer_fmt+0x3c>
 80072c0:	4a29      	ldr	r2, [pc, #164]	@ (8007368 <ai_array_to_buffer_fmt+0xc4>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d008      	beq.n	80072d8 <ai_array_to_buffer_fmt+0x34>
 80072c6:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d004      	beq.n	80072d8 <ai_array_to_buffer_fmt+0x34>
 80072ce:	4a27      	ldr	r2, [pc, #156]	@ (800736c <ai_array_to_buffer_fmt+0xc8>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	bf0c      	ite	eq
 80072d4:	4613      	moveq	r3, r2
 80072d6:	2340      	movne	r3, #64	@ 0x40
 80072d8:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80072dc:	4318      	orrs	r0, r3
 80072de:	4770      	bx	lr
 80072e0:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d0f7      	beq.n	80072d8 <ai_array_to_buffer_fmt+0x34>
 80072e8:	dd2a      	ble.n	8007340 <ai_array_to_buffer_fmt+0x9c>
 80072ea:	4a21      	ldr	r2, [pc, #132]	@ (8007370 <ai_array_to_buffer_fmt+0xcc>)
 80072ec:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80072f0:	4293      	cmp	r3, r2
 80072f2:	bf0c      	ite	eq
 80072f4:	4613      	moveq	r3, r2
 80072f6:	2340      	movne	r3, #64	@ 0x40
 80072f8:	4318      	orrs	r0, r3
 80072fa:	4770      	bx	lr
 80072fc:	4a1d      	ldr	r2, [pc, #116]	@ (8007374 <ai_array_to_buffer_fmt+0xd0>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d0ea      	beq.n	80072d8 <ai_array_to_buffer_fmt+0x34>
 8007302:	dd0f      	ble.n	8007324 <ai_array_to_buffer_fmt+0x80>
 8007304:	4a1c      	ldr	r2, [pc, #112]	@ (8007378 <ai_array_to_buffer_fmt+0xd4>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d0e6      	beq.n	80072d8 <ai_array_to_buffer_fmt+0x34>
 800730a:	f502 027e 	add.w	r2, r2, #16646144	@ 0xfe0000
 800730e:	4293      	cmp	r3, r2
 8007310:	d0e2      	beq.n	80072d8 <ai_array_to_buffer_fmt+0x34>
 8007312:	4a1a      	ldr	r2, [pc, #104]	@ (800737c <ai_array_to_buffer_fmt+0xd8>)
 8007314:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8007318:	4293      	cmp	r3, r2
 800731a:	bf0c      	ite	eq
 800731c:	4613      	moveq	r3, r2
 800731e:	2340      	movne	r3, #64	@ 0x40
 8007320:	4318      	orrs	r0, r3
 8007322:	4770      	bx	lr
 8007324:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8007328:	4293      	cmp	r3, r2
 800732a:	d0d5      	beq.n	80072d8 <ai_array_to_buffer_fmt+0x34>
 800732c:	3207      	adds	r2, #7
 800732e:	4293      	cmp	r3, r2
 8007330:	d0d2      	beq.n	80072d8 <ai_array_to_buffer_fmt+0x34>
 8007332:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 8007336:	4293      	cmp	r3, r2
 8007338:	bf0c      	ite	eq
 800733a:	4613      	moveq	r3, r2
 800733c:	2340      	movne	r3, #64	@ 0x40
 800733e:	e7cb      	b.n	80072d8 <ai_array_to_buffer_fmt+0x34>
 8007340:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8007344:	4293      	cmp	r3, r2
 8007346:	d0c7      	beq.n	80072d8 <ai_array_to_buffer_fmt+0x34>
 8007348:	3280      	adds	r2, #128	@ 0x80
 800734a:	4293      	cmp	r3, r2
 800734c:	bf0c      	ite	eq
 800734e:	4613      	moveq	r3, r2
 8007350:	2340      	movne	r3, #64	@ 0x40
 8007352:	e7c1      	b.n	80072d8 <ai_array_to_buffer_fmt+0x34>
 8007354:	4b0a      	ldr	r3, [pc, #40]	@ (8007380 <ai_array_to_buffer_fmt+0xdc>)
 8007356:	4003      	ands	r3, r0
 8007358:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800735c:	e7bc      	b.n	80072d8 <ai_array_to_buffer_fmt+0x34>
 800735e:	bf00      	nop
 8007360:	00840040 	.word	0x00840040
 8007364:	00040840 	.word	0x00040840
 8007368:	00041040 	.word	0x00041040
 800736c:	0004084f 	.word	0x0004084f
 8007370:	00040447 	.word	0x00040447
 8007374:	00840840 	.word	0x00840840
 8007378:	00841040 	.word	0x00841040
 800737c:	0084084f 	.word	0x0084084f
 8007380:	00803fff 	.word	0x00803fff

08007384 <ai_array_get_byte_size>:
 8007384:	b319      	cbz	r1, 80073ce <ai_array_get_byte_size+0x4a>
 8007386:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800738a:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800738e:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 8007392:	11c0      	asrs	r0, r0, #7
 8007394:	fb01 f303 	mul.w	r3, r1, r3
 8007398:	2a04      	cmp	r2, #4
 800739a:	f103 0307 	add.w	r3, r3, #7
 800739e:	f023 0307 	bic.w	r3, r3, #7
 80073a2:	fa23 f10c 	lsr.w	r1, r3, ip
 80073a6:	d00b      	beq.n	80073c0 <ai_array_get_byte_size+0x3c>
 80073a8:	2a08      	cmp	r2, #8
 80073aa:	d002      	beq.n	80073b2 <ai_array_get_byte_size+0x2e>
 80073ac:	3107      	adds	r1, #7
 80073ae:	08c8      	lsrs	r0, r1, #3
 80073b0:	4770      	bx	lr
 80073b2:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80073b6:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80073ba:	3107      	adds	r1, #7
 80073bc:	08c8      	lsrs	r0, r1, #3
 80073be:	4770      	bx	lr
 80073c0:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80073c4:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 80073c8:	3107      	adds	r1, #7
 80073ca:	08c8      	lsrs	r0, r1, #3
 80073cc:	4770      	bx	lr
 80073ce:	4608      	mov	r0, r1
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop

080073d4 <ai_array_get_data_byte_size>:
 80073d4:	b169      	cbz	r1, 80073f2 <ai_array_get_data_byte_size+0x1e>
 80073d6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80073da:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80073de:	fb03 f101 	mul.w	r1, r3, r1
 80073e2:	1dcb      	adds	r3, r1, #7
 80073e4:	f023 0307 	bic.w	r3, r3, #7
 80073e8:	fa23 f000 	lsr.w	r0, r3, r0
 80073ec:	3007      	adds	r0, #7
 80073ee:	08c0      	lsrs	r0, r0, #3
 80073f0:	4770      	bx	lr
 80073f2:	4608      	mov	r0, r1
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop

080073f8 <ai_version_get>:
 80073f8:	0212      	lsls	r2, r2, #8
 80073fa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80073fe:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8007402:	4770      	bx	lr

08007404 <get_tensor_byte_size>:
 8007404:	b430      	push	{r4, r5}
 8007406:	6985      	ldr	r5, [r0, #24]
 8007408:	68c4      	ldr	r4, [r0, #12]
 800740a:	6941      	ldr	r1, [r0, #20]
 800740c:	4b06      	ldr	r3, [pc, #24]	@ (8007428 <get_tensor_byte_size+0x24>)
 800740e:	6828      	ldr	r0, [r5, #0]
 8007410:	4a06      	ldr	r2, [pc, #24]	@ (800742c <get_tensor_byte_size+0x28>)
 8007412:	4003      	ands	r3, r0
 8007414:	68c9      	ldr	r1, [r1, #12]
 8007416:	68e0      	ldr	r0, [r4, #12]
 8007418:	4293      	cmp	r3, r2
 800741a:	fb01 f000 	mul.w	r0, r1, r0
 800741e:	d101      	bne.n	8007424 <get_tensor_byte_size+0x20>
 8007420:	3007      	adds	r0, #7
 8007422:	08c0      	lsrs	r0, r0, #3
 8007424:	bc30      	pop	{r4, r5}
 8007426:	4770      	bx	lr
 8007428:	017fffff 	.word	0x017fffff
 800742c:	000400c0 	.word	0x000400c0

08007430 <sbrk_aligned>:
 8007430:	b570      	push	{r4, r5, r6, lr}
 8007432:	4e0f      	ldr	r6, [pc, #60]	@ (8007470 <sbrk_aligned+0x40>)
 8007434:	460c      	mov	r4, r1
 8007436:	6831      	ldr	r1, [r6, #0]
 8007438:	4605      	mov	r5, r0
 800743a:	b911      	cbnz	r1, 8007442 <sbrk_aligned+0x12>
 800743c:	f000 fb3a 	bl	8007ab4 <_sbrk_r>
 8007440:	6030      	str	r0, [r6, #0]
 8007442:	4621      	mov	r1, r4
 8007444:	4628      	mov	r0, r5
 8007446:	f000 fb35 	bl	8007ab4 <_sbrk_r>
 800744a:	1c43      	adds	r3, r0, #1
 800744c:	d103      	bne.n	8007456 <sbrk_aligned+0x26>
 800744e:	f04f 34ff 	mov.w	r4, #4294967295
 8007452:	4620      	mov	r0, r4
 8007454:	bd70      	pop	{r4, r5, r6, pc}
 8007456:	1cc4      	adds	r4, r0, #3
 8007458:	f024 0403 	bic.w	r4, r4, #3
 800745c:	42a0      	cmp	r0, r4
 800745e:	d0f8      	beq.n	8007452 <sbrk_aligned+0x22>
 8007460:	1a21      	subs	r1, r4, r0
 8007462:	4628      	mov	r0, r5
 8007464:	f000 fb26 	bl	8007ab4 <_sbrk_r>
 8007468:	3001      	adds	r0, #1
 800746a:	d1f2      	bne.n	8007452 <sbrk_aligned+0x22>
 800746c:	e7ef      	b.n	800744e <sbrk_aligned+0x1e>
 800746e:	bf00      	nop
 8007470:	240008f8 	.word	0x240008f8

08007474 <_malloc_r>:
 8007474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007478:	1ccd      	adds	r5, r1, #3
 800747a:	f025 0503 	bic.w	r5, r5, #3
 800747e:	3508      	adds	r5, #8
 8007480:	2d0c      	cmp	r5, #12
 8007482:	bf38      	it	cc
 8007484:	250c      	movcc	r5, #12
 8007486:	2d00      	cmp	r5, #0
 8007488:	4606      	mov	r6, r0
 800748a:	db01      	blt.n	8007490 <_malloc_r+0x1c>
 800748c:	42a9      	cmp	r1, r5
 800748e:	d904      	bls.n	800749a <_malloc_r+0x26>
 8007490:	230c      	movs	r3, #12
 8007492:	6033      	str	r3, [r6, #0]
 8007494:	2000      	movs	r0, #0
 8007496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800749a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007570 <_malloc_r+0xfc>
 800749e:	f000 f869 	bl	8007574 <__malloc_lock>
 80074a2:	f8d8 3000 	ldr.w	r3, [r8]
 80074a6:	461c      	mov	r4, r3
 80074a8:	bb44      	cbnz	r4, 80074fc <_malloc_r+0x88>
 80074aa:	4629      	mov	r1, r5
 80074ac:	4630      	mov	r0, r6
 80074ae:	f7ff ffbf 	bl	8007430 <sbrk_aligned>
 80074b2:	1c43      	adds	r3, r0, #1
 80074b4:	4604      	mov	r4, r0
 80074b6:	d158      	bne.n	800756a <_malloc_r+0xf6>
 80074b8:	f8d8 4000 	ldr.w	r4, [r8]
 80074bc:	4627      	mov	r7, r4
 80074be:	2f00      	cmp	r7, #0
 80074c0:	d143      	bne.n	800754a <_malloc_r+0xd6>
 80074c2:	2c00      	cmp	r4, #0
 80074c4:	d04b      	beq.n	800755e <_malloc_r+0xea>
 80074c6:	6823      	ldr	r3, [r4, #0]
 80074c8:	4639      	mov	r1, r7
 80074ca:	4630      	mov	r0, r6
 80074cc:	eb04 0903 	add.w	r9, r4, r3
 80074d0:	f000 faf0 	bl	8007ab4 <_sbrk_r>
 80074d4:	4581      	cmp	r9, r0
 80074d6:	d142      	bne.n	800755e <_malloc_r+0xea>
 80074d8:	6821      	ldr	r1, [r4, #0]
 80074da:	1a6d      	subs	r5, r5, r1
 80074dc:	4629      	mov	r1, r5
 80074de:	4630      	mov	r0, r6
 80074e0:	f7ff ffa6 	bl	8007430 <sbrk_aligned>
 80074e4:	3001      	adds	r0, #1
 80074e6:	d03a      	beq.n	800755e <_malloc_r+0xea>
 80074e8:	6823      	ldr	r3, [r4, #0]
 80074ea:	442b      	add	r3, r5
 80074ec:	6023      	str	r3, [r4, #0]
 80074ee:	f8d8 3000 	ldr.w	r3, [r8]
 80074f2:	685a      	ldr	r2, [r3, #4]
 80074f4:	bb62      	cbnz	r2, 8007550 <_malloc_r+0xdc>
 80074f6:	f8c8 7000 	str.w	r7, [r8]
 80074fa:	e00f      	b.n	800751c <_malloc_r+0xa8>
 80074fc:	6822      	ldr	r2, [r4, #0]
 80074fe:	1b52      	subs	r2, r2, r5
 8007500:	d420      	bmi.n	8007544 <_malloc_r+0xd0>
 8007502:	2a0b      	cmp	r2, #11
 8007504:	d917      	bls.n	8007536 <_malloc_r+0xc2>
 8007506:	1961      	adds	r1, r4, r5
 8007508:	42a3      	cmp	r3, r4
 800750a:	6025      	str	r5, [r4, #0]
 800750c:	bf18      	it	ne
 800750e:	6059      	strne	r1, [r3, #4]
 8007510:	6863      	ldr	r3, [r4, #4]
 8007512:	bf08      	it	eq
 8007514:	f8c8 1000 	streq.w	r1, [r8]
 8007518:	5162      	str	r2, [r4, r5]
 800751a:	604b      	str	r3, [r1, #4]
 800751c:	4630      	mov	r0, r6
 800751e:	f000 f82f 	bl	8007580 <__malloc_unlock>
 8007522:	f104 000b 	add.w	r0, r4, #11
 8007526:	1d23      	adds	r3, r4, #4
 8007528:	f020 0007 	bic.w	r0, r0, #7
 800752c:	1ac2      	subs	r2, r0, r3
 800752e:	bf1c      	itt	ne
 8007530:	1a1b      	subne	r3, r3, r0
 8007532:	50a3      	strne	r3, [r4, r2]
 8007534:	e7af      	b.n	8007496 <_malloc_r+0x22>
 8007536:	6862      	ldr	r2, [r4, #4]
 8007538:	42a3      	cmp	r3, r4
 800753a:	bf0c      	ite	eq
 800753c:	f8c8 2000 	streq.w	r2, [r8]
 8007540:	605a      	strne	r2, [r3, #4]
 8007542:	e7eb      	b.n	800751c <_malloc_r+0xa8>
 8007544:	4623      	mov	r3, r4
 8007546:	6864      	ldr	r4, [r4, #4]
 8007548:	e7ae      	b.n	80074a8 <_malloc_r+0x34>
 800754a:	463c      	mov	r4, r7
 800754c:	687f      	ldr	r7, [r7, #4]
 800754e:	e7b6      	b.n	80074be <_malloc_r+0x4a>
 8007550:	461a      	mov	r2, r3
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	42a3      	cmp	r3, r4
 8007556:	d1fb      	bne.n	8007550 <_malloc_r+0xdc>
 8007558:	2300      	movs	r3, #0
 800755a:	6053      	str	r3, [r2, #4]
 800755c:	e7de      	b.n	800751c <_malloc_r+0xa8>
 800755e:	230c      	movs	r3, #12
 8007560:	6033      	str	r3, [r6, #0]
 8007562:	4630      	mov	r0, r6
 8007564:	f000 f80c 	bl	8007580 <__malloc_unlock>
 8007568:	e794      	b.n	8007494 <_malloc_r+0x20>
 800756a:	6005      	str	r5, [r0, #0]
 800756c:	e7d6      	b.n	800751c <_malloc_r+0xa8>
 800756e:	bf00      	nop
 8007570:	240008fc 	.word	0x240008fc

08007574 <__malloc_lock>:
 8007574:	4801      	ldr	r0, [pc, #4]	@ (800757c <__malloc_lock+0x8>)
 8007576:	f000 baea 	b.w	8007b4e <__retarget_lock_acquire_recursive>
 800757a:	bf00      	nop
 800757c:	24000a40 	.word	0x24000a40

08007580 <__malloc_unlock>:
 8007580:	4801      	ldr	r0, [pc, #4]	@ (8007588 <__malloc_unlock+0x8>)
 8007582:	f000 bae5 	b.w	8007b50 <__retarget_lock_release_recursive>
 8007586:	bf00      	nop
 8007588:	24000a40 	.word	0x24000a40

0800758c <_realloc_r>:
 800758c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007590:	4680      	mov	r8, r0
 8007592:	4615      	mov	r5, r2
 8007594:	460c      	mov	r4, r1
 8007596:	b921      	cbnz	r1, 80075a2 <_realloc_r+0x16>
 8007598:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800759c:	4611      	mov	r1, r2
 800759e:	f7ff bf69 	b.w	8007474 <_malloc_r>
 80075a2:	b92a      	cbnz	r2, 80075b0 <_realloc_r+0x24>
 80075a4:	f000 fae4 	bl	8007b70 <_free_r>
 80075a8:	2400      	movs	r4, #0
 80075aa:	4620      	mov	r0, r4
 80075ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075b0:	f000 fb28 	bl	8007c04 <_malloc_usable_size_r>
 80075b4:	4285      	cmp	r5, r0
 80075b6:	4606      	mov	r6, r0
 80075b8:	d802      	bhi.n	80075c0 <_realloc_r+0x34>
 80075ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80075be:	d8f4      	bhi.n	80075aa <_realloc_r+0x1e>
 80075c0:	4629      	mov	r1, r5
 80075c2:	4640      	mov	r0, r8
 80075c4:	f7ff ff56 	bl	8007474 <_malloc_r>
 80075c8:	4607      	mov	r7, r0
 80075ca:	2800      	cmp	r0, #0
 80075cc:	d0ec      	beq.n	80075a8 <_realloc_r+0x1c>
 80075ce:	42b5      	cmp	r5, r6
 80075d0:	462a      	mov	r2, r5
 80075d2:	4621      	mov	r1, r4
 80075d4:	bf28      	it	cs
 80075d6:	4632      	movcs	r2, r6
 80075d8:	f000 fabb 	bl	8007b52 <memcpy>
 80075dc:	4621      	mov	r1, r4
 80075de:	4640      	mov	r0, r8
 80075e0:	f000 fac6 	bl	8007b70 <_free_r>
 80075e4:	463c      	mov	r4, r7
 80075e6:	e7e0      	b.n	80075aa <_realloc_r+0x1e>

080075e8 <std>:
 80075e8:	2300      	movs	r3, #0
 80075ea:	b510      	push	{r4, lr}
 80075ec:	4604      	mov	r4, r0
 80075ee:	e9c0 3300 	strd	r3, r3, [r0]
 80075f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075f6:	6083      	str	r3, [r0, #8]
 80075f8:	8181      	strh	r1, [r0, #12]
 80075fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80075fc:	81c2      	strh	r2, [r0, #14]
 80075fe:	6183      	str	r3, [r0, #24]
 8007600:	4619      	mov	r1, r3
 8007602:	2208      	movs	r2, #8
 8007604:	305c      	adds	r0, #92	@ 0x5c
 8007606:	f000 fa19 	bl	8007a3c <memset>
 800760a:	4b0d      	ldr	r3, [pc, #52]	@ (8007640 <std+0x58>)
 800760c:	6263      	str	r3, [r4, #36]	@ 0x24
 800760e:	4b0d      	ldr	r3, [pc, #52]	@ (8007644 <std+0x5c>)
 8007610:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007612:	4b0d      	ldr	r3, [pc, #52]	@ (8007648 <std+0x60>)
 8007614:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007616:	4b0d      	ldr	r3, [pc, #52]	@ (800764c <std+0x64>)
 8007618:	6323      	str	r3, [r4, #48]	@ 0x30
 800761a:	4b0d      	ldr	r3, [pc, #52]	@ (8007650 <std+0x68>)
 800761c:	6224      	str	r4, [r4, #32]
 800761e:	429c      	cmp	r4, r3
 8007620:	d006      	beq.n	8007630 <std+0x48>
 8007622:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007626:	4294      	cmp	r4, r2
 8007628:	d002      	beq.n	8007630 <std+0x48>
 800762a:	33d0      	adds	r3, #208	@ 0xd0
 800762c:	429c      	cmp	r4, r3
 800762e:	d105      	bne.n	800763c <std+0x54>
 8007630:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007638:	f000 ba88 	b.w	8007b4c <__retarget_lock_init_recursive>
 800763c:	bd10      	pop	{r4, pc}
 800763e:	bf00      	nop
 8007640:	0800788d 	.word	0x0800788d
 8007644:	080078af 	.word	0x080078af
 8007648:	080078e7 	.word	0x080078e7
 800764c:	0800790b 	.word	0x0800790b
 8007650:	24000900 	.word	0x24000900

08007654 <stdio_exit_handler>:
 8007654:	4a02      	ldr	r2, [pc, #8]	@ (8007660 <stdio_exit_handler+0xc>)
 8007656:	4903      	ldr	r1, [pc, #12]	@ (8007664 <stdio_exit_handler+0x10>)
 8007658:	4803      	ldr	r0, [pc, #12]	@ (8007668 <stdio_exit_handler+0x14>)
 800765a:	f000 b869 	b.w	8007730 <_fwalk_sglue>
 800765e:	bf00      	nop
 8007660:	2400069c 	.word	0x2400069c
 8007664:	0800856d 	.word	0x0800856d
 8007668:	240006ac 	.word	0x240006ac

0800766c <cleanup_stdio>:
 800766c:	6841      	ldr	r1, [r0, #4]
 800766e:	4b0c      	ldr	r3, [pc, #48]	@ (80076a0 <cleanup_stdio+0x34>)
 8007670:	4299      	cmp	r1, r3
 8007672:	b510      	push	{r4, lr}
 8007674:	4604      	mov	r4, r0
 8007676:	d001      	beq.n	800767c <cleanup_stdio+0x10>
 8007678:	f000 ff78 	bl	800856c <_fflush_r>
 800767c:	68a1      	ldr	r1, [r4, #8]
 800767e:	4b09      	ldr	r3, [pc, #36]	@ (80076a4 <cleanup_stdio+0x38>)
 8007680:	4299      	cmp	r1, r3
 8007682:	d002      	beq.n	800768a <cleanup_stdio+0x1e>
 8007684:	4620      	mov	r0, r4
 8007686:	f000 ff71 	bl	800856c <_fflush_r>
 800768a:	68e1      	ldr	r1, [r4, #12]
 800768c:	4b06      	ldr	r3, [pc, #24]	@ (80076a8 <cleanup_stdio+0x3c>)
 800768e:	4299      	cmp	r1, r3
 8007690:	d004      	beq.n	800769c <cleanup_stdio+0x30>
 8007692:	4620      	mov	r0, r4
 8007694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007698:	f000 bf68 	b.w	800856c <_fflush_r>
 800769c:	bd10      	pop	{r4, pc}
 800769e:	bf00      	nop
 80076a0:	24000900 	.word	0x24000900
 80076a4:	24000968 	.word	0x24000968
 80076a8:	240009d0 	.word	0x240009d0

080076ac <global_stdio_init.part.0>:
 80076ac:	b510      	push	{r4, lr}
 80076ae:	4b0b      	ldr	r3, [pc, #44]	@ (80076dc <global_stdio_init.part.0+0x30>)
 80076b0:	4c0b      	ldr	r4, [pc, #44]	@ (80076e0 <global_stdio_init.part.0+0x34>)
 80076b2:	4a0c      	ldr	r2, [pc, #48]	@ (80076e4 <global_stdio_init.part.0+0x38>)
 80076b4:	601a      	str	r2, [r3, #0]
 80076b6:	4620      	mov	r0, r4
 80076b8:	2200      	movs	r2, #0
 80076ba:	2104      	movs	r1, #4
 80076bc:	f7ff ff94 	bl	80075e8 <std>
 80076c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80076c4:	2201      	movs	r2, #1
 80076c6:	2109      	movs	r1, #9
 80076c8:	f7ff ff8e 	bl	80075e8 <std>
 80076cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80076d0:	2202      	movs	r2, #2
 80076d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076d6:	2112      	movs	r1, #18
 80076d8:	f7ff bf86 	b.w	80075e8 <std>
 80076dc:	24000a38 	.word	0x24000a38
 80076e0:	24000900 	.word	0x24000900
 80076e4:	08007655 	.word	0x08007655

080076e8 <__sfp_lock_acquire>:
 80076e8:	4801      	ldr	r0, [pc, #4]	@ (80076f0 <__sfp_lock_acquire+0x8>)
 80076ea:	f000 ba30 	b.w	8007b4e <__retarget_lock_acquire_recursive>
 80076ee:	bf00      	nop
 80076f0:	24000a41 	.word	0x24000a41

080076f4 <__sfp_lock_release>:
 80076f4:	4801      	ldr	r0, [pc, #4]	@ (80076fc <__sfp_lock_release+0x8>)
 80076f6:	f000 ba2b 	b.w	8007b50 <__retarget_lock_release_recursive>
 80076fa:	bf00      	nop
 80076fc:	24000a41 	.word	0x24000a41

08007700 <__sinit>:
 8007700:	b510      	push	{r4, lr}
 8007702:	4604      	mov	r4, r0
 8007704:	f7ff fff0 	bl	80076e8 <__sfp_lock_acquire>
 8007708:	6a23      	ldr	r3, [r4, #32]
 800770a:	b11b      	cbz	r3, 8007714 <__sinit+0x14>
 800770c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007710:	f7ff bff0 	b.w	80076f4 <__sfp_lock_release>
 8007714:	4b04      	ldr	r3, [pc, #16]	@ (8007728 <__sinit+0x28>)
 8007716:	6223      	str	r3, [r4, #32]
 8007718:	4b04      	ldr	r3, [pc, #16]	@ (800772c <__sinit+0x2c>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1f5      	bne.n	800770c <__sinit+0xc>
 8007720:	f7ff ffc4 	bl	80076ac <global_stdio_init.part.0>
 8007724:	e7f2      	b.n	800770c <__sinit+0xc>
 8007726:	bf00      	nop
 8007728:	0800766d 	.word	0x0800766d
 800772c:	24000a38 	.word	0x24000a38

08007730 <_fwalk_sglue>:
 8007730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007734:	4607      	mov	r7, r0
 8007736:	4688      	mov	r8, r1
 8007738:	4614      	mov	r4, r2
 800773a:	2600      	movs	r6, #0
 800773c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007740:	f1b9 0901 	subs.w	r9, r9, #1
 8007744:	d505      	bpl.n	8007752 <_fwalk_sglue+0x22>
 8007746:	6824      	ldr	r4, [r4, #0]
 8007748:	2c00      	cmp	r4, #0
 800774a:	d1f7      	bne.n	800773c <_fwalk_sglue+0xc>
 800774c:	4630      	mov	r0, r6
 800774e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007752:	89ab      	ldrh	r3, [r5, #12]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d907      	bls.n	8007768 <_fwalk_sglue+0x38>
 8007758:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800775c:	3301      	adds	r3, #1
 800775e:	d003      	beq.n	8007768 <_fwalk_sglue+0x38>
 8007760:	4629      	mov	r1, r5
 8007762:	4638      	mov	r0, r7
 8007764:	47c0      	blx	r8
 8007766:	4306      	orrs	r6, r0
 8007768:	3568      	adds	r5, #104	@ 0x68
 800776a:	e7e9      	b.n	8007740 <_fwalk_sglue+0x10>

0800776c <iprintf>:
 800776c:	b40f      	push	{r0, r1, r2, r3}
 800776e:	b507      	push	{r0, r1, r2, lr}
 8007770:	4906      	ldr	r1, [pc, #24]	@ (800778c <iprintf+0x20>)
 8007772:	ab04      	add	r3, sp, #16
 8007774:	6808      	ldr	r0, [r1, #0]
 8007776:	f853 2b04 	ldr.w	r2, [r3], #4
 800777a:	6881      	ldr	r1, [r0, #8]
 800777c:	9301      	str	r3, [sp, #4]
 800777e:	f000 fbcb 	bl	8007f18 <_vfiprintf_r>
 8007782:	b003      	add	sp, #12
 8007784:	f85d eb04 	ldr.w	lr, [sp], #4
 8007788:	b004      	add	sp, #16
 800778a:	4770      	bx	lr
 800778c:	240006a8 	.word	0x240006a8

08007790 <_puts_r>:
 8007790:	6a03      	ldr	r3, [r0, #32]
 8007792:	b570      	push	{r4, r5, r6, lr}
 8007794:	6884      	ldr	r4, [r0, #8]
 8007796:	4605      	mov	r5, r0
 8007798:	460e      	mov	r6, r1
 800779a:	b90b      	cbnz	r3, 80077a0 <_puts_r+0x10>
 800779c:	f7ff ffb0 	bl	8007700 <__sinit>
 80077a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80077a2:	07db      	lsls	r3, r3, #31
 80077a4:	d405      	bmi.n	80077b2 <_puts_r+0x22>
 80077a6:	89a3      	ldrh	r3, [r4, #12]
 80077a8:	0598      	lsls	r0, r3, #22
 80077aa:	d402      	bmi.n	80077b2 <_puts_r+0x22>
 80077ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077ae:	f000 f9ce 	bl	8007b4e <__retarget_lock_acquire_recursive>
 80077b2:	89a3      	ldrh	r3, [r4, #12]
 80077b4:	0719      	lsls	r1, r3, #28
 80077b6:	d502      	bpl.n	80077be <_puts_r+0x2e>
 80077b8:	6923      	ldr	r3, [r4, #16]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d135      	bne.n	800782a <_puts_r+0x9a>
 80077be:	4621      	mov	r1, r4
 80077c0:	4628      	mov	r0, r5
 80077c2:	f000 f8e5 	bl	8007990 <__swsetup_r>
 80077c6:	b380      	cbz	r0, 800782a <_puts_r+0x9a>
 80077c8:	f04f 35ff 	mov.w	r5, #4294967295
 80077cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80077ce:	07da      	lsls	r2, r3, #31
 80077d0:	d405      	bmi.n	80077de <_puts_r+0x4e>
 80077d2:	89a3      	ldrh	r3, [r4, #12]
 80077d4:	059b      	lsls	r3, r3, #22
 80077d6:	d402      	bmi.n	80077de <_puts_r+0x4e>
 80077d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077da:	f000 f9b9 	bl	8007b50 <__retarget_lock_release_recursive>
 80077de:	4628      	mov	r0, r5
 80077e0:	bd70      	pop	{r4, r5, r6, pc}
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	da04      	bge.n	80077f0 <_puts_r+0x60>
 80077e6:	69a2      	ldr	r2, [r4, #24]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	dc17      	bgt.n	800781c <_puts_r+0x8c>
 80077ec:	290a      	cmp	r1, #10
 80077ee:	d015      	beq.n	800781c <_puts_r+0x8c>
 80077f0:	6823      	ldr	r3, [r4, #0]
 80077f2:	1c5a      	adds	r2, r3, #1
 80077f4:	6022      	str	r2, [r4, #0]
 80077f6:	7019      	strb	r1, [r3, #0]
 80077f8:	68a3      	ldr	r3, [r4, #8]
 80077fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80077fe:	3b01      	subs	r3, #1
 8007800:	60a3      	str	r3, [r4, #8]
 8007802:	2900      	cmp	r1, #0
 8007804:	d1ed      	bne.n	80077e2 <_puts_r+0x52>
 8007806:	2b00      	cmp	r3, #0
 8007808:	da11      	bge.n	800782e <_puts_r+0x9e>
 800780a:	4622      	mov	r2, r4
 800780c:	210a      	movs	r1, #10
 800780e:	4628      	mov	r0, r5
 8007810:	f000 f87f 	bl	8007912 <__swbuf_r>
 8007814:	3001      	adds	r0, #1
 8007816:	d0d7      	beq.n	80077c8 <_puts_r+0x38>
 8007818:	250a      	movs	r5, #10
 800781a:	e7d7      	b.n	80077cc <_puts_r+0x3c>
 800781c:	4622      	mov	r2, r4
 800781e:	4628      	mov	r0, r5
 8007820:	f000 f877 	bl	8007912 <__swbuf_r>
 8007824:	3001      	adds	r0, #1
 8007826:	d1e7      	bne.n	80077f8 <_puts_r+0x68>
 8007828:	e7ce      	b.n	80077c8 <_puts_r+0x38>
 800782a:	3e01      	subs	r6, #1
 800782c:	e7e4      	b.n	80077f8 <_puts_r+0x68>
 800782e:	6823      	ldr	r3, [r4, #0]
 8007830:	1c5a      	adds	r2, r3, #1
 8007832:	6022      	str	r2, [r4, #0]
 8007834:	220a      	movs	r2, #10
 8007836:	701a      	strb	r2, [r3, #0]
 8007838:	e7ee      	b.n	8007818 <_puts_r+0x88>
	...

0800783c <puts>:
 800783c:	4b02      	ldr	r3, [pc, #8]	@ (8007848 <puts+0xc>)
 800783e:	4601      	mov	r1, r0
 8007840:	6818      	ldr	r0, [r3, #0]
 8007842:	f7ff bfa5 	b.w	8007790 <_puts_r>
 8007846:	bf00      	nop
 8007848:	240006a8 	.word	0x240006a8

0800784c <siprintf>:
 800784c:	b40e      	push	{r1, r2, r3}
 800784e:	b500      	push	{lr}
 8007850:	b09c      	sub	sp, #112	@ 0x70
 8007852:	ab1d      	add	r3, sp, #116	@ 0x74
 8007854:	9002      	str	r0, [sp, #8]
 8007856:	9006      	str	r0, [sp, #24]
 8007858:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800785c:	4809      	ldr	r0, [pc, #36]	@ (8007884 <siprintf+0x38>)
 800785e:	9107      	str	r1, [sp, #28]
 8007860:	9104      	str	r1, [sp, #16]
 8007862:	4909      	ldr	r1, [pc, #36]	@ (8007888 <siprintf+0x3c>)
 8007864:	f853 2b04 	ldr.w	r2, [r3], #4
 8007868:	9105      	str	r1, [sp, #20]
 800786a:	6800      	ldr	r0, [r0, #0]
 800786c:	9301      	str	r3, [sp, #4]
 800786e:	a902      	add	r1, sp, #8
 8007870:	f000 fa2c 	bl	8007ccc <_svfiprintf_r>
 8007874:	9b02      	ldr	r3, [sp, #8]
 8007876:	2200      	movs	r2, #0
 8007878:	701a      	strb	r2, [r3, #0]
 800787a:	b01c      	add	sp, #112	@ 0x70
 800787c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007880:	b003      	add	sp, #12
 8007882:	4770      	bx	lr
 8007884:	240006a8 	.word	0x240006a8
 8007888:	ffff0208 	.word	0xffff0208

0800788c <__sread>:
 800788c:	b510      	push	{r4, lr}
 800788e:	460c      	mov	r4, r1
 8007890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007894:	f000 f8fc 	bl	8007a90 <_read_r>
 8007898:	2800      	cmp	r0, #0
 800789a:	bfab      	itete	ge
 800789c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800789e:	89a3      	ldrhlt	r3, [r4, #12]
 80078a0:	181b      	addge	r3, r3, r0
 80078a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80078a6:	bfac      	ite	ge
 80078a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80078aa:	81a3      	strhlt	r3, [r4, #12]
 80078ac:	bd10      	pop	{r4, pc}

080078ae <__swrite>:
 80078ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078b2:	461f      	mov	r7, r3
 80078b4:	898b      	ldrh	r3, [r1, #12]
 80078b6:	05db      	lsls	r3, r3, #23
 80078b8:	4605      	mov	r5, r0
 80078ba:	460c      	mov	r4, r1
 80078bc:	4616      	mov	r6, r2
 80078be:	d505      	bpl.n	80078cc <__swrite+0x1e>
 80078c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078c4:	2302      	movs	r3, #2
 80078c6:	2200      	movs	r2, #0
 80078c8:	f000 f8d0 	bl	8007a6c <_lseek_r>
 80078cc:	89a3      	ldrh	r3, [r4, #12]
 80078ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078d6:	81a3      	strh	r3, [r4, #12]
 80078d8:	4632      	mov	r2, r6
 80078da:	463b      	mov	r3, r7
 80078dc:	4628      	mov	r0, r5
 80078de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078e2:	f000 b8f7 	b.w	8007ad4 <_write_r>

080078e6 <__sseek>:
 80078e6:	b510      	push	{r4, lr}
 80078e8:	460c      	mov	r4, r1
 80078ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ee:	f000 f8bd 	bl	8007a6c <_lseek_r>
 80078f2:	1c43      	adds	r3, r0, #1
 80078f4:	89a3      	ldrh	r3, [r4, #12]
 80078f6:	bf15      	itete	ne
 80078f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80078fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80078fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007902:	81a3      	strheq	r3, [r4, #12]
 8007904:	bf18      	it	ne
 8007906:	81a3      	strhne	r3, [r4, #12]
 8007908:	bd10      	pop	{r4, pc}

0800790a <__sclose>:
 800790a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800790e:	f000 b89d 	b.w	8007a4c <_close_r>

08007912 <__swbuf_r>:
 8007912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007914:	460e      	mov	r6, r1
 8007916:	4614      	mov	r4, r2
 8007918:	4605      	mov	r5, r0
 800791a:	b118      	cbz	r0, 8007924 <__swbuf_r+0x12>
 800791c:	6a03      	ldr	r3, [r0, #32]
 800791e:	b90b      	cbnz	r3, 8007924 <__swbuf_r+0x12>
 8007920:	f7ff feee 	bl	8007700 <__sinit>
 8007924:	69a3      	ldr	r3, [r4, #24]
 8007926:	60a3      	str	r3, [r4, #8]
 8007928:	89a3      	ldrh	r3, [r4, #12]
 800792a:	071a      	lsls	r2, r3, #28
 800792c:	d501      	bpl.n	8007932 <__swbuf_r+0x20>
 800792e:	6923      	ldr	r3, [r4, #16]
 8007930:	b943      	cbnz	r3, 8007944 <__swbuf_r+0x32>
 8007932:	4621      	mov	r1, r4
 8007934:	4628      	mov	r0, r5
 8007936:	f000 f82b 	bl	8007990 <__swsetup_r>
 800793a:	b118      	cbz	r0, 8007944 <__swbuf_r+0x32>
 800793c:	f04f 37ff 	mov.w	r7, #4294967295
 8007940:	4638      	mov	r0, r7
 8007942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007944:	6823      	ldr	r3, [r4, #0]
 8007946:	6922      	ldr	r2, [r4, #16]
 8007948:	1a98      	subs	r0, r3, r2
 800794a:	6963      	ldr	r3, [r4, #20]
 800794c:	b2f6      	uxtb	r6, r6
 800794e:	4283      	cmp	r3, r0
 8007950:	4637      	mov	r7, r6
 8007952:	dc05      	bgt.n	8007960 <__swbuf_r+0x4e>
 8007954:	4621      	mov	r1, r4
 8007956:	4628      	mov	r0, r5
 8007958:	f000 fe08 	bl	800856c <_fflush_r>
 800795c:	2800      	cmp	r0, #0
 800795e:	d1ed      	bne.n	800793c <__swbuf_r+0x2a>
 8007960:	68a3      	ldr	r3, [r4, #8]
 8007962:	3b01      	subs	r3, #1
 8007964:	60a3      	str	r3, [r4, #8]
 8007966:	6823      	ldr	r3, [r4, #0]
 8007968:	1c5a      	adds	r2, r3, #1
 800796a:	6022      	str	r2, [r4, #0]
 800796c:	701e      	strb	r6, [r3, #0]
 800796e:	6962      	ldr	r2, [r4, #20]
 8007970:	1c43      	adds	r3, r0, #1
 8007972:	429a      	cmp	r2, r3
 8007974:	d004      	beq.n	8007980 <__swbuf_r+0x6e>
 8007976:	89a3      	ldrh	r3, [r4, #12]
 8007978:	07db      	lsls	r3, r3, #31
 800797a:	d5e1      	bpl.n	8007940 <__swbuf_r+0x2e>
 800797c:	2e0a      	cmp	r6, #10
 800797e:	d1df      	bne.n	8007940 <__swbuf_r+0x2e>
 8007980:	4621      	mov	r1, r4
 8007982:	4628      	mov	r0, r5
 8007984:	f000 fdf2 	bl	800856c <_fflush_r>
 8007988:	2800      	cmp	r0, #0
 800798a:	d0d9      	beq.n	8007940 <__swbuf_r+0x2e>
 800798c:	e7d6      	b.n	800793c <__swbuf_r+0x2a>
	...

08007990 <__swsetup_r>:
 8007990:	b538      	push	{r3, r4, r5, lr}
 8007992:	4b29      	ldr	r3, [pc, #164]	@ (8007a38 <__swsetup_r+0xa8>)
 8007994:	4605      	mov	r5, r0
 8007996:	6818      	ldr	r0, [r3, #0]
 8007998:	460c      	mov	r4, r1
 800799a:	b118      	cbz	r0, 80079a4 <__swsetup_r+0x14>
 800799c:	6a03      	ldr	r3, [r0, #32]
 800799e:	b90b      	cbnz	r3, 80079a4 <__swsetup_r+0x14>
 80079a0:	f7ff feae 	bl	8007700 <__sinit>
 80079a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079a8:	0719      	lsls	r1, r3, #28
 80079aa:	d422      	bmi.n	80079f2 <__swsetup_r+0x62>
 80079ac:	06da      	lsls	r2, r3, #27
 80079ae:	d407      	bmi.n	80079c0 <__swsetup_r+0x30>
 80079b0:	2209      	movs	r2, #9
 80079b2:	602a      	str	r2, [r5, #0]
 80079b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079b8:	81a3      	strh	r3, [r4, #12]
 80079ba:	f04f 30ff 	mov.w	r0, #4294967295
 80079be:	e033      	b.n	8007a28 <__swsetup_r+0x98>
 80079c0:	0758      	lsls	r0, r3, #29
 80079c2:	d512      	bpl.n	80079ea <__swsetup_r+0x5a>
 80079c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079c6:	b141      	cbz	r1, 80079da <__swsetup_r+0x4a>
 80079c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079cc:	4299      	cmp	r1, r3
 80079ce:	d002      	beq.n	80079d6 <__swsetup_r+0x46>
 80079d0:	4628      	mov	r0, r5
 80079d2:	f000 f8cd 	bl	8007b70 <_free_r>
 80079d6:	2300      	movs	r3, #0
 80079d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80079da:	89a3      	ldrh	r3, [r4, #12]
 80079dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80079e0:	81a3      	strh	r3, [r4, #12]
 80079e2:	2300      	movs	r3, #0
 80079e4:	6063      	str	r3, [r4, #4]
 80079e6:	6923      	ldr	r3, [r4, #16]
 80079e8:	6023      	str	r3, [r4, #0]
 80079ea:	89a3      	ldrh	r3, [r4, #12]
 80079ec:	f043 0308 	orr.w	r3, r3, #8
 80079f0:	81a3      	strh	r3, [r4, #12]
 80079f2:	6923      	ldr	r3, [r4, #16]
 80079f4:	b94b      	cbnz	r3, 8007a0a <__swsetup_r+0x7a>
 80079f6:	89a3      	ldrh	r3, [r4, #12]
 80079f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80079fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a00:	d003      	beq.n	8007a0a <__swsetup_r+0x7a>
 8007a02:	4621      	mov	r1, r4
 8007a04:	4628      	mov	r0, r5
 8007a06:	f000 fdff 	bl	8008608 <__smakebuf_r>
 8007a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a0e:	f013 0201 	ands.w	r2, r3, #1
 8007a12:	d00a      	beq.n	8007a2a <__swsetup_r+0x9a>
 8007a14:	2200      	movs	r2, #0
 8007a16:	60a2      	str	r2, [r4, #8]
 8007a18:	6962      	ldr	r2, [r4, #20]
 8007a1a:	4252      	negs	r2, r2
 8007a1c:	61a2      	str	r2, [r4, #24]
 8007a1e:	6922      	ldr	r2, [r4, #16]
 8007a20:	b942      	cbnz	r2, 8007a34 <__swsetup_r+0xa4>
 8007a22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007a26:	d1c5      	bne.n	80079b4 <__swsetup_r+0x24>
 8007a28:	bd38      	pop	{r3, r4, r5, pc}
 8007a2a:	0799      	lsls	r1, r3, #30
 8007a2c:	bf58      	it	pl
 8007a2e:	6962      	ldrpl	r2, [r4, #20]
 8007a30:	60a2      	str	r2, [r4, #8]
 8007a32:	e7f4      	b.n	8007a1e <__swsetup_r+0x8e>
 8007a34:	2000      	movs	r0, #0
 8007a36:	e7f7      	b.n	8007a28 <__swsetup_r+0x98>
 8007a38:	240006a8 	.word	0x240006a8

08007a3c <memset>:
 8007a3c:	4402      	add	r2, r0
 8007a3e:	4603      	mov	r3, r0
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d100      	bne.n	8007a46 <memset+0xa>
 8007a44:	4770      	bx	lr
 8007a46:	f803 1b01 	strb.w	r1, [r3], #1
 8007a4a:	e7f9      	b.n	8007a40 <memset+0x4>

08007a4c <_close_r>:
 8007a4c:	b538      	push	{r3, r4, r5, lr}
 8007a4e:	4d06      	ldr	r5, [pc, #24]	@ (8007a68 <_close_r+0x1c>)
 8007a50:	2300      	movs	r3, #0
 8007a52:	4604      	mov	r4, r0
 8007a54:	4608      	mov	r0, r1
 8007a56:	602b      	str	r3, [r5, #0]
 8007a58:	f000 fe4e 	bl	80086f8 <_close>
 8007a5c:	1c43      	adds	r3, r0, #1
 8007a5e:	d102      	bne.n	8007a66 <_close_r+0x1a>
 8007a60:	682b      	ldr	r3, [r5, #0]
 8007a62:	b103      	cbz	r3, 8007a66 <_close_r+0x1a>
 8007a64:	6023      	str	r3, [r4, #0]
 8007a66:	bd38      	pop	{r3, r4, r5, pc}
 8007a68:	24000a3c 	.word	0x24000a3c

08007a6c <_lseek_r>:
 8007a6c:	b538      	push	{r3, r4, r5, lr}
 8007a6e:	4d07      	ldr	r5, [pc, #28]	@ (8007a8c <_lseek_r+0x20>)
 8007a70:	4604      	mov	r4, r0
 8007a72:	4608      	mov	r0, r1
 8007a74:	4611      	mov	r1, r2
 8007a76:	2200      	movs	r2, #0
 8007a78:	602a      	str	r2, [r5, #0]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	f000 fe54 	bl	8008728 <_lseek>
 8007a80:	1c43      	adds	r3, r0, #1
 8007a82:	d102      	bne.n	8007a8a <_lseek_r+0x1e>
 8007a84:	682b      	ldr	r3, [r5, #0]
 8007a86:	b103      	cbz	r3, 8007a8a <_lseek_r+0x1e>
 8007a88:	6023      	str	r3, [r4, #0]
 8007a8a:	bd38      	pop	{r3, r4, r5, pc}
 8007a8c:	24000a3c 	.word	0x24000a3c

08007a90 <_read_r>:
 8007a90:	b538      	push	{r3, r4, r5, lr}
 8007a92:	4d07      	ldr	r5, [pc, #28]	@ (8007ab0 <_read_r+0x20>)
 8007a94:	4604      	mov	r4, r0
 8007a96:	4608      	mov	r0, r1
 8007a98:	4611      	mov	r1, r2
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	602a      	str	r2, [r5, #0]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	f000 fe4a 	bl	8008738 <_read>
 8007aa4:	1c43      	adds	r3, r0, #1
 8007aa6:	d102      	bne.n	8007aae <_read_r+0x1e>
 8007aa8:	682b      	ldr	r3, [r5, #0]
 8007aaa:	b103      	cbz	r3, 8007aae <_read_r+0x1e>
 8007aac:	6023      	str	r3, [r4, #0]
 8007aae:	bd38      	pop	{r3, r4, r5, pc}
 8007ab0:	24000a3c 	.word	0x24000a3c

08007ab4 <_sbrk_r>:
 8007ab4:	b538      	push	{r3, r4, r5, lr}
 8007ab6:	4d06      	ldr	r5, [pc, #24]	@ (8007ad0 <_sbrk_r+0x1c>)
 8007ab8:	2300      	movs	r3, #0
 8007aba:	4604      	mov	r4, r0
 8007abc:	4608      	mov	r0, r1
 8007abe:	602b      	str	r3, [r5, #0]
 8007ac0:	f7f8 ffe4 	bl	8000a8c <_sbrk>
 8007ac4:	1c43      	adds	r3, r0, #1
 8007ac6:	d102      	bne.n	8007ace <_sbrk_r+0x1a>
 8007ac8:	682b      	ldr	r3, [r5, #0]
 8007aca:	b103      	cbz	r3, 8007ace <_sbrk_r+0x1a>
 8007acc:	6023      	str	r3, [r4, #0]
 8007ace:	bd38      	pop	{r3, r4, r5, pc}
 8007ad0:	24000a3c 	.word	0x24000a3c

08007ad4 <_write_r>:
 8007ad4:	b538      	push	{r3, r4, r5, lr}
 8007ad6:	4d07      	ldr	r5, [pc, #28]	@ (8007af4 <_write_r+0x20>)
 8007ad8:	4604      	mov	r4, r0
 8007ada:	4608      	mov	r0, r1
 8007adc:	4611      	mov	r1, r2
 8007ade:	2200      	movs	r2, #0
 8007ae0:	602a      	str	r2, [r5, #0]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	f000 fe30 	bl	8008748 <_write>
 8007ae8:	1c43      	adds	r3, r0, #1
 8007aea:	d102      	bne.n	8007af2 <_write_r+0x1e>
 8007aec:	682b      	ldr	r3, [r5, #0]
 8007aee:	b103      	cbz	r3, 8007af2 <_write_r+0x1e>
 8007af0:	6023      	str	r3, [r4, #0]
 8007af2:	bd38      	pop	{r3, r4, r5, pc}
 8007af4:	24000a3c 	.word	0x24000a3c

08007af8 <__errno>:
 8007af8:	4b01      	ldr	r3, [pc, #4]	@ (8007b00 <__errno+0x8>)
 8007afa:	6818      	ldr	r0, [r3, #0]
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	240006a8 	.word	0x240006a8

08007b04 <__libc_init_array>:
 8007b04:	b570      	push	{r4, r5, r6, lr}
 8007b06:	4d0d      	ldr	r5, [pc, #52]	@ (8007b3c <__libc_init_array+0x38>)
 8007b08:	4c0d      	ldr	r4, [pc, #52]	@ (8007b40 <__libc_init_array+0x3c>)
 8007b0a:	1b64      	subs	r4, r4, r5
 8007b0c:	10a4      	asrs	r4, r4, #2
 8007b0e:	2600      	movs	r6, #0
 8007b10:	42a6      	cmp	r6, r4
 8007b12:	d109      	bne.n	8007b28 <__libc_init_array+0x24>
 8007b14:	4d0b      	ldr	r5, [pc, #44]	@ (8007b44 <__libc_init_array+0x40>)
 8007b16:	4c0c      	ldr	r4, [pc, #48]	@ (8007b48 <__libc_init_array+0x44>)
 8007b18:	f000 fe1e 	bl	8008758 <_init>
 8007b1c:	1b64      	subs	r4, r4, r5
 8007b1e:	10a4      	asrs	r4, r4, #2
 8007b20:	2600      	movs	r6, #0
 8007b22:	42a6      	cmp	r6, r4
 8007b24:	d105      	bne.n	8007b32 <__libc_init_array+0x2e>
 8007b26:	bd70      	pop	{r4, r5, r6, pc}
 8007b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b2c:	4798      	blx	r3
 8007b2e:	3601      	adds	r6, #1
 8007b30:	e7ee      	b.n	8007b10 <__libc_init_array+0xc>
 8007b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b36:	4798      	blx	r3
 8007b38:	3601      	adds	r6, #1
 8007b3a:	e7f2      	b.n	8007b22 <__libc_init_array+0x1e>
 8007b3c:	08008e64 	.word	0x08008e64
 8007b40:	08008e64 	.word	0x08008e64
 8007b44:	08008e64 	.word	0x08008e64
 8007b48:	08008e68 	.word	0x08008e68

08007b4c <__retarget_lock_init_recursive>:
 8007b4c:	4770      	bx	lr

08007b4e <__retarget_lock_acquire_recursive>:
 8007b4e:	4770      	bx	lr

08007b50 <__retarget_lock_release_recursive>:
 8007b50:	4770      	bx	lr

08007b52 <memcpy>:
 8007b52:	440a      	add	r2, r1
 8007b54:	4291      	cmp	r1, r2
 8007b56:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b5a:	d100      	bne.n	8007b5e <memcpy+0xc>
 8007b5c:	4770      	bx	lr
 8007b5e:	b510      	push	{r4, lr}
 8007b60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b68:	4291      	cmp	r1, r2
 8007b6a:	d1f9      	bne.n	8007b60 <memcpy+0xe>
 8007b6c:	bd10      	pop	{r4, pc}
	...

08007b70 <_free_r>:
 8007b70:	b538      	push	{r3, r4, r5, lr}
 8007b72:	4605      	mov	r5, r0
 8007b74:	2900      	cmp	r1, #0
 8007b76:	d041      	beq.n	8007bfc <_free_r+0x8c>
 8007b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b7c:	1f0c      	subs	r4, r1, #4
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	bfb8      	it	lt
 8007b82:	18e4      	addlt	r4, r4, r3
 8007b84:	f7ff fcf6 	bl	8007574 <__malloc_lock>
 8007b88:	4a1d      	ldr	r2, [pc, #116]	@ (8007c00 <_free_r+0x90>)
 8007b8a:	6813      	ldr	r3, [r2, #0]
 8007b8c:	b933      	cbnz	r3, 8007b9c <_free_r+0x2c>
 8007b8e:	6063      	str	r3, [r4, #4]
 8007b90:	6014      	str	r4, [r2, #0]
 8007b92:	4628      	mov	r0, r5
 8007b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b98:	f7ff bcf2 	b.w	8007580 <__malloc_unlock>
 8007b9c:	42a3      	cmp	r3, r4
 8007b9e:	d908      	bls.n	8007bb2 <_free_r+0x42>
 8007ba0:	6820      	ldr	r0, [r4, #0]
 8007ba2:	1821      	adds	r1, r4, r0
 8007ba4:	428b      	cmp	r3, r1
 8007ba6:	bf01      	itttt	eq
 8007ba8:	6819      	ldreq	r1, [r3, #0]
 8007baa:	685b      	ldreq	r3, [r3, #4]
 8007bac:	1809      	addeq	r1, r1, r0
 8007bae:	6021      	streq	r1, [r4, #0]
 8007bb0:	e7ed      	b.n	8007b8e <_free_r+0x1e>
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	b10b      	cbz	r3, 8007bbc <_free_r+0x4c>
 8007bb8:	42a3      	cmp	r3, r4
 8007bba:	d9fa      	bls.n	8007bb2 <_free_r+0x42>
 8007bbc:	6811      	ldr	r1, [r2, #0]
 8007bbe:	1850      	adds	r0, r2, r1
 8007bc0:	42a0      	cmp	r0, r4
 8007bc2:	d10b      	bne.n	8007bdc <_free_r+0x6c>
 8007bc4:	6820      	ldr	r0, [r4, #0]
 8007bc6:	4401      	add	r1, r0
 8007bc8:	1850      	adds	r0, r2, r1
 8007bca:	4283      	cmp	r3, r0
 8007bcc:	6011      	str	r1, [r2, #0]
 8007bce:	d1e0      	bne.n	8007b92 <_free_r+0x22>
 8007bd0:	6818      	ldr	r0, [r3, #0]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	6053      	str	r3, [r2, #4]
 8007bd6:	4408      	add	r0, r1
 8007bd8:	6010      	str	r0, [r2, #0]
 8007bda:	e7da      	b.n	8007b92 <_free_r+0x22>
 8007bdc:	d902      	bls.n	8007be4 <_free_r+0x74>
 8007bde:	230c      	movs	r3, #12
 8007be0:	602b      	str	r3, [r5, #0]
 8007be2:	e7d6      	b.n	8007b92 <_free_r+0x22>
 8007be4:	6820      	ldr	r0, [r4, #0]
 8007be6:	1821      	adds	r1, r4, r0
 8007be8:	428b      	cmp	r3, r1
 8007bea:	bf04      	itt	eq
 8007bec:	6819      	ldreq	r1, [r3, #0]
 8007bee:	685b      	ldreq	r3, [r3, #4]
 8007bf0:	6063      	str	r3, [r4, #4]
 8007bf2:	bf04      	itt	eq
 8007bf4:	1809      	addeq	r1, r1, r0
 8007bf6:	6021      	streq	r1, [r4, #0]
 8007bf8:	6054      	str	r4, [r2, #4]
 8007bfa:	e7ca      	b.n	8007b92 <_free_r+0x22>
 8007bfc:	bd38      	pop	{r3, r4, r5, pc}
 8007bfe:	bf00      	nop
 8007c00:	240008fc 	.word	0x240008fc

08007c04 <_malloc_usable_size_r>:
 8007c04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c08:	1f18      	subs	r0, r3, #4
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	bfbc      	itt	lt
 8007c0e:	580b      	ldrlt	r3, [r1, r0]
 8007c10:	18c0      	addlt	r0, r0, r3
 8007c12:	4770      	bx	lr

08007c14 <__ssputs_r>:
 8007c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c18:	688e      	ldr	r6, [r1, #8]
 8007c1a:	461f      	mov	r7, r3
 8007c1c:	42be      	cmp	r6, r7
 8007c1e:	680b      	ldr	r3, [r1, #0]
 8007c20:	4682      	mov	sl, r0
 8007c22:	460c      	mov	r4, r1
 8007c24:	4690      	mov	r8, r2
 8007c26:	d82d      	bhi.n	8007c84 <__ssputs_r+0x70>
 8007c28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007c30:	d026      	beq.n	8007c80 <__ssputs_r+0x6c>
 8007c32:	6965      	ldr	r5, [r4, #20]
 8007c34:	6909      	ldr	r1, [r1, #16]
 8007c36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c3a:	eba3 0901 	sub.w	r9, r3, r1
 8007c3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c42:	1c7b      	adds	r3, r7, #1
 8007c44:	444b      	add	r3, r9
 8007c46:	106d      	asrs	r5, r5, #1
 8007c48:	429d      	cmp	r5, r3
 8007c4a:	bf38      	it	cc
 8007c4c:	461d      	movcc	r5, r3
 8007c4e:	0553      	lsls	r3, r2, #21
 8007c50:	d527      	bpl.n	8007ca2 <__ssputs_r+0x8e>
 8007c52:	4629      	mov	r1, r5
 8007c54:	f7ff fc0e 	bl	8007474 <_malloc_r>
 8007c58:	4606      	mov	r6, r0
 8007c5a:	b360      	cbz	r0, 8007cb6 <__ssputs_r+0xa2>
 8007c5c:	6921      	ldr	r1, [r4, #16]
 8007c5e:	464a      	mov	r2, r9
 8007c60:	f7ff ff77 	bl	8007b52 <memcpy>
 8007c64:	89a3      	ldrh	r3, [r4, #12]
 8007c66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007c6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c6e:	81a3      	strh	r3, [r4, #12]
 8007c70:	6126      	str	r6, [r4, #16]
 8007c72:	6165      	str	r5, [r4, #20]
 8007c74:	444e      	add	r6, r9
 8007c76:	eba5 0509 	sub.w	r5, r5, r9
 8007c7a:	6026      	str	r6, [r4, #0]
 8007c7c:	60a5      	str	r5, [r4, #8]
 8007c7e:	463e      	mov	r6, r7
 8007c80:	42be      	cmp	r6, r7
 8007c82:	d900      	bls.n	8007c86 <__ssputs_r+0x72>
 8007c84:	463e      	mov	r6, r7
 8007c86:	6820      	ldr	r0, [r4, #0]
 8007c88:	4632      	mov	r2, r6
 8007c8a:	4641      	mov	r1, r8
 8007c8c:	f000 fcf8 	bl	8008680 <memmove>
 8007c90:	68a3      	ldr	r3, [r4, #8]
 8007c92:	1b9b      	subs	r3, r3, r6
 8007c94:	60a3      	str	r3, [r4, #8]
 8007c96:	6823      	ldr	r3, [r4, #0]
 8007c98:	4433      	add	r3, r6
 8007c9a:	6023      	str	r3, [r4, #0]
 8007c9c:	2000      	movs	r0, #0
 8007c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ca2:	462a      	mov	r2, r5
 8007ca4:	f7ff fc72 	bl	800758c <_realloc_r>
 8007ca8:	4606      	mov	r6, r0
 8007caa:	2800      	cmp	r0, #0
 8007cac:	d1e0      	bne.n	8007c70 <__ssputs_r+0x5c>
 8007cae:	6921      	ldr	r1, [r4, #16]
 8007cb0:	4650      	mov	r0, sl
 8007cb2:	f7ff ff5d 	bl	8007b70 <_free_r>
 8007cb6:	230c      	movs	r3, #12
 8007cb8:	f8ca 3000 	str.w	r3, [sl]
 8007cbc:	89a3      	ldrh	r3, [r4, #12]
 8007cbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cc2:	81a3      	strh	r3, [r4, #12]
 8007cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc8:	e7e9      	b.n	8007c9e <__ssputs_r+0x8a>
	...

08007ccc <_svfiprintf_r>:
 8007ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd0:	4698      	mov	r8, r3
 8007cd2:	898b      	ldrh	r3, [r1, #12]
 8007cd4:	061b      	lsls	r3, r3, #24
 8007cd6:	b09d      	sub	sp, #116	@ 0x74
 8007cd8:	4607      	mov	r7, r0
 8007cda:	460d      	mov	r5, r1
 8007cdc:	4614      	mov	r4, r2
 8007cde:	d510      	bpl.n	8007d02 <_svfiprintf_r+0x36>
 8007ce0:	690b      	ldr	r3, [r1, #16]
 8007ce2:	b973      	cbnz	r3, 8007d02 <_svfiprintf_r+0x36>
 8007ce4:	2140      	movs	r1, #64	@ 0x40
 8007ce6:	f7ff fbc5 	bl	8007474 <_malloc_r>
 8007cea:	6028      	str	r0, [r5, #0]
 8007cec:	6128      	str	r0, [r5, #16]
 8007cee:	b930      	cbnz	r0, 8007cfe <_svfiprintf_r+0x32>
 8007cf0:	230c      	movs	r3, #12
 8007cf2:	603b      	str	r3, [r7, #0]
 8007cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf8:	b01d      	add	sp, #116	@ 0x74
 8007cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cfe:	2340      	movs	r3, #64	@ 0x40
 8007d00:	616b      	str	r3, [r5, #20]
 8007d02:	2300      	movs	r3, #0
 8007d04:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d06:	2320      	movs	r3, #32
 8007d08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d10:	2330      	movs	r3, #48	@ 0x30
 8007d12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007eb0 <_svfiprintf_r+0x1e4>
 8007d16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d1a:	f04f 0901 	mov.w	r9, #1
 8007d1e:	4623      	mov	r3, r4
 8007d20:	469a      	mov	sl, r3
 8007d22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d26:	b10a      	cbz	r2, 8007d2c <_svfiprintf_r+0x60>
 8007d28:	2a25      	cmp	r2, #37	@ 0x25
 8007d2a:	d1f9      	bne.n	8007d20 <_svfiprintf_r+0x54>
 8007d2c:	ebba 0b04 	subs.w	fp, sl, r4
 8007d30:	d00b      	beq.n	8007d4a <_svfiprintf_r+0x7e>
 8007d32:	465b      	mov	r3, fp
 8007d34:	4622      	mov	r2, r4
 8007d36:	4629      	mov	r1, r5
 8007d38:	4638      	mov	r0, r7
 8007d3a:	f7ff ff6b 	bl	8007c14 <__ssputs_r>
 8007d3e:	3001      	adds	r0, #1
 8007d40:	f000 80a7 	beq.w	8007e92 <_svfiprintf_r+0x1c6>
 8007d44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d46:	445a      	add	r2, fp
 8007d48:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d4a:	f89a 3000 	ldrb.w	r3, [sl]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f000 809f 	beq.w	8007e92 <_svfiprintf_r+0x1c6>
 8007d54:	2300      	movs	r3, #0
 8007d56:	f04f 32ff 	mov.w	r2, #4294967295
 8007d5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d5e:	f10a 0a01 	add.w	sl, sl, #1
 8007d62:	9304      	str	r3, [sp, #16]
 8007d64:	9307      	str	r3, [sp, #28]
 8007d66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d6a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d6c:	4654      	mov	r4, sl
 8007d6e:	2205      	movs	r2, #5
 8007d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d74:	484e      	ldr	r0, [pc, #312]	@ (8007eb0 <_svfiprintf_r+0x1e4>)
 8007d76:	f7f8 fab3 	bl	80002e0 <memchr>
 8007d7a:	9a04      	ldr	r2, [sp, #16]
 8007d7c:	b9d8      	cbnz	r0, 8007db6 <_svfiprintf_r+0xea>
 8007d7e:	06d0      	lsls	r0, r2, #27
 8007d80:	bf44      	itt	mi
 8007d82:	2320      	movmi	r3, #32
 8007d84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d88:	0711      	lsls	r1, r2, #28
 8007d8a:	bf44      	itt	mi
 8007d8c:	232b      	movmi	r3, #43	@ 0x2b
 8007d8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d92:	f89a 3000 	ldrb.w	r3, [sl]
 8007d96:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d98:	d015      	beq.n	8007dc6 <_svfiprintf_r+0xfa>
 8007d9a:	9a07      	ldr	r2, [sp, #28]
 8007d9c:	4654      	mov	r4, sl
 8007d9e:	2000      	movs	r0, #0
 8007da0:	f04f 0c0a 	mov.w	ip, #10
 8007da4:	4621      	mov	r1, r4
 8007da6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007daa:	3b30      	subs	r3, #48	@ 0x30
 8007dac:	2b09      	cmp	r3, #9
 8007dae:	d94b      	bls.n	8007e48 <_svfiprintf_r+0x17c>
 8007db0:	b1b0      	cbz	r0, 8007de0 <_svfiprintf_r+0x114>
 8007db2:	9207      	str	r2, [sp, #28]
 8007db4:	e014      	b.n	8007de0 <_svfiprintf_r+0x114>
 8007db6:	eba0 0308 	sub.w	r3, r0, r8
 8007dba:	fa09 f303 	lsl.w	r3, r9, r3
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	9304      	str	r3, [sp, #16]
 8007dc2:	46a2      	mov	sl, r4
 8007dc4:	e7d2      	b.n	8007d6c <_svfiprintf_r+0xa0>
 8007dc6:	9b03      	ldr	r3, [sp, #12]
 8007dc8:	1d19      	adds	r1, r3, #4
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	9103      	str	r1, [sp, #12]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	bfbb      	ittet	lt
 8007dd2:	425b      	neglt	r3, r3
 8007dd4:	f042 0202 	orrlt.w	r2, r2, #2
 8007dd8:	9307      	strge	r3, [sp, #28]
 8007dda:	9307      	strlt	r3, [sp, #28]
 8007ddc:	bfb8      	it	lt
 8007dde:	9204      	strlt	r2, [sp, #16]
 8007de0:	7823      	ldrb	r3, [r4, #0]
 8007de2:	2b2e      	cmp	r3, #46	@ 0x2e
 8007de4:	d10a      	bne.n	8007dfc <_svfiprintf_r+0x130>
 8007de6:	7863      	ldrb	r3, [r4, #1]
 8007de8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007dea:	d132      	bne.n	8007e52 <_svfiprintf_r+0x186>
 8007dec:	9b03      	ldr	r3, [sp, #12]
 8007dee:	1d1a      	adds	r2, r3, #4
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	9203      	str	r2, [sp, #12]
 8007df4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007df8:	3402      	adds	r4, #2
 8007dfa:	9305      	str	r3, [sp, #20]
 8007dfc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007ec0 <_svfiprintf_r+0x1f4>
 8007e00:	7821      	ldrb	r1, [r4, #0]
 8007e02:	2203      	movs	r2, #3
 8007e04:	4650      	mov	r0, sl
 8007e06:	f7f8 fa6b 	bl	80002e0 <memchr>
 8007e0a:	b138      	cbz	r0, 8007e1c <_svfiprintf_r+0x150>
 8007e0c:	9b04      	ldr	r3, [sp, #16]
 8007e0e:	eba0 000a 	sub.w	r0, r0, sl
 8007e12:	2240      	movs	r2, #64	@ 0x40
 8007e14:	4082      	lsls	r2, r0
 8007e16:	4313      	orrs	r3, r2
 8007e18:	3401      	adds	r4, #1
 8007e1a:	9304      	str	r3, [sp, #16]
 8007e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e20:	4824      	ldr	r0, [pc, #144]	@ (8007eb4 <_svfiprintf_r+0x1e8>)
 8007e22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e26:	2206      	movs	r2, #6
 8007e28:	f7f8 fa5a 	bl	80002e0 <memchr>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	d036      	beq.n	8007e9e <_svfiprintf_r+0x1d2>
 8007e30:	4b21      	ldr	r3, [pc, #132]	@ (8007eb8 <_svfiprintf_r+0x1ec>)
 8007e32:	bb1b      	cbnz	r3, 8007e7c <_svfiprintf_r+0x1b0>
 8007e34:	9b03      	ldr	r3, [sp, #12]
 8007e36:	3307      	adds	r3, #7
 8007e38:	f023 0307 	bic.w	r3, r3, #7
 8007e3c:	3308      	adds	r3, #8
 8007e3e:	9303      	str	r3, [sp, #12]
 8007e40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e42:	4433      	add	r3, r6
 8007e44:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e46:	e76a      	b.n	8007d1e <_svfiprintf_r+0x52>
 8007e48:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e4c:	460c      	mov	r4, r1
 8007e4e:	2001      	movs	r0, #1
 8007e50:	e7a8      	b.n	8007da4 <_svfiprintf_r+0xd8>
 8007e52:	2300      	movs	r3, #0
 8007e54:	3401      	adds	r4, #1
 8007e56:	9305      	str	r3, [sp, #20]
 8007e58:	4619      	mov	r1, r3
 8007e5a:	f04f 0c0a 	mov.w	ip, #10
 8007e5e:	4620      	mov	r0, r4
 8007e60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e64:	3a30      	subs	r2, #48	@ 0x30
 8007e66:	2a09      	cmp	r2, #9
 8007e68:	d903      	bls.n	8007e72 <_svfiprintf_r+0x1a6>
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d0c6      	beq.n	8007dfc <_svfiprintf_r+0x130>
 8007e6e:	9105      	str	r1, [sp, #20]
 8007e70:	e7c4      	b.n	8007dfc <_svfiprintf_r+0x130>
 8007e72:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e76:	4604      	mov	r4, r0
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e7f0      	b.n	8007e5e <_svfiprintf_r+0x192>
 8007e7c:	ab03      	add	r3, sp, #12
 8007e7e:	9300      	str	r3, [sp, #0]
 8007e80:	462a      	mov	r2, r5
 8007e82:	4b0e      	ldr	r3, [pc, #56]	@ (8007ebc <_svfiprintf_r+0x1f0>)
 8007e84:	a904      	add	r1, sp, #16
 8007e86:	4638      	mov	r0, r7
 8007e88:	f3af 8000 	nop.w
 8007e8c:	1c42      	adds	r2, r0, #1
 8007e8e:	4606      	mov	r6, r0
 8007e90:	d1d6      	bne.n	8007e40 <_svfiprintf_r+0x174>
 8007e92:	89ab      	ldrh	r3, [r5, #12]
 8007e94:	065b      	lsls	r3, r3, #25
 8007e96:	f53f af2d 	bmi.w	8007cf4 <_svfiprintf_r+0x28>
 8007e9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e9c:	e72c      	b.n	8007cf8 <_svfiprintf_r+0x2c>
 8007e9e:	ab03      	add	r3, sp, #12
 8007ea0:	9300      	str	r3, [sp, #0]
 8007ea2:	462a      	mov	r2, r5
 8007ea4:	4b05      	ldr	r3, [pc, #20]	@ (8007ebc <_svfiprintf_r+0x1f0>)
 8007ea6:	a904      	add	r1, sp, #16
 8007ea8:	4638      	mov	r0, r7
 8007eaa:	f000 f9bb 	bl	8008224 <_printf_i>
 8007eae:	e7ed      	b.n	8007e8c <_svfiprintf_r+0x1c0>
 8007eb0:	08008e28 	.word	0x08008e28
 8007eb4:	08008e32 	.word	0x08008e32
 8007eb8:	00000000 	.word	0x00000000
 8007ebc:	08007c15 	.word	0x08007c15
 8007ec0:	08008e2e 	.word	0x08008e2e

08007ec4 <__sfputc_r>:
 8007ec4:	6893      	ldr	r3, [r2, #8]
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	b410      	push	{r4}
 8007ecc:	6093      	str	r3, [r2, #8]
 8007ece:	da08      	bge.n	8007ee2 <__sfputc_r+0x1e>
 8007ed0:	6994      	ldr	r4, [r2, #24]
 8007ed2:	42a3      	cmp	r3, r4
 8007ed4:	db01      	blt.n	8007eda <__sfputc_r+0x16>
 8007ed6:	290a      	cmp	r1, #10
 8007ed8:	d103      	bne.n	8007ee2 <__sfputc_r+0x1e>
 8007eda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ede:	f7ff bd18 	b.w	8007912 <__swbuf_r>
 8007ee2:	6813      	ldr	r3, [r2, #0]
 8007ee4:	1c58      	adds	r0, r3, #1
 8007ee6:	6010      	str	r0, [r2, #0]
 8007ee8:	7019      	strb	r1, [r3, #0]
 8007eea:	4608      	mov	r0, r1
 8007eec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ef0:	4770      	bx	lr

08007ef2 <__sfputs_r>:
 8007ef2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef4:	4606      	mov	r6, r0
 8007ef6:	460f      	mov	r7, r1
 8007ef8:	4614      	mov	r4, r2
 8007efa:	18d5      	adds	r5, r2, r3
 8007efc:	42ac      	cmp	r4, r5
 8007efe:	d101      	bne.n	8007f04 <__sfputs_r+0x12>
 8007f00:	2000      	movs	r0, #0
 8007f02:	e007      	b.n	8007f14 <__sfputs_r+0x22>
 8007f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f08:	463a      	mov	r2, r7
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	f7ff ffda 	bl	8007ec4 <__sfputc_r>
 8007f10:	1c43      	adds	r3, r0, #1
 8007f12:	d1f3      	bne.n	8007efc <__sfputs_r+0xa>
 8007f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f18 <_vfiprintf_r>:
 8007f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f1c:	460d      	mov	r5, r1
 8007f1e:	b09d      	sub	sp, #116	@ 0x74
 8007f20:	4614      	mov	r4, r2
 8007f22:	4698      	mov	r8, r3
 8007f24:	4606      	mov	r6, r0
 8007f26:	b118      	cbz	r0, 8007f30 <_vfiprintf_r+0x18>
 8007f28:	6a03      	ldr	r3, [r0, #32]
 8007f2a:	b90b      	cbnz	r3, 8007f30 <_vfiprintf_r+0x18>
 8007f2c:	f7ff fbe8 	bl	8007700 <__sinit>
 8007f30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f32:	07d9      	lsls	r1, r3, #31
 8007f34:	d405      	bmi.n	8007f42 <_vfiprintf_r+0x2a>
 8007f36:	89ab      	ldrh	r3, [r5, #12]
 8007f38:	059a      	lsls	r2, r3, #22
 8007f3a:	d402      	bmi.n	8007f42 <_vfiprintf_r+0x2a>
 8007f3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f3e:	f7ff fe06 	bl	8007b4e <__retarget_lock_acquire_recursive>
 8007f42:	89ab      	ldrh	r3, [r5, #12]
 8007f44:	071b      	lsls	r3, r3, #28
 8007f46:	d501      	bpl.n	8007f4c <_vfiprintf_r+0x34>
 8007f48:	692b      	ldr	r3, [r5, #16]
 8007f4a:	b99b      	cbnz	r3, 8007f74 <_vfiprintf_r+0x5c>
 8007f4c:	4629      	mov	r1, r5
 8007f4e:	4630      	mov	r0, r6
 8007f50:	f7ff fd1e 	bl	8007990 <__swsetup_r>
 8007f54:	b170      	cbz	r0, 8007f74 <_vfiprintf_r+0x5c>
 8007f56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f58:	07dc      	lsls	r4, r3, #31
 8007f5a:	d504      	bpl.n	8007f66 <_vfiprintf_r+0x4e>
 8007f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f60:	b01d      	add	sp, #116	@ 0x74
 8007f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f66:	89ab      	ldrh	r3, [r5, #12]
 8007f68:	0598      	lsls	r0, r3, #22
 8007f6a:	d4f7      	bmi.n	8007f5c <_vfiprintf_r+0x44>
 8007f6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f6e:	f7ff fdef 	bl	8007b50 <__retarget_lock_release_recursive>
 8007f72:	e7f3      	b.n	8007f5c <_vfiprintf_r+0x44>
 8007f74:	2300      	movs	r3, #0
 8007f76:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f78:	2320      	movs	r3, #32
 8007f7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f82:	2330      	movs	r3, #48	@ 0x30
 8007f84:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008134 <_vfiprintf_r+0x21c>
 8007f88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f8c:	f04f 0901 	mov.w	r9, #1
 8007f90:	4623      	mov	r3, r4
 8007f92:	469a      	mov	sl, r3
 8007f94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f98:	b10a      	cbz	r2, 8007f9e <_vfiprintf_r+0x86>
 8007f9a:	2a25      	cmp	r2, #37	@ 0x25
 8007f9c:	d1f9      	bne.n	8007f92 <_vfiprintf_r+0x7a>
 8007f9e:	ebba 0b04 	subs.w	fp, sl, r4
 8007fa2:	d00b      	beq.n	8007fbc <_vfiprintf_r+0xa4>
 8007fa4:	465b      	mov	r3, fp
 8007fa6:	4622      	mov	r2, r4
 8007fa8:	4629      	mov	r1, r5
 8007faa:	4630      	mov	r0, r6
 8007fac:	f7ff ffa1 	bl	8007ef2 <__sfputs_r>
 8007fb0:	3001      	adds	r0, #1
 8007fb2:	f000 80a7 	beq.w	8008104 <_vfiprintf_r+0x1ec>
 8007fb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fb8:	445a      	add	r2, fp
 8007fba:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fbc:	f89a 3000 	ldrb.w	r3, [sl]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f000 809f 	beq.w	8008104 <_vfiprintf_r+0x1ec>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fd0:	f10a 0a01 	add.w	sl, sl, #1
 8007fd4:	9304      	str	r3, [sp, #16]
 8007fd6:	9307      	str	r3, [sp, #28]
 8007fd8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007fdc:	931a      	str	r3, [sp, #104]	@ 0x68
 8007fde:	4654      	mov	r4, sl
 8007fe0:	2205      	movs	r2, #5
 8007fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fe6:	4853      	ldr	r0, [pc, #332]	@ (8008134 <_vfiprintf_r+0x21c>)
 8007fe8:	f7f8 f97a 	bl	80002e0 <memchr>
 8007fec:	9a04      	ldr	r2, [sp, #16]
 8007fee:	b9d8      	cbnz	r0, 8008028 <_vfiprintf_r+0x110>
 8007ff0:	06d1      	lsls	r1, r2, #27
 8007ff2:	bf44      	itt	mi
 8007ff4:	2320      	movmi	r3, #32
 8007ff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ffa:	0713      	lsls	r3, r2, #28
 8007ffc:	bf44      	itt	mi
 8007ffe:	232b      	movmi	r3, #43	@ 0x2b
 8008000:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008004:	f89a 3000 	ldrb.w	r3, [sl]
 8008008:	2b2a      	cmp	r3, #42	@ 0x2a
 800800a:	d015      	beq.n	8008038 <_vfiprintf_r+0x120>
 800800c:	9a07      	ldr	r2, [sp, #28]
 800800e:	4654      	mov	r4, sl
 8008010:	2000      	movs	r0, #0
 8008012:	f04f 0c0a 	mov.w	ip, #10
 8008016:	4621      	mov	r1, r4
 8008018:	f811 3b01 	ldrb.w	r3, [r1], #1
 800801c:	3b30      	subs	r3, #48	@ 0x30
 800801e:	2b09      	cmp	r3, #9
 8008020:	d94b      	bls.n	80080ba <_vfiprintf_r+0x1a2>
 8008022:	b1b0      	cbz	r0, 8008052 <_vfiprintf_r+0x13a>
 8008024:	9207      	str	r2, [sp, #28]
 8008026:	e014      	b.n	8008052 <_vfiprintf_r+0x13a>
 8008028:	eba0 0308 	sub.w	r3, r0, r8
 800802c:	fa09 f303 	lsl.w	r3, r9, r3
 8008030:	4313      	orrs	r3, r2
 8008032:	9304      	str	r3, [sp, #16]
 8008034:	46a2      	mov	sl, r4
 8008036:	e7d2      	b.n	8007fde <_vfiprintf_r+0xc6>
 8008038:	9b03      	ldr	r3, [sp, #12]
 800803a:	1d19      	adds	r1, r3, #4
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	9103      	str	r1, [sp, #12]
 8008040:	2b00      	cmp	r3, #0
 8008042:	bfbb      	ittet	lt
 8008044:	425b      	neglt	r3, r3
 8008046:	f042 0202 	orrlt.w	r2, r2, #2
 800804a:	9307      	strge	r3, [sp, #28]
 800804c:	9307      	strlt	r3, [sp, #28]
 800804e:	bfb8      	it	lt
 8008050:	9204      	strlt	r2, [sp, #16]
 8008052:	7823      	ldrb	r3, [r4, #0]
 8008054:	2b2e      	cmp	r3, #46	@ 0x2e
 8008056:	d10a      	bne.n	800806e <_vfiprintf_r+0x156>
 8008058:	7863      	ldrb	r3, [r4, #1]
 800805a:	2b2a      	cmp	r3, #42	@ 0x2a
 800805c:	d132      	bne.n	80080c4 <_vfiprintf_r+0x1ac>
 800805e:	9b03      	ldr	r3, [sp, #12]
 8008060:	1d1a      	adds	r2, r3, #4
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	9203      	str	r2, [sp, #12]
 8008066:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800806a:	3402      	adds	r4, #2
 800806c:	9305      	str	r3, [sp, #20]
 800806e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008144 <_vfiprintf_r+0x22c>
 8008072:	7821      	ldrb	r1, [r4, #0]
 8008074:	2203      	movs	r2, #3
 8008076:	4650      	mov	r0, sl
 8008078:	f7f8 f932 	bl	80002e0 <memchr>
 800807c:	b138      	cbz	r0, 800808e <_vfiprintf_r+0x176>
 800807e:	9b04      	ldr	r3, [sp, #16]
 8008080:	eba0 000a 	sub.w	r0, r0, sl
 8008084:	2240      	movs	r2, #64	@ 0x40
 8008086:	4082      	lsls	r2, r0
 8008088:	4313      	orrs	r3, r2
 800808a:	3401      	adds	r4, #1
 800808c:	9304      	str	r3, [sp, #16]
 800808e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008092:	4829      	ldr	r0, [pc, #164]	@ (8008138 <_vfiprintf_r+0x220>)
 8008094:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008098:	2206      	movs	r2, #6
 800809a:	f7f8 f921 	bl	80002e0 <memchr>
 800809e:	2800      	cmp	r0, #0
 80080a0:	d03f      	beq.n	8008122 <_vfiprintf_r+0x20a>
 80080a2:	4b26      	ldr	r3, [pc, #152]	@ (800813c <_vfiprintf_r+0x224>)
 80080a4:	bb1b      	cbnz	r3, 80080ee <_vfiprintf_r+0x1d6>
 80080a6:	9b03      	ldr	r3, [sp, #12]
 80080a8:	3307      	adds	r3, #7
 80080aa:	f023 0307 	bic.w	r3, r3, #7
 80080ae:	3308      	adds	r3, #8
 80080b0:	9303      	str	r3, [sp, #12]
 80080b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080b4:	443b      	add	r3, r7
 80080b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80080b8:	e76a      	b.n	8007f90 <_vfiprintf_r+0x78>
 80080ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80080be:	460c      	mov	r4, r1
 80080c0:	2001      	movs	r0, #1
 80080c2:	e7a8      	b.n	8008016 <_vfiprintf_r+0xfe>
 80080c4:	2300      	movs	r3, #0
 80080c6:	3401      	adds	r4, #1
 80080c8:	9305      	str	r3, [sp, #20]
 80080ca:	4619      	mov	r1, r3
 80080cc:	f04f 0c0a 	mov.w	ip, #10
 80080d0:	4620      	mov	r0, r4
 80080d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080d6:	3a30      	subs	r2, #48	@ 0x30
 80080d8:	2a09      	cmp	r2, #9
 80080da:	d903      	bls.n	80080e4 <_vfiprintf_r+0x1cc>
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d0c6      	beq.n	800806e <_vfiprintf_r+0x156>
 80080e0:	9105      	str	r1, [sp, #20]
 80080e2:	e7c4      	b.n	800806e <_vfiprintf_r+0x156>
 80080e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80080e8:	4604      	mov	r4, r0
 80080ea:	2301      	movs	r3, #1
 80080ec:	e7f0      	b.n	80080d0 <_vfiprintf_r+0x1b8>
 80080ee:	ab03      	add	r3, sp, #12
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	462a      	mov	r2, r5
 80080f4:	4b12      	ldr	r3, [pc, #72]	@ (8008140 <_vfiprintf_r+0x228>)
 80080f6:	a904      	add	r1, sp, #16
 80080f8:	4630      	mov	r0, r6
 80080fa:	f3af 8000 	nop.w
 80080fe:	4607      	mov	r7, r0
 8008100:	1c78      	adds	r0, r7, #1
 8008102:	d1d6      	bne.n	80080b2 <_vfiprintf_r+0x19a>
 8008104:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008106:	07d9      	lsls	r1, r3, #31
 8008108:	d405      	bmi.n	8008116 <_vfiprintf_r+0x1fe>
 800810a:	89ab      	ldrh	r3, [r5, #12]
 800810c:	059a      	lsls	r2, r3, #22
 800810e:	d402      	bmi.n	8008116 <_vfiprintf_r+0x1fe>
 8008110:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008112:	f7ff fd1d 	bl	8007b50 <__retarget_lock_release_recursive>
 8008116:	89ab      	ldrh	r3, [r5, #12]
 8008118:	065b      	lsls	r3, r3, #25
 800811a:	f53f af1f 	bmi.w	8007f5c <_vfiprintf_r+0x44>
 800811e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008120:	e71e      	b.n	8007f60 <_vfiprintf_r+0x48>
 8008122:	ab03      	add	r3, sp, #12
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	462a      	mov	r2, r5
 8008128:	4b05      	ldr	r3, [pc, #20]	@ (8008140 <_vfiprintf_r+0x228>)
 800812a:	a904      	add	r1, sp, #16
 800812c:	4630      	mov	r0, r6
 800812e:	f000 f879 	bl	8008224 <_printf_i>
 8008132:	e7e4      	b.n	80080fe <_vfiprintf_r+0x1e6>
 8008134:	08008e28 	.word	0x08008e28
 8008138:	08008e32 	.word	0x08008e32
 800813c:	00000000 	.word	0x00000000
 8008140:	08007ef3 	.word	0x08007ef3
 8008144:	08008e2e 	.word	0x08008e2e

08008148 <_printf_common>:
 8008148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800814c:	4616      	mov	r6, r2
 800814e:	4698      	mov	r8, r3
 8008150:	688a      	ldr	r2, [r1, #8]
 8008152:	690b      	ldr	r3, [r1, #16]
 8008154:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008158:	4293      	cmp	r3, r2
 800815a:	bfb8      	it	lt
 800815c:	4613      	movlt	r3, r2
 800815e:	6033      	str	r3, [r6, #0]
 8008160:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008164:	4607      	mov	r7, r0
 8008166:	460c      	mov	r4, r1
 8008168:	b10a      	cbz	r2, 800816e <_printf_common+0x26>
 800816a:	3301      	adds	r3, #1
 800816c:	6033      	str	r3, [r6, #0]
 800816e:	6823      	ldr	r3, [r4, #0]
 8008170:	0699      	lsls	r1, r3, #26
 8008172:	bf42      	ittt	mi
 8008174:	6833      	ldrmi	r3, [r6, #0]
 8008176:	3302      	addmi	r3, #2
 8008178:	6033      	strmi	r3, [r6, #0]
 800817a:	6825      	ldr	r5, [r4, #0]
 800817c:	f015 0506 	ands.w	r5, r5, #6
 8008180:	d106      	bne.n	8008190 <_printf_common+0x48>
 8008182:	f104 0a19 	add.w	sl, r4, #25
 8008186:	68e3      	ldr	r3, [r4, #12]
 8008188:	6832      	ldr	r2, [r6, #0]
 800818a:	1a9b      	subs	r3, r3, r2
 800818c:	42ab      	cmp	r3, r5
 800818e:	dc26      	bgt.n	80081de <_printf_common+0x96>
 8008190:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008194:	6822      	ldr	r2, [r4, #0]
 8008196:	3b00      	subs	r3, #0
 8008198:	bf18      	it	ne
 800819a:	2301      	movne	r3, #1
 800819c:	0692      	lsls	r2, r2, #26
 800819e:	d42b      	bmi.n	80081f8 <_printf_common+0xb0>
 80081a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80081a4:	4641      	mov	r1, r8
 80081a6:	4638      	mov	r0, r7
 80081a8:	47c8      	blx	r9
 80081aa:	3001      	adds	r0, #1
 80081ac:	d01e      	beq.n	80081ec <_printf_common+0xa4>
 80081ae:	6823      	ldr	r3, [r4, #0]
 80081b0:	6922      	ldr	r2, [r4, #16]
 80081b2:	f003 0306 	and.w	r3, r3, #6
 80081b6:	2b04      	cmp	r3, #4
 80081b8:	bf02      	ittt	eq
 80081ba:	68e5      	ldreq	r5, [r4, #12]
 80081bc:	6833      	ldreq	r3, [r6, #0]
 80081be:	1aed      	subeq	r5, r5, r3
 80081c0:	68a3      	ldr	r3, [r4, #8]
 80081c2:	bf0c      	ite	eq
 80081c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081c8:	2500      	movne	r5, #0
 80081ca:	4293      	cmp	r3, r2
 80081cc:	bfc4      	itt	gt
 80081ce:	1a9b      	subgt	r3, r3, r2
 80081d0:	18ed      	addgt	r5, r5, r3
 80081d2:	2600      	movs	r6, #0
 80081d4:	341a      	adds	r4, #26
 80081d6:	42b5      	cmp	r5, r6
 80081d8:	d11a      	bne.n	8008210 <_printf_common+0xc8>
 80081da:	2000      	movs	r0, #0
 80081dc:	e008      	b.n	80081f0 <_printf_common+0xa8>
 80081de:	2301      	movs	r3, #1
 80081e0:	4652      	mov	r2, sl
 80081e2:	4641      	mov	r1, r8
 80081e4:	4638      	mov	r0, r7
 80081e6:	47c8      	blx	r9
 80081e8:	3001      	adds	r0, #1
 80081ea:	d103      	bne.n	80081f4 <_printf_common+0xac>
 80081ec:	f04f 30ff 	mov.w	r0, #4294967295
 80081f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081f4:	3501      	adds	r5, #1
 80081f6:	e7c6      	b.n	8008186 <_printf_common+0x3e>
 80081f8:	18e1      	adds	r1, r4, r3
 80081fa:	1c5a      	adds	r2, r3, #1
 80081fc:	2030      	movs	r0, #48	@ 0x30
 80081fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008202:	4422      	add	r2, r4
 8008204:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008208:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800820c:	3302      	adds	r3, #2
 800820e:	e7c7      	b.n	80081a0 <_printf_common+0x58>
 8008210:	2301      	movs	r3, #1
 8008212:	4622      	mov	r2, r4
 8008214:	4641      	mov	r1, r8
 8008216:	4638      	mov	r0, r7
 8008218:	47c8      	blx	r9
 800821a:	3001      	adds	r0, #1
 800821c:	d0e6      	beq.n	80081ec <_printf_common+0xa4>
 800821e:	3601      	adds	r6, #1
 8008220:	e7d9      	b.n	80081d6 <_printf_common+0x8e>
	...

08008224 <_printf_i>:
 8008224:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008228:	7e0f      	ldrb	r7, [r1, #24]
 800822a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800822c:	2f78      	cmp	r7, #120	@ 0x78
 800822e:	4691      	mov	r9, r2
 8008230:	4680      	mov	r8, r0
 8008232:	460c      	mov	r4, r1
 8008234:	469a      	mov	sl, r3
 8008236:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800823a:	d807      	bhi.n	800824c <_printf_i+0x28>
 800823c:	2f62      	cmp	r7, #98	@ 0x62
 800823e:	d80a      	bhi.n	8008256 <_printf_i+0x32>
 8008240:	2f00      	cmp	r7, #0
 8008242:	f000 80d2 	beq.w	80083ea <_printf_i+0x1c6>
 8008246:	2f58      	cmp	r7, #88	@ 0x58
 8008248:	f000 80b9 	beq.w	80083be <_printf_i+0x19a>
 800824c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008250:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008254:	e03a      	b.n	80082cc <_printf_i+0xa8>
 8008256:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800825a:	2b15      	cmp	r3, #21
 800825c:	d8f6      	bhi.n	800824c <_printf_i+0x28>
 800825e:	a101      	add	r1, pc, #4	@ (adr r1, 8008264 <_printf_i+0x40>)
 8008260:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008264:	080082bd 	.word	0x080082bd
 8008268:	080082d1 	.word	0x080082d1
 800826c:	0800824d 	.word	0x0800824d
 8008270:	0800824d 	.word	0x0800824d
 8008274:	0800824d 	.word	0x0800824d
 8008278:	0800824d 	.word	0x0800824d
 800827c:	080082d1 	.word	0x080082d1
 8008280:	0800824d 	.word	0x0800824d
 8008284:	0800824d 	.word	0x0800824d
 8008288:	0800824d 	.word	0x0800824d
 800828c:	0800824d 	.word	0x0800824d
 8008290:	080083d1 	.word	0x080083d1
 8008294:	080082fb 	.word	0x080082fb
 8008298:	0800838b 	.word	0x0800838b
 800829c:	0800824d 	.word	0x0800824d
 80082a0:	0800824d 	.word	0x0800824d
 80082a4:	080083f3 	.word	0x080083f3
 80082a8:	0800824d 	.word	0x0800824d
 80082ac:	080082fb 	.word	0x080082fb
 80082b0:	0800824d 	.word	0x0800824d
 80082b4:	0800824d 	.word	0x0800824d
 80082b8:	08008393 	.word	0x08008393
 80082bc:	6833      	ldr	r3, [r6, #0]
 80082be:	1d1a      	adds	r2, r3, #4
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6032      	str	r2, [r6, #0]
 80082c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80082cc:	2301      	movs	r3, #1
 80082ce:	e09d      	b.n	800840c <_printf_i+0x1e8>
 80082d0:	6833      	ldr	r3, [r6, #0]
 80082d2:	6820      	ldr	r0, [r4, #0]
 80082d4:	1d19      	adds	r1, r3, #4
 80082d6:	6031      	str	r1, [r6, #0]
 80082d8:	0606      	lsls	r6, r0, #24
 80082da:	d501      	bpl.n	80082e0 <_printf_i+0xbc>
 80082dc:	681d      	ldr	r5, [r3, #0]
 80082de:	e003      	b.n	80082e8 <_printf_i+0xc4>
 80082e0:	0645      	lsls	r5, r0, #25
 80082e2:	d5fb      	bpl.n	80082dc <_printf_i+0xb8>
 80082e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80082e8:	2d00      	cmp	r5, #0
 80082ea:	da03      	bge.n	80082f4 <_printf_i+0xd0>
 80082ec:	232d      	movs	r3, #45	@ 0x2d
 80082ee:	426d      	negs	r5, r5
 80082f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082f4:	4859      	ldr	r0, [pc, #356]	@ (800845c <_printf_i+0x238>)
 80082f6:	230a      	movs	r3, #10
 80082f8:	e011      	b.n	800831e <_printf_i+0xfa>
 80082fa:	6821      	ldr	r1, [r4, #0]
 80082fc:	6833      	ldr	r3, [r6, #0]
 80082fe:	0608      	lsls	r0, r1, #24
 8008300:	f853 5b04 	ldr.w	r5, [r3], #4
 8008304:	d402      	bmi.n	800830c <_printf_i+0xe8>
 8008306:	0649      	lsls	r1, r1, #25
 8008308:	bf48      	it	mi
 800830a:	b2ad      	uxthmi	r5, r5
 800830c:	2f6f      	cmp	r7, #111	@ 0x6f
 800830e:	4853      	ldr	r0, [pc, #332]	@ (800845c <_printf_i+0x238>)
 8008310:	6033      	str	r3, [r6, #0]
 8008312:	bf14      	ite	ne
 8008314:	230a      	movne	r3, #10
 8008316:	2308      	moveq	r3, #8
 8008318:	2100      	movs	r1, #0
 800831a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800831e:	6866      	ldr	r6, [r4, #4]
 8008320:	60a6      	str	r6, [r4, #8]
 8008322:	2e00      	cmp	r6, #0
 8008324:	bfa2      	ittt	ge
 8008326:	6821      	ldrge	r1, [r4, #0]
 8008328:	f021 0104 	bicge.w	r1, r1, #4
 800832c:	6021      	strge	r1, [r4, #0]
 800832e:	b90d      	cbnz	r5, 8008334 <_printf_i+0x110>
 8008330:	2e00      	cmp	r6, #0
 8008332:	d04b      	beq.n	80083cc <_printf_i+0x1a8>
 8008334:	4616      	mov	r6, r2
 8008336:	fbb5 f1f3 	udiv	r1, r5, r3
 800833a:	fb03 5711 	mls	r7, r3, r1, r5
 800833e:	5dc7      	ldrb	r7, [r0, r7]
 8008340:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008344:	462f      	mov	r7, r5
 8008346:	42bb      	cmp	r3, r7
 8008348:	460d      	mov	r5, r1
 800834a:	d9f4      	bls.n	8008336 <_printf_i+0x112>
 800834c:	2b08      	cmp	r3, #8
 800834e:	d10b      	bne.n	8008368 <_printf_i+0x144>
 8008350:	6823      	ldr	r3, [r4, #0]
 8008352:	07df      	lsls	r7, r3, #31
 8008354:	d508      	bpl.n	8008368 <_printf_i+0x144>
 8008356:	6923      	ldr	r3, [r4, #16]
 8008358:	6861      	ldr	r1, [r4, #4]
 800835a:	4299      	cmp	r1, r3
 800835c:	bfde      	ittt	le
 800835e:	2330      	movle	r3, #48	@ 0x30
 8008360:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008364:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008368:	1b92      	subs	r2, r2, r6
 800836a:	6122      	str	r2, [r4, #16]
 800836c:	f8cd a000 	str.w	sl, [sp]
 8008370:	464b      	mov	r3, r9
 8008372:	aa03      	add	r2, sp, #12
 8008374:	4621      	mov	r1, r4
 8008376:	4640      	mov	r0, r8
 8008378:	f7ff fee6 	bl	8008148 <_printf_common>
 800837c:	3001      	adds	r0, #1
 800837e:	d14a      	bne.n	8008416 <_printf_i+0x1f2>
 8008380:	f04f 30ff 	mov.w	r0, #4294967295
 8008384:	b004      	add	sp, #16
 8008386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800838a:	6823      	ldr	r3, [r4, #0]
 800838c:	f043 0320 	orr.w	r3, r3, #32
 8008390:	6023      	str	r3, [r4, #0]
 8008392:	4833      	ldr	r0, [pc, #204]	@ (8008460 <_printf_i+0x23c>)
 8008394:	2778      	movs	r7, #120	@ 0x78
 8008396:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800839a:	6823      	ldr	r3, [r4, #0]
 800839c:	6831      	ldr	r1, [r6, #0]
 800839e:	061f      	lsls	r7, r3, #24
 80083a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80083a4:	d402      	bmi.n	80083ac <_printf_i+0x188>
 80083a6:	065f      	lsls	r7, r3, #25
 80083a8:	bf48      	it	mi
 80083aa:	b2ad      	uxthmi	r5, r5
 80083ac:	6031      	str	r1, [r6, #0]
 80083ae:	07d9      	lsls	r1, r3, #31
 80083b0:	bf44      	itt	mi
 80083b2:	f043 0320 	orrmi.w	r3, r3, #32
 80083b6:	6023      	strmi	r3, [r4, #0]
 80083b8:	b11d      	cbz	r5, 80083c2 <_printf_i+0x19e>
 80083ba:	2310      	movs	r3, #16
 80083bc:	e7ac      	b.n	8008318 <_printf_i+0xf4>
 80083be:	4827      	ldr	r0, [pc, #156]	@ (800845c <_printf_i+0x238>)
 80083c0:	e7e9      	b.n	8008396 <_printf_i+0x172>
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	f023 0320 	bic.w	r3, r3, #32
 80083c8:	6023      	str	r3, [r4, #0]
 80083ca:	e7f6      	b.n	80083ba <_printf_i+0x196>
 80083cc:	4616      	mov	r6, r2
 80083ce:	e7bd      	b.n	800834c <_printf_i+0x128>
 80083d0:	6833      	ldr	r3, [r6, #0]
 80083d2:	6825      	ldr	r5, [r4, #0]
 80083d4:	6961      	ldr	r1, [r4, #20]
 80083d6:	1d18      	adds	r0, r3, #4
 80083d8:	6030      	str	r0, [r6, #0]
 80083da:	062e      	lsls	r6, r5, #24
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	d501      	bpl.n	80083e4 <_printf_i+0x1c0>
 80083e0:	6019      	str	r1, [r3, #0]
 80083e2:	e002      	b.n	80083ea <_printf_i+0x1c6>
 80083e4:	0668      	lsls	r0, r5, #25
 80083e6:	d5fb      	bpl.n	80083e0 <_printf_i+0x1bc>
 80083e8:	8019      	strh	r1, [r3, #0]
 80083ea:	2300      	movs	r3, #0
 80083ec:	6123      	str	r3, [r4, #16]
 80083ee:	4616      	mov	r6, r2
 80083f0:	e7bc      	b.n	800836c <_printf_i+0x148>
 80083f2:	6833      	ldr	r3, [r6, #0]
 80083f4:	1d1a      	adds	r2, r3, #4
 80083f6:	6032      	str	r2, [r6, #0]
 80083f8:	681e      	ldr	r6, [r3, #0]
 80083fa:	6862      	ldr	r2, [r4, #4]
 80083fc:	2100      	movs	r1, #0
 80083fe:	4630      	mov	r0, r6
 8008400:	f7f7 ff6e 	bl	80002e0 <memchr>
 8008404:	b108      	cbz	r0, 800840a <_printf_i+0x1e6>
 8008406:	1b80      	subs	r0, r0, r6
 8008408:	6060      	str	r0, [r4, #4]
 800840a:	6863      	ldr	r3, [r4, #4]
 800840c:	6123      	str	r3, [r4, #16]
 800840e:	2300      	movs	r3, #0
 8008410:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008414:	e7aa      	b.n	800836c <_printf_i+0x148>
 8008416:	6923      	ldr	r3, [r4, #16]
 8008418:	4632      	mov	r2, r6
 800841a:	4649      	mov	r1, r9
 800841c:	4640      	mov	r0, r8
 800841e:	47d0      	blx	sl
 8008420:	3001      	adds	r0, #1
 8008422:	d0ad      	beq.n	8008380 <_printf_i+0x15c>
 8008424:	6823      	ldr	r3, [r4, #0]
 8008426:	079b      	lsls	r3, r3, #30
 8008428:	d413      	bmi.n	8008452 <_printf_i+0x22e>
 800842a:	68e0      	ldr	r0, [r4, #12]
 800842c:	9b03      	ldr	r3, [sp, #12]
 800842e:	4298      	cmp	r0, r3
 8008430:	bfb8      	it	lt
 8008432:	4618      	movlt	r0, r3
 8008434:	e7a6      	b.n	8008384 <_printf_i+0x160>
 8008436:	2301      	movs	r3, #1
 8008438:	4632      	mov	r2, r6
 800843a:	4649      	mov	r1, r9
 800843c:	4640      	mov	r0, r8
 800843e:	47d0      	blx	sl
 8008440:	3001      	adds	r0, #1
 8008442:	d09d      	beq.n	8008380 <_printf_i+0x15c>
 8008444:	3501      	adds	r5, #1
 8008446:	68e3      	ldr	r3, [r4, #12]
 8008448:	9903      	ldr	r1, [sp, #12]
 800844a:	1a5b      	subs	r3, r3, r1
 800844c:	42ab      	cmp	r3, r5
 800844e:	dcf2      	bgt.n	8008436 <_printf_i+0x212>
 8008450:	e7eb      	b.n	800842a <_printf_i+0x206>
 8008452:	2500      	movs	r5, #0
 8008454:	f104 0619 	add.w	r6, r4, #25
 8008458:	e7f5      	b.n	8008446 <_printf_i+0x222>
 800845a:	bf00      	nop
 800845c:	08008e39 	.word	0x08008e39
 8008460:	08008e4a 	.word	0x08008e4a

08008464 <__sflush_r>:
 8008464:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800846c:	0716      	lsls	r6, r2, #28
 800846e:	4605      	mov	r5, r0
 8008470:	460c      	mov	r4, r1
 8008472:	d454      	bmi.n	800851e <__sflush_r+0xba>
 8008474:	684b      	ldr	r3, [r1, #4]
 8008476:	2b00      	cmp	r3, #0
 8008478:	dc02      	bgt.n	8008480 <__sflush_r+0x1c>
 800847a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800847c:	2b00      	cmp	r3, #0
 800847e:	dd48      	ble.n	8008512 <__sflush_r+0xae>
 8008480:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008482:	2e00      	cmp	r6, #0
 8008484:	d045      	beq.n	8008512 <__sflush_r+0xae>
 8008486:	2300      	movs	r3, #0
 8008488:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800848c:	682f      	ldr	r7, [r5, #0]
 800848e:	6a21      	ldr	r1, [r4, #32]
 8008490:	602b      	str	r3, [r5, #0]
 8008492:	d030      	beq.n	80084f6 <__sflush_r+0x92>
 8008494:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008496:	89a3      	ldrh	r3, [r4, #12]
 8008498:	0759      	lsls	r1, r3, #29
 800849a:	d505      	bpl.n	80084a8 <__sflush_r+0x44>
 800849c:	6863      	ldr	r3, [r4, #4]
 800849e:	1ad2      	subs	r2, r2, r3
 80084a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80084a2:	b10b      	cbz	r3, 80084a8 <__sflush_r+0x44>
 80084a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80084a6:	1ad2      	subs	r2, r2, r3
 80084a8:	2300      	movs	r3, #0
 80084aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80084ac:	6a21      	ldr	r1, [r4, #32]
 80084ae:	4628      	mov	r0, r5
 80084b0:	47b0      	blx	r6
 80084b2:	1c43      	adds	r3, r0, #1
 80084b4:	89a3      	ldrh	r3, [r4, #12]
 80084b6:	d106      	bne.n	80084c6 <__sflush_r+0x62>
 80084b8:	6829      	ldr	r1, [r5, #0]
 80084ba:	291d      	cmp	r1, #29
 80084bc:	d82b      	bhi.n	8008516 <__sflush_r+0xb2>
 80084be:	4a2a      	ldr	r2, [pc, #168]	@ (8008568 <__sflush_r+0x104>)
 80084c0:	410a      	asrs	r2, r1
 80084c2:	07d6      	lsls	r6, r2, #31
 80084c4:	d427      	bmi.n	8008516 <__sflush_r+0xb2>
 80084c6:	2200      	movs	r2, #0
 80084c8:	6062      	str	r2, [r4, #4]
 80084ca:	04d9      	lsls	r1, r3, #19
 80084cc:	6922      	ldr	r2, [r4, #16]
 80084ce:	6022      	str	r2, [r4, #0]
 80084d0:	d504      	bpl.n	80084dc <__sflush_r+0x78>
 80084d2:	1c42      	adds	r2, r0, #1
 80084d4:	d101      	bne.n	80084da <__sflush_r+0x76>
 80084d6:	682b      	ldr	r3, [r5, #0]
 80084d8:	b903      	cbnz	r3, 80084dc <__sflush_r+0x78>
 80084da:	6560      	str	r0, [r4, #84]	@ 0x54
 80084dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084de:	602f      	str	r7, [r5, #0]
 80084e0:	b1b9      	cbz	r1, 8008512 <__sflush_r+0xae>
 80084e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084e6:	4299      	cmp	r1, r3
 80084e8:	d002      	beq.n	80084f0 <__sflush_r+0x8c>
 80084ea:	4628      	mov	r0, r5
 80084ec:	f7ff fb40 	bl	8007b70 <_free_r>
 80084f0:	2300      	movs	r3, #0
 80084f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80084f4:	e00d      	b.n	8008512 <__sflush_r+0xae>
 80084f6:	2301      	movs	r3, #1
 80084f8:	4628      	mov	r0, r5
 80084fa:	47b0      	blx	r6
 80084fc:	4602      	mov	r2, r0
 80084fe:	1c50      	adds	r0, r2, #1
 8008500:	d1c9      	bne.n	8008496 <__sflush_r+0x32>
 8008502:	682b      	ldr	r3, [r5, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d0c6      	beq.n	8008496 <__sflush_r+0x32>
 8008508:	2b1d      	cmp	r3, #29
 800850a:	d001      	beq.n	8008510 <__sflush_r+0xac>
 800850c:	2b16      	cmp	r3, #22
 800850e:	d11e      	bne.n	800854e <__sflush_r+0xea>
 8008510:	602f      	str	r7, [r5, #0]
 8008512:	2000      	movs	r0, #0
 8008514:	e022      	b.n	800855c <__sflush_r+0xf8>
 8008516:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800851a:	b21b      	sxth	r3, r3
 800851c:	e01b      	b.n	8008556 <__sflush_r+0xf2>
 800851e:	690f      	ldr	r7, [r1, #16]
 8008520:	2f00      	cmp	r7, #0
 8008522:	d0f6      	beq.n	8008512 <__sflush_r+0xae>
 8008524:	0793      	lsls	r3, r2, #30
 8008526:	680e      	ldr	r6, [r1, #0]
 8008528:	bf08      	it	eq
 800852a:	694b      	ldreq	r3, [r1, #20]
 800852c:	600f      	str	r7, [r1, #0]
 800852e:	bf18      	it	ne
 8008530:	2300      	movne	r3, #0
 8008532:	eba6 0807 	sub.w	r8, r6, r7
 8008536:	608b      	str	r3, [r1, #8]
 8008538:	f1b8 0f00 	cmp.w	r8, #0
 800853c:	dde9      	ble.n	8008512 <__sflush_r+0xae>
 800853e:	6a21      	ldr	r1, [r4, #32]
 8008540:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008542:	4643      	mov	r3, r8
 8008544:	463a      	mov	r2, r7
 8008546:	4628      	mov	r0, r5
 8008548:	47b0      	blx	r6
 800854a:	2800      	cmp	r0, #0
 800854c:	dc08      	bgt.n	8008560 <__sflush_r+0xfc>
 800854e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008556:	81a3      	strh	r3, [r4, #12]
 8008558:	f04f 30ff 	mov.w	r0, #4294967295
 800855c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008560:	4407      	add	r7, r0
 8008562:	eba8 0800 	sub.w	r8, r8, r0
 8008566:	e7e7      	b.n	8008538 <__sflush_r+0xd4>
 8008568:	dfbffffe 	.word	0xdfbffffe

0800856c <_fflush_r>:
 800856c:	b538      	push	{r3, r4, r5, lr}
 800856e:	690b      	ldr	r3, [r1, #16]
 8008570:	4605      	mov	r5, r0
 8008572:	460c      	mov	r4, r1
 8008574:	b913      	cbnz	r3, 800857c <_fflush_r+0x10>
 8008576:	2500      	movs	r5, #0
 8008578:	4628      	mov	r0, r5
 800857a:	bd38      	pop	{r3, r4, r5, pc}
 800857c:	b118      	cbz	r0, 8008586 <_fflush_r+0x1a>
 800857e:	6a03      	ldr	r3, [r0, #32]
 8008580:	b90b      	cbnz	r3, 8008586 <_fflush_r+0x1a>
 8008582:	f7ff f8bd 	bl	8007700 <__sinit>
 8008586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d0f3      	beq.n	8008576 <_fflush_r+0xa>
 800858e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008590:	07d0      	lsls	r0, r2, #31
 8008592:	d404      	bmi.n	800859e <_fflush_r+0x32>
 8008594:	0599      	lsls	r1, r3, #22
 8008596:	d402      	bmi.n	800859e <_fflush_r+0x32>
 8008598:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800859a:	f7ff fad8 	bl	8007b4e <__retarget_lock_acquire_recursive>
 800859e:	4628      	mov	r0, r5
 80085a0:	4621      	mov	r1, r4
 80085a2:	f7ff ff5f 	bl	8008464 <__sflush_r>
 80085a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80085a8:	07da      	lsls	r2, r3, #31
 80085aa:	4605      	mov	r5, r0
 80085ac:	d4e4      	bmi.n	8008578 <_fflush_r+0xc>
 80085ae:	89a3      	ldrh	r3, [r4, #12]
 80085b0:	059b      	lsls	r3, r3, #22
 80085b2:	d4e1      	bmi.n	8008578 <_fflush_r+0xc>
 80085b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085b6:	f7ff facb 	bl	8007b50 <__retarget_lock_release_recursive>
 80085ba:	e7dd      	b.n	8008578 <_fflush_r+0xc>

080085bc <__swhatbuf_r>:
 80085bc:	b570      	push	{r4, r5, r6, lr}
 80085be:	460c      	mov	r4, r1
 80085c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085c4:	2900      	cmp	r1, #0
 80085c6:	b096      	sub	sp, #88	@ 0x58
 80085c8:	4615      	mov	r5, r2
 80085ca:	461e      	mov	r6, r3
 80085cc:	da0d      	bge.n	80085ea <__swhatbuf_r+0x2e>
 80085ce:	89a3      	ldrh	r3, [r4, #12]
 80085d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80085d4:	f04f 0100 	mov.w	r1, #0
 80085d8:	bf14      	ite	ne
 80085da:	2340      	movne	r3, #64	@ 0x40
 80085dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80085e0:	2000      	movs	r0, #0
 80085e2:	6031      	str	r1, [r6, #0]
 80085e4:	602b      	str	r3, [r5, #0]
 80085e6:	b016      	add	sp, #88	@ 0x58
 80085e8:	bd70      	pop	{r4, r5, r6, pc}
 80085ea:	466a      	mov	r2, sp
 80085ec:	f000 f862 	bl	80086b4 <_fstat_r>
 80085f0:	2800      	cmp	r0, #0
 80085f2:	dbec      	blt.n	80085ce <__swhatbuf_r+0x12>
 80085f4:	9901      	ldr	r1, [sp, #4]
 80085f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80085fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80085fe:	4259      	negs	r1, r3
 8008600:	4159      	adcs	r1, r3
 8008602:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008606:	e7eb      	b.n	80085e0 <__swhatbuf_r+0x24>

08008608 <__smakebuf_r>:
 8008608:	898b      	ldrh	r3, [r1, #12]
 800860a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800860c:	079d      	lsls	r5, r3, #30
 800860e:	4606      	mov	r6, r0
 8008610:	460c      	mov	r4, r1
 8008612:	d507      	bpl.n	8008624 <__smakebuf_r+0x1c>
 8008614:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008618:	6023      	str	r3, [r4, #0]
 800861a:	6123      	str	r3, [r4, #16]
 800861c:	2301      	movs	r3, #1
 800861e:	6163      	str	r3, [r4, #20]
 8008620:	b003      	add	sp, #12
 8008622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008624:	ab01      	add	r3, sp, #4
 8008626:	466a      	mov	r2, sp
 8008628:	f7ff ffc8 	bl	80085bc <__swhatbuf_r>
 800862c:	9f00      	ldr	r7, [sp, #0]
 800862e:	4605      	mov	r5, r0
 8008630:	4639      	mov	r1, r7
 8008632:	4630      	mov	r0, r6
 8008634:	f7fe ff1e 	bl	8007474 <_malloc_r>
 8008638:	b948      	cbnz	r0, 800864e <__smakebuf_r+0x46>
 800863a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800863e:	059a      	lsls	r2, r3, #22
 8008640:	d4ee      	bmi.n	8008620 <__smakebuf_r+0x18>
 8008642:	f023 0303 	bic.w	r3, r3, #3
 8008646:	f043 0302 	orr.w	r3, r3, #2
 800864a:	81a3      	strh	r3, [r4, #12]
 800864c:	e7e2      	b.n	8008614 <__smakebuf_r+0xc>
 800864e:	89a3      	ldrh	r3, [r4, #12]
 8008650:	6020      	str	r0, [r4, #0]
 8008652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008656:	81a3      	strh	r3, [r4, #12]
 8008658:	9b01      	ldr	r3, [sp, #4]
 800865a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800865e:	b15b      	cbz	r3, 8008678 <__smakebuf_r+0x70>
 8008660:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008664:	4630      	mov	r0, r6
 8008666:	f000 f837 	bl	80086d8 <_isatty_r>
 800866a:	b128      	cbz	r0, 8008678 <__smakebuf_r+0x70>
 800866c:	89a3      	ldrh	r3, [r4, #12]
 800866e:	f023 0303 	bic.w	r3, r3, #3
 8008672:	f043 0301 	orr.w	r3, r3, #1
 8008676:	81a3      	strh	r3, [r4, #12]
 8008678:	89a3      	ldrh	r3, [r4, #12]
 800867a:	431d      	orrs	r5, r3
 800867c:	81a5      	strh	r5, [r4, #12]
 800867e:	e7cf      	b.n	8008620 <__smakebuf_r+0x18>

08008680 <memmove>:
 8008680:	4288      	cmp	r0, r1
 8008682:	b510      	push	{r4, lr}
 8008684:	eb01 0402 	add.w	r4, r1, r2
 8008688:	d902      	bls.n	8008690 <memmove+0x10>
 800868a:	4284      	cmp	r4, r0
 800868c:	4623      	mov	r3, r4
 800868e:	d807      	bhi.n	80086a0 <memmove+0x20>
 8008690:	1e43      	subs	r3, r0, #1
 8008692:	42a1      	cmp	r1, r4
 8008694:	d008      	beq.n	80086a8 <memmove+0x28>
 8008696:	f811 2b01 	ldrb.w	r2, [r1], #1
 800869a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800869e:	e7f8      	b.n	8008692 <memmove+0x12>
 80086a0:	4402      	add	r2, r0
 80086a2:	4601      	mov	r1, r0
 80086a4:	428a      	cmp	r2, r1
 80086a6:	d100      	bne.n	80086aa <memmove+0x2a>
 80086a8:	bd10      	pop	{r4, pc}
 80086aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086b2:	e7f7      	b.n	80086a4 <memmove+0x24>

080086b4 <_fstat_r>:
 80086b4:	b538      	push	{r3, r4, r5, lr}
 80086b6:	4d07      	ldr	r5, [pc, #28]	@ (80086d4 <_fstat_r+0x20>)
 80086b8:	2300      	movs	r3, #0
 80086ba:	4604      	mov	r4, r0
 80086bc:	4608      	mov	r0, r1
 80086be:	4611      	mov	r1, r2
 80086c0:	602b      	str	r3, [r5, #0]
 80086c2:	f000 f821 	bl	8008708 <_fstat>
 80086c6:	1c43      	adds	r3, r0, #1
 80086c8:	d102      	bne.n	80086d0 <_fstat_r+0x1c>
 80086ca:	682b      	ldr	r3, [r5, #0]
 80086cc:	b103      	cbz	r3, 80086d0 <_fstat_r+0x1c>
 80086ce:	6023      	str	r3, [r4, #0]
 80086d0:	bd38      	pop	{r3, r4, r5, pc}
 80086d2:	bf00      	nop
 80086d4:	24000a3c 	.word	0x24000a3c

080086d8 <_isatty_r>:
 80086d8:	b538      	push	{r3, r4, r5, lr}
 80086da:	4d06      	ldr	r5, [pc, #24]	@ (80086f4 <_isatty_r+0x1c>)
 80086dc:	2300      	movs	r3, #0
 80086de:	4604      	mov	r4, r0
 80086e0:	4608      	mov	r0, r1
 80086e2:	602b      	str	r3, [r5, #0]
 80086e4:	f000 f818 	bl	8008718 <_isatty>
 80086e8:	1c43      	adds	r3, r0, #1
 80086ea:	d102      	bne.n	80086f2 <_isatty_r+0x1a>
 80086ec:	682b      	ldr	r3, [r5, #0]
 80086ee:	b103      	cbz	r3, 80086f2 <_isatty_r+0x1a>
 80086f0:	6023      	str	r3, [r4, #0]
 80086f2:	bd38      	pop	{r3, r4, r5, pc}
 80086f4:	24000a3c 	.word	0x24000a3c

080086f8 <_close>:
 80086f8:	4b02      	ldr	r3, [pc, #8]	@ (8008704 <_close+0xc>)
 80086fa:	2258      	movs	r2, #88	@ 0x58
 80086fc:	601a      	str	r2, [r3, #0]
 80086fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008702:	4770      	bx	lr
 8008704:	24000a3c 	.word	0x24000a3c

08008708 <_fstat>:
 8008708:	4b02      	ldr	r3, [pc, #8]	@ (8008714 <_fstat+0xc>)
 800870a:	2258      	movs	r2, #88	@ 0x58
 800870c:	601a      	str	r2, [r3, #0]
 800870e:	f04f 30ff 	mov.w	r0, #4294967295
 8008712:	4770      	bx	lr
 8008714:	24000a3c 	.word	0x24000a3c

08008718 <_isatty>:
 8008718:	4b02      	ldr	r3, [pc, #8]	@ (8008724 <_isatty+0xc>)
 800871a:	2258      	movs	r2, #88	@ 0x58
 800871c:	601a      	str	r2, [r3, #0]
 800871e:	2000      	movs	r0, #0
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	24000a3c 	.word	0x24000a3c

08008728 <_lseek>:
 8008728:	4b02      	ldr	r3, [pc, #8]	@ (8008734 <_lseek+0xc>)
 800872a:	2258      	movs	r2, #88	@ 0x58
 800872c:	601a      	str	r2, [r3, #0]
 800872e:	f04f 30ff 	mov.w	r0, #4294967295
 8008732:	4770      	bx	lr
 8008734:	24000a3c 	.word	0x24000a3c

08008738 <_read>:
 8008738:	4b02      	ldr	r3, [pc, #8]	@ (8008744 <_read+0xc>)
 800873a:	2258      	movs	r2, #88	@ 0x58
 800873c:	601a      	str	r2, [r3, #0]
 800873e:	f04f 30ff 	mov.w	r0, #4294967295
 8008742:	4770      	bx	lr
 8008744:	24000a3c 	.word	0x24000a3c

08008748 <_write>:
 8008748:	4b02      	ldr	r3, [pc, #8]	@ (8008754 <_write+0xc>)
 800874a:	2258      	movs	r2, #88	@ 0x58
 800874c:	601a      	str	r2, [r3, #0]
 800874e:	f04f 30ff 	mov.w	r0, #4294967295
 8008752:	4770      	bx	lr
 8008754:	24000a3c 	.word	0x24000a3c

08008758 <_init>:
 8008758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800875a:	bf00      	nop
 800875c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800875e:	bc08      	pop	{r3}
 8008760:	469e      	mov	lr, r3
 8008762:	4770      	bx	lr

08008764 <_fini>:
 8008764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008766:	bf00      	nop
 8008768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800876a:	bc08      	pop	{r3}
 800876c:	469e      	mov	lr, r3
 800876e:	4770      	bx	lr
